{"ast":null,"code":"import{NativeWindStyleSheet as _NativeWindStyleSheet}from\"nativewind\";import{useContext}from'react';import PageHeader from\"../../components/global/header\";import SafeArea from\"../../components/global/safeArea\";import{useToast}from'native-base';import ToastDialog from\"../../components/global/toast\";import useChatChannels from\"../../../hooks/useChatChannels\";import LoadingView from\"../../components/LoadingOverlay\";import FriendCard from\"../../components/friendCard\";import{formatChatTime}from\"../../../shared/actions/time\";import{FlatList,Text}from\"native-base\";import{UserContext}from\"../../../context/user\";import EmptyView from\"../../components/EmptyView\";import{useNavigation}from'@react-navigation/native';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ChatCard=function ChatCard(props){var _props$room=props.room,users=_props$room.users,lastMessage=_props$room.lastMessage;var createdAt=\"\";if(lastMessage){createdAt=formatChatTime(lastMessage.createdAt.toDate());}var _users$filter$=users.filter(function(user){return user.id!==props.currUserId;})[0],profilePicture=_users$filter$.profilePicture,name=_users$filter$.name;var navigation=useNavigation();return _jsx(FriendCard,{personName:name,profilePicture:profilePicture,lastMessageTime:createdAt,lastMessage:lastMessage==null?void 0:lastMessage.content,onPress:function onPress(){navigation.push(\"room\",{id:props.room.id,name:name,profilePic:profilePicture});}});};export default function ChatScreen(){var toast=useToast();var _useContext=useContext(UserContext),profile=_useContext.profile;var _useChatChannels=useChatChannels(function(error){toast.show({render:function render(){return _jsx(ToastDialog,{message:error});}});}),channels=_useChatChannels.channels,loading=_useChatChannels.loading;return _jsxs(SafeArea,{children:[loading&&_jsx(LoadingView,{}),_jsx(PageHeader,{}),_jsx(Text,{fontSize:25,fontWeight:\"bold\",color:\"onSecondary\",ml:2,mt:5,children:\"Messages\"}),channels.length<1&&_jsx(EmptyView,{title:\"No chats yet\"}),channels.length>0&&_jsx(FlatList,{data:channels,renderItem:function renderItem(_ref){var item=_ref.item;return _jsx(ChatCard,{room:item,currUserId:profile==null?void 0:profile.id});},keyExtractor:function keyExtractor(item){return item.id;},p:2,flex:1})]});}_NativeWindStyleSheet.create({styles:{\"flex\":{\"display\":\"flex\"}}});","map":{"version":3,"names":["useContext","PageHeader","SafeArea","useToast","ToastDialog","useChatChannels","LoadingView","FriendCard","formatChatTime","FlatList","Text","UserContext","EmptyView","useNavigation","ChatCard","props","room","users","lastMessage","createdAt","toDate","filter","user","id","currUserId","profilePicture","name","navigation","content","push","profilePic","ChatScreen","toast","profile","error","show","render","channels","loading","length","item"],"sources":["/Users/sonminhnguyen/Documents/programming/react-native/school/astro_magnet_initial/astro_magnet/src/frontend/screens/chat/rooms.tsx"],"sourcesContent":["import { useContext } from 'react'\nimport PageHeader from '@app/frontend/components/global/header';\nimport SafeArea from \"@app/frontend/components/global/safeArea\";\nimport { useToast } from 'native-base';\nimport ToastDialog from '@app/frontend/components/global/toast';\nimport useChatChannels from \"@app/hooks/useChatChannels\";\nimport LoadingView from \"@app/frontend/components/LoadingOverlay\";\nimport FriendCard from \"@app/frontend/components/friendCard\";\nimport { ChatRoom } from '@app/shared/interfaces/message';\nimport {formatChatTime} from \"@app/shared/actions/time\";\nimport { FlatList, Text } from \"native-base\";\nimport { UserContext } from \"@app/context/user\";\nimport EmptyView from '@app/frontend/components/EmptyView';\nimport { ChatStackParamList } from '../../navigation/chat';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { useNavigation } from '@react-navigation/native';\n\n/**\n * ChatScreen props type\n * @property {boolean} menuVisible - menu visibility\n * @property {Dispatch<SetStateAction<boolean>>} setMenuVisible - menu visibility toggler\n */\ntype NavigationProps = NativeStackNavigationProp<ChatStackParamList, \"room\">;\n\n/**\n * Chat Card props type\n */\ntype ChatCardProps = {\n  currUserId: string;\n  room: ChatRoom;\n}\n\nconst ChatCard = (props: ChatCardProps ) => {\n  const { users, lastMessage } = props.room;\n  let createdAt = \"\";\n  if (lastMessage) {\n    createdAt = formatChatTime(lastMessage.createdAt.toDate());\n  }\n  const { profilePicture, name } = users.filter((user) => user.id !== props.currUserId)[0];\n  const navigation = useNavigation<NavigationProps>();\n  return (\n    <FriendCard\n      personName={name}\n      profilePicture={profilePicture}\n      lastMessageTime={createdAt}\n      lastMessage={lastMessage?.content}\n      onPress={() => {\n        navigation.push(\"room\", {\n          id: props.room.id!,\n          name: name,\n          profilePic: profilePicture\n        });\n      }}\n    />\n  );\n}\n\nexport default function ChatScreen() {\n  const toast = useToast();\n  const { profile } = useContext(UserContext);\n\n  const { channels, loading} = useChatChannels(\n    (error) => {\n      toast.show({\n        render: () => <ToastDialog message={error} />\n      })\n    });\n\n  return (\n    <SafeArea>\n        { loading && <LoadingView /> }\n        <PageHeader />\n        <Text\n          fontSize={25}\n          fontWeight=\"bold\"\n          color=\"onSecondary\"\n          ml={2}\n          mt={5}\n        >\n          Messages\n        </Text>\n        { channels.length < 1 && \n          <EmptyView title='No chats yet' />}\n        { channels.length > 0 &&\n          <FlatList\n            data={channels}\n            renderItem={({ item }) => \n              <ChatCard \n                room={item} \n                currUserId={profile?.id!} \n              />\n            }\n            keyExtractor={(item) => item.id!}\n            p={2}\n            flex={1}\n          />}\n    </SafeArea>    \n );\n}"],"mappings":"sEAAA,OAASA,UAAU,KAAQ,OAAO,CAClC,MAAOC,WAAU,sCACjB,MAAOC,SAAQ,wCACf,OAASC,QAAQ,KAAQ,aAAa,CACtC,MAAOC,YAAW,qCAClB,MAAOC,gBAAe,sCACtB,MAAOC,YAAW,uCAClB,MAAOC,WAAU,mCAEjB,OAAQC,cAAc,oCACtB,OAASC,QAAQ,CAAEC,IAAI,KAAQ,aAAa,CAC5C,OAASC,WAAW,6BACpB,MAAOC,UAAS,kCAGhB,OAASC,aAAa,KAAQ,0BAA0B,CAAC,wFAiBzD,GAAMC,SAAQ,CAAG,QAAXA,SAAQ,CAAIC,KAAoB,CAAM,CAC1C,gBAA+BA,KAAK,CAACC,IAAI,CAAjCC,KAAK,aAALA,KAAK,CAAEC,WAAW,aAAXA,WAAW,CAC1B,GAAIC,UAAS,CAAG,EAAE,CAClB,GAAID,WAAW,CAAE,CACfC,SAAS,CAAGX,cAAc,CAACU,WAAW,CAACC,SAAS,CAACC,MAAM,EAAE,CAAC,CAC5D,CACA,mBAAiCH,KAAK,CAACI,MAAM,CAAC,SAACC,IAAI,QAAKA,KAAI,CAACC,EAAE,GAAKR,KAAK,CAACS,UAAU,GAAC,CAAC,CAAC,CAAC,CAAhFC,cAAc,gBAAdA,cAAc,CAAEC,IAAI,gBAAJA,IAAI,CAC5B,GAAMC,WAAU,CAAGd,aAAa,EAAmB,CACnD,MACE,MAAC,UAAU,EACT,UAAU,CAAEa,IAAK,CACjB,cAAc,CAAED,cAAe,CAC/B,eAAe,CAAEN,SAAU,CAC3B,WAAW,CAAED,WAAW,cAAXA,WAAW,CAAEU,OAAQ,CAClC,OAAO,CAAE,kBAAM,CACbD,UAAU,CAACE,IAAI,CAAC,MAAM,CAAE,CACtBN,EAAE,CAAER,KAAK,CAACC,IAAI,CAACO,EAAG,CAClBG,IAAI,CAAEA,IAAI,CACVI,UAAU,CAAEL,cACd,CAAC,CAAC,CACJ,CAAE,EACF,CAEN,CAAC,CAED,cAAe,SAASM,WAAU,EAAG,CACnC,GAAMC,MAAK,CAAG7B,QAAQ,EAAE,CACxB,gBAAoBH,UAAU,CAACW,WAAW,CAAC,CAAnCsB,OAAO,aAAPA,OAAO,CAEf,qBAA6B5B,eAAe,CAC1C,SAAC6B,KAAK,CAAK,CACTF,KAAK,CAACG,IAAI,CAAC,CACTC,MAAM,CAAE,wBAAM,MAAC,WAAW,EAAC,OAAO,CAAEF,KAAM,EAAG,EAC/C,CAAC,CAAC,CACJ,CAAC,CAAC,CALIG,QAAQ,kBAARA,QAAQ,CAAEC,OAAO,kBAAPA,OAAO,CAOzB,MACE,OAAC,QAAQ,YACHA,OAAO,EAAI,KAAC,WAAW,IAAG,CAC5B,KAAC,UAAU,IAAG,CACd,KAAC,IAAI,EACH,QAAQ,CAAE,EAAG,CACb,UAAU,CAAC,MAAM,CACjB,KAAK,CAAC,aAAa,CACnB,EAAE,CAAE,CAAE,CACN,EAAE,CAAE,CAAE,sBAGD,CACLD,QAAQ,CAACE,MAAM,CAAG,CAAC,EACnB,KAAC,SAAS,EAAC,KAAK,CAAC,cAAc,EAAG,CAClCF,QAAQ,CAACE,MAAM,CAAG,CAAC,EACnB,KAAC,QAAQ,EACP,IAAI,CAAEF,QAAS,CACf,UAAU,CAAE,6BAAGG,KAAI,MAAJA,IAAI,OACjB,MAAC,QAAQ,EACP,IAAI,CAAEA,IAAK,CACX,UAAU,CAAEP,OAAO,cAAPA,OAAO,CAAEV,EAAI,EACzB,EACH,CACD,YAAY,CAAE,sBAACiB,IAAI,QAAKA,KAAI,CAACjB,EAAE,EAAE,CACjC,CAAC,CAAE,CAAE,CACL,IAAI,CAAE,CAAE,EACR,GACG,CAEf,CAAC"},"metadata":{},"sourceType":"module"}