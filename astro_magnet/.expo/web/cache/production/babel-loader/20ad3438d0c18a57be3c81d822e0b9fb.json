{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import{isDate,isNumber}from'@react-native-firebase/app/lib/common';var MIN_SECONDS=-62135596800;var FirestoreTimestamp=function(){function FirestoreTimestamp(seconds,nanoseconds){_classCallCheck(this,FirestoreTimestamp);if(!isNumber(seconds)){throw new Error(\"firebase.firestore.Timestamp 'seconds' expected a number value.\");}if(!isNumber(nanoseconds)){throw new Error(\"firebase.firestore.Timestamp 'nanoseconds' expected a number value.\");}if(nanoseconds<0){throw new Error(\"firebase.firestore.Timestamp 'nanoseconds' out of range: \"+nanoseconds);}if(nanoseconds>=1e9){throw new Error(\"firebase.firestore.Timestamp 'nanoseconds' out of range: \"+nanoseconds);}if(seconds<MIN_SECONDS){throw new Error(\"firebase.firestore.Timestamp 'seconds' out of range: \"+seconds);}if(seconds>=253402300800){throw new Error(\"firebase.firestore.Timestamp 'seconds' out of range: \"+seconds);}this._seconds=seconds;this._nanoseconds=nanoseconds;}_createClass(FirestoreTimestamp,[{key:\"seconds\",get:function get(){return this._seconds;}},{key:\"nanoseconds\",get:function get(){return this._nanoseconds;}},{key:\"isEqual\",value:function isEqual(other){if(!(other instanceof FirestoreTimestamp)){throw Error(\"firebase.firestore.Timestamp.isEqual(*) 'other' expected an instance of Timestamp.\");}return other.seconds===this._seconds&&other.nanoseconds===this._nanoseconds;}},{key:\"toDate\",value:function toDate(){return new Date(this.toMillis());}},{key:\"toMillis\",value:function toMillis(){return this._seconds*1000+this._nanoseconds/1e6;}},{key:\"toString\",value:function toString(){return\"FirestoreTimestamp(seconds=\"+this.seconds+\", nanoseconds=\"+this.nanoseconds+\")\";}},{key:\"toJSON\",value:function toJSON(){return{seconds:this.seconds,nanoseconds:this.nanoseconds};}},{key:\"valueOf\",value:function valueOf(){var adjustedSeconds=this.seconds-MIN_SECONDS;var formattedSeconds=String(adjustedSeconds).padStart(12,'0');var formattedNanoseconds=String(this.nanoseconds).padStart(9,'0');return formattedSeconds+'.'+formattedNanoseconds;}}],[{key:\"now\",value:function now(){return FirestoreTimestamp.fromMillis(Date.now());}},{key:\"fromDate\",value:function fromDate(date){if(!isDate(date)){throw new Error(\"firebase.firestore.Timestamp.fromDate(*) 'date' expected a valid Date object.\");}return FirestoreTimestamp.fromMillis(date.getTime());}},{key:\"fromMillis\",value:function fromMillis(milliseconds){var seconds=Math.floor(milliseconds/1000);var nanoseconds=(milliseconds-seconds*1000)*1e6;return new FirestoreTimestamp(seconds,nanoseconds);}}]);return FirestoreTimestamp;}();export{FirestoreTimestamp as default};","map":{"version":3,"names":["isDate","isNumber","MIN_SECONDS","FirestoreTimestamp","seconds","nanoseconds","Error","_seconds","_nanoseconds","other","Date","toMillis","adjustedSeconds","formattedSeconds","String","padStart","formattedNanoseconds","fromMillis","now","date","getTime","milliseconds","Math","floor"],"sources":["/Users/sonminhnguyen/Documents/programming/react-native/school/astro_magnet_initial/astro_magnet/node_modules/@react-native-firebase/firestore/lib/FirestoreTimestamp.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isDate, isNumber } from '@react-native-firebase/app/lib/common';\n\n// The earlist date supported by Firestore timestamps (0001-01-01T00:00:00Z).\nconst MIN_SECONDS = -62135596800;\n\nexport default class FirestoreTimestamp {\n  static now() {\n    return FirestoreTimestamp.fromMillis(Date.now());\n  }\n\n  static fromDate(date) {\n    if (!isDate(date)) {\n      throw new Error(\n        \"firebase.firestore.Timestamp.fromDate(*) 'date' expected a valid Date object.\",\n      );\n    }\n\n    return FirestoreTimestamp.fromMillis(date.getTime());\n  }\n\n  static fromMillis(milliseconds) {\n    const seconds = Math.floor(milliseconds / 1000);\n    const nanoseconds = (milliseconds - seconds * 1000) * 1e6;\n    return new FirestoreTimestamp(seconds, nanoseconds);\n  }\n\n  constructor(seconds, nanoseconds) {\n    if (!isNumber(seconds)) {\n      throw new Error(\"firebase.firestore.Timestamp 'seconds' expected a number value.\");\n    }\n\n    if (!isNumber(nanoseconds)) {\n      throw new Error(\"firebase.firestore.Timestamp 'nanoseconds' expected a number value.\");\n    }\n\n    if (nanoseconds < 0) {\n      throw new Error(`firebase.firestore.Timestamp 'nanoseconds' out of range: ${nanoseconds}`);\n    }\n\n    if (nanoseconds >= 1e9) {\n      throw new Error(`firebase.firestore.Timestamp 'nanoseconds' out of range: ${nanoseconds}`);\n    }\n\n    // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.\n    if (seconds < MIN_SECONDS) {\n      throw new Error(`firebase.firestore.Timestamp 'seconds' out of range: ${seconds}`);\n    }\n\n    // This will break in the year 10,000.\n    if (seconds >= 253402300800) {\n      throw new Error(`firebase.firestore.Timestamp 'seconds' out of range: ${seconds}`);\n    }\n\n    this._seconds = seconds;\n    this._nanoseconds = nanoseconds;\n  }\n\n  get seconds() {\n    return this._seconds;\n  }\n\n  get nanoseconds() {\n    return this._nanoseconds;\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreTimestamp)) {\n      throw Error(\n        \"firebase.firestore.Timestamp.isEqual(*) 'other' expected an instance of Timestamp.\",\n      );\n    }\n\n    return other.seconds === this._seconds && other.nanoseconds === this._nanoseconds;\n  }\n\n  toDate() {\n    return new Date(this.toMillis());\n  }\n\n  toMillis() {\n    return this._seconds * 1000 + this._nanoseconds / 1e6;\n  }\n\n  toString() {\n    return `FirestoreTimestamp(seconds=${this.seconds}, nanoseconds=${this.nanoseconds})`;\n  }\n\n  toJSON() {\n    return { seconds: this.seconds, nanoseconds: this.nanoseconds };\n  }\n\n  /**\n   * Converts this object to a primitive string, which allows Timestamp objects to be compared\n   * using the `>`, `<=`, `>=` and `>` operators.\n   */\n  valueOf() {\n    // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is\n    // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded\n    // with zeroes to be a consistent length. Strings with this format then have a lexiographical\n    // ordering that matches the expected ordering. The <seconds> translation is done to avoid\n    // having a leading negative sign (i.e. a leading '-' character) in its string representation,\n    // which would affect its lexiographical ordering.\n    const adjustedSeconds = this.seconds - MIN_SECONDS;\n    // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.\n    const formattedSeconds = String(adjustedSeconds).padStart(12, '0');\n    const formattedNanoseconds = String(this.nanoseconds).padStart(9, '0');\n    return formattedSeconds + '.' + formattedNanoseconds;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}