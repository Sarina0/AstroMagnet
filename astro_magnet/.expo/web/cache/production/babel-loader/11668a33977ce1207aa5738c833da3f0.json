{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"elevation\",\"onLongPress\",\"onPress\",\"mode\",\"children\",\"style\",\"theme\",\"testID\",\"accessible\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Animated from\"react-native-web/dist/exports/Animated\";import TouchableWithoutFeedback from\"react-native-web/dist/exports/TouchableWithoutFeedback\";import View from\"react-native-web/dist/exports/View\";import color from'color';import{white,black}from\"../../styles/colors\";import CardContent from\"./CardContent\";import CardActions from\"./CardActions\";import CardCover from\"./CardCover\";import CardTitle from\"./CardTitle\";import Surface from\"../Surface\";import{withTheme}from\"../../core/theming\";var Card=function Card(_ref){var _ref$elevation=_ref.elevation,cardElevation=_ref$elevation===void 0?1:_ref$elevation,onLongPress=_ref.onLongPress,onPress=_ref.onPress,_ref$mode=_ref.mode,cardMode=_ref$mode===void 0?'elevated':_ref$mode,children=_ref.children,style=_ref.style,theme=_ref.theme,testID=_ref.testID,accessible=_ref.accessible,rest=_objectWithoutProperties(_ref,_excluded);var _React$useRef=React.useRef(new Animated.Value(cardElevation)),elevation=_React$useRef.current;var _React$useRef2=React.useRef(new Animated.Value(cardElevation)),elevationDarkAdaptive=_React$useRef2.current;var animation=theme.animation,dark=theme.dark,mode=theme.mode,roundness=theme.roundness;var prevDarkRef=React.useRef(dark);React.useEffect(function(){prevDarkRef.current=dark;});var prevDark=prevDarkRef.current;var isAdaptiveMode=mode==='adaptive';var animationDuration=150*animation.scale;React.useEffect(function(){if(dark&&isAdaptiveMode&&!prevDark){elevation.setValue(cardElevation);elevationDarkAdaptive.setValue(cardElevation);}},[prevDark,dark,isAdaptiveMode,cardElevation,elevation,elevationDarkAdaptive]);var runElevationAnimation=function runElevationAnimation(pressType){var isPressTypeIn=pressType==='in';if(dark&&isAdaptiveMode){Animated.timing(elevationDarkAdaptive,{toValue:isPressTypeIn?8:cardElevation,duration:animationDuration,useNativeDriver:false}).start();}else{Animated.timing(elevation,{toValue:isPressTypeIn?8:cardElevation,duration:animationDuration,useNativeDriver:true}).start();}};var handlePressIn=function handlePressIn(){runElevationAnimation('in');};var handlePressOut=function handlePressOut(){runElevationAnimation('out');};var total=React.Children.count(children);var siblings=React.Children.map(children,function(child){return React.isValidElement(child)&&child.type?child.type.displayName:null;});var borderColor=color(dark?white:black).alpha(0.12).rgb().string();var computedElevation=dark&&isAdaptiveMode?elevationDarkAdaptive:elevation;return React.createElement(Surface,_extends({style:[{borderRadius:roundness,elevation:computedElevation,borderColor:borderColor},cardMode==='outlined'?styles.outlined:{},style],theme:theme},rest),React.createElement(TouchableWithoutFeedback,{delayPressIn:0,disabled:!(onPress||onLongPress),onLongPress:onLongPress,onPress:onPress,onPressIn:onPress||onLongPress?handlePressIn:undefined,onPressOut:onPress||onLongPress?handlePressOut:undefined,testID:testID,accessible:accessible},React.createElement(View,{style:styles.innerContainer},React.Children.map(children,function(child,index){return React.isValidElement(child)?React.cloneElement(child,{index:index,total:total,siblings:siblings}):child;}))));};Card.Content=CardContent;Card.Actions=CardActions;Card.Cover=CardCover;Card.Title=CardTitle;var styles=StyleSheet.create({innerContainer:{flexGrow:1,flexShrink:1},outlined:{elevation:0,borderWidth:1}});export default withTheme(Card);","map":{"version":3,"sources":["Card.tsx"],"names":["React","color","white","black","CardContent","CardActions","CardCover","CardTitle","Surface","withTheme","Card","elevation","cardElevation","onLongPress","onPress","mode","cardMode","children","style","theme","testID","accessible","rest","current","useRef","Animated","Value","elevationDarkAdaptive","animation","dark","roundness","prevDarkRef","useEffect","prevDark","isAdaptiveMode","animationDuration","scale","setValue","runElevationAnimation","pressType","isPressTypeIn","timing","toValue","duration","useNativeDriver","start","handlePressIn","handlePressOut","total","Children","count","siblings","map","child","isValidElement","type","displayName","borderColor","alpha","rgb","string","computedElevation","borderRadius","styles","outlined","undefined","innerContainer","index","cloneElement","Content","Actions","Cover","Title","create","flexGrow","flexShrink","borderWidth"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport { white, black } from '../../styles/colors';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n\ntype OutlinedCardProps = {\n  mode: 'outlined';\n  elevation?: never;\n};\n\ntype ElevatedCardProps = {\n  mode?: 'elevated';\n  elevation?: number;\n};\n\ntype HandlePressType = 'in' | 'out';\n\nexport type Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Resting elevation of the card which controls the drop shadow.\n   */\n  elevation?: never | number;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Mode of the Card.\n   * - `elevated` - Card with elevation.\n   * - `outlined` - Card with an outline.\n   */\n  mode?: 'elevated' | 'outlined';\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  onPress,\n  mode: cardMode = 'elevated',\n  children,\n  style,\n  theme,\n  testID,\n  accessible,\n  ...rest\n}: (OutlinedCardProps | ElevatedCardProps) & Props) => {\n  // Default animated value\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  // Dark adaptive animated value, used in case of toggling the theme,\n  // it prevents animating the background with native drivers inside Surface\n  const { current: elevationDarkAdaptive } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  const { animation, dark, mode, roundness } = theme;\n\n  const prevDarkRef = React.useRef<boolean>(dark);\n  React.useEffect(() => {\n    prevDarkRef.current = dark;\n  });\n\n  const prevDark = prevDarkRef.current;\n  const isAdaptiveMode = mode === 'adaptive';\n  const animationDuration = 150 * animation.scale;\n\n  React.useEffect(() => {\n    /**\n     * Resets animations values if updating to dark adaptive mode,\n     * otherwise, any card that is in the middle of animation while\n     * toggling the theme will stay at that animated value until\n     * the next press-in\n     */\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [\n    prevDark,\n    dark,\n    isAdaptiveMode,\n    cardElevation,\n    elevation,\n    elevationDarkAdaptive,\n  ]);\n\n  const runElevationAnimation = (pressType: HandlePressType) => {\n    const isPressTypeIn = pressType === 'in';\n    if (dark && isAdaptiveMode) {\n      Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false,\n      }).start();\n    } else {\n      Animated.timing(elevation, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressIn = () => {\n    runElevationAnimation('in');\n  };\n\n  const handlePressOut = () => {\n    runElevationAnimation('out');\n  };\n\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  const borderColor = color(dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n  const computedElevation =\n    dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n\n  return (\n    <Surface\n      style={[\n        { borderRadius: roundness, elevation: computedElevation, borderColor },\n        cardMode === 'outlined' ? styles.outlined : {},\n        style,\n      ]}\n      theme={theme}\n      {...rest}\n    >\n      <TouchableWithoutFeedback\n        delayPressIn={0}\n        disabled={!(onPress || onLongPress)}\n        onLongPress={onLongPress}\n        onPress={onPress}\n        onPressIn={onPress || onLongPress ? handlePressIn : undefined}\n        onPressOut={onPress || onLongPress ? handlePressOut : undefined}\n        testID={testID}\n        accessible={accessible}\n      >\n        <View style={styles.innerContainer}>\n          {React.Children.map(children, (child, index) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child, {\n                  index,\n                  total,\n                  siblings,\n                })\n              : child\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  outlined: {\n    elevation: 0,\n    borderWidth: 1,\n  },\n});\n\nexport default withTheme(Card);\n"]},"metadata":{},"sourceType":"module"}