{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"status\",\"theme\",\"disabled\",\"onPress\",\"testID\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import color from'color';import MaterialCommunityIcon from\"../MaterialCommunityIcon\";import TouchableRipple from\"../TouchableRipple/TouchableRipple\";import{withTheme}from\"../../core/theming\";var ANIMATION_DURATION=100;var CheckboxAndroid=function CheckboxAndroid(_ref){var status=_ref.status,theme=_ref.theme,disabled=_ref.disabled,onPress=_ref.onPress,testID=_ref.testID,rest=_objectWithoutProperties(_ref,_excluded);var _React$useRef=React.useRef(new Animated.Value(1)),scaleAnim=_React$useRef.current;var isFirstRendering=React.useRef(true);var scale=theme.animation.scale;React.useEffect(function(){if(isFirstRendering.current){isFirstRendering.current=false;return;}var checked=status==='checked';Animated.sequence([Animated.timing(scaleAnim,{toValue:0.85,duration:checked?ANIMATION_DURATION*scale:0,useNativeDriver:false}),Animated.timing(scaleAnim,{toValue:1,duration:checked?ANIMATION_DURATION*scale:ANIMATION_DURATION*scale*1.75,useNativeDriver:false})]).start();},[status,scaleAnim,scale]);var checked=status==='checked';var indeterminate=status==='indeterminate';var checkedColor=rest.color||theme.colors.accent;var uncheckedColor=rest.uncheckedColor||color(theme.colors.text).alpha(theme.dark?0.7:0.54).rgb().string();var rippleColor,checkboxColor;if(disabled){rippleColor=color(theme.colors.text).alpha(0.16).rgb().string();checkboxColor=theme.colors.disabled;}else{rippleColor=color(checkedColor).fade(0.32).rgb().string();checkboxColor=checked?checkedColor:uncheckedColor;}var borderWidth=scaleAnim.interpolate({inputRange:[0.8,1],outputRange:[7,0]});var icon=indeterminate?'minus-box':checked?'checkbox-marked':'checkbox-blank-outline';return React.createElement(TouchableRipple,_extends({},rest,{borderless:true,rippleColor:rippleColor,onPress:onPress,disabled:disabled,accessibilityTraits:disabled?['button','disabled']:'button',accessibilityComponentType:\"button\",accessibilityRole:\"checkbox\",accessibilityState:{disabled:disabled,checked:checked},accessibilityLiveRegion:\"polite\",style:styles.container,testID:testID}),React.createElement(Animated.View,{style:{transform:[{scale:scaleAnim}]}},React.createElement(MaterialCommunityIcon,{allowFontScaling:false,name:icon,size:24,color:checkboxColor,direction:\"ltr\"}),React.createElement(View,{style:[StyleSheet.absoluteFill,styles.fillContainer]},React.createElement(Animated.View,{style:[styles.fill,{borderColor:checkboxColor},{borderWidth:borderWidth}]}))));};CheckboxAndroid.displayName='Checkbox.Android';var styles=StyleSheet.create({container:{borderRadius:18,width:36,height:36,padding:6},fillContainer:{alignItems:'center',justifyContent:'center'},fill:{height:14,width:14}});export default withTheme(CheckboxAndroid);var CheckboxAndroidWithTheme=withTheme(CheckboxAndroid);export{CheckboxAndroidWithTheme as CheckboxAndroid};","map":{"version":3,"sources":["CheckboxAndroid.tsx"],"names":["React","color","MaterialCommunityIcon","TouchableRipple","withTheme","ANIMATION_DURATION","CheckboxAndroid","status","theme","disabled","onPress","testID","rest","current","scaleAnim","useRef","Animated","Value","isFirstRendering","animation","scale","useEffect","checked","sequence","timing","toValue","duration","useNativeDriver","start","indeterminate","checkedColor","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","checkboxColor","fade","borderWidth","interpolate","inputRange","outputRange","icon","styles","container","transform","StyleSheet","absoluteFill","fillContainer","fill","borderColor","displayName","create","borderRadius","width","height","padding","alignItems","justifyContent","CheckboxAndroidWithTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 100;\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxAndroid = ({\n  status,\n  theme,\n  disabled,\n  onPress,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: scaleAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    const checked = status === 'checked';\n\n    Animated.sequence([\n      Animated.timing(scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? ANIMATION_DURATION * scale : 0,\n        useNativeDriver: false,\n      }),\n      Animated.timing(scaleAnim, {\n        toValue: 1,\n        duration: checked\n          ? ANIMATION_DURATION * scale\n          : ANIMATION_DURATION * scale * 1.75,\n        useNativeDriver: false,\n      }),\n    ]).start();\n  }, [status, scaleAnim, scale]);\n\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor =\n    rest.uncheckedColor ||\n    color(theme.colors.text)\n      .alpha(theme.dark ? 0.7 : 0.54)\n      .rgb()\n      .string();\n\n  let rippleColor, checkboxColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n    checkboxColor = theme.colors.disabled;\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n    checkboxColor = checked ? checkedColor : uncheckedColor;\n  }\n\n  const borderWidth = scaleAnim.interpolate({\n    inputRange: [0.8, 1],\n    outputRange: [7, 0],\n  });\n\n  const icon = indeterminate\n    ? 'minus-box'\n    : checked\n    ? 'checkbox-marked'\n    : 'checkbox-blank-outline';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <Animated.View style={{ transform: [{ scale: scaleAnim }] }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={checkboxColor}\n          direction=\"ltr\"\n        />\n        <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n          <Animated.View\n            style={[\n              styles.fill,\n              { borderColor: checkboxColor },\n              { borderWidth },\n            ]}\n          />\n        </View>\n      </Animated.View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxAndroid.displayName = 'Checkbox.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6,\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  fill: {\n    height: 14,\n    width: 14,\n  },\n});\n\nexport default withTheme(CheckboxAndroid);\n\n// @component-docs ignore-next-line\nconst CheckboxAndroidWithTheme = withTheme(CheckboxAndroid);\n// @component-docs ignore-next-line\nexport { CheckboxAndroidWithTheme as CheckboxAndroid };\n"]},"metadata":{},"sourceType":"module"}