{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"theme\",\"alpha\",\"family\",\"style\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import color from'color';import*as React from'react';import I18nManager from\"react-native-web/dist/exports/I18nManager\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Text from\"./Text\";import{withTheme}from\"../../core/theming\";var StyledText=function StyledText(_ref){var theme=_ref.theme,alpha=_ref.alpha,family=_ref.family,style=_ref.style,rest=_objectWithoutProperties(_ref,_excluded);var textColor=color(theme.colors.text).alpha(alpha).rgb().string();var font=theme.fonts[family];var writingDirection=I18nManager.isRTL?'rtl':'ltr';return React.createElement(Text,_extends({},rest,{style:[styles.text,_objectSpread(_objectSpread({color:textColor},font),{},{writingDirection:writingDirection}),style]}));};var styles=StyleSheet.create({text:{textAlign:'left'}});export default withTheme(StyledText);","map":{"version":3,"sources":["StyledText.tsx"],"names":["color","React","Text","withTheme","StyledText","theme","alpha","family","style","rest","textColor","colors","text","rgb","string","font","fonts","writingDirection","I18nManager","isRTL","styles","create","textAlign"],"mappings":"quCAAA,MAAOA,MAAP,KAAkB,OAAlB,CACA,MAAO,GAAKC,MAAZ,KAAuB,OAAvB,CAAA,oIAGA,MAAOC,KAAP,cACA,OAASC,SAAT,0BASA,GAAMC,WAAU,CAAG,QAAbA,WAAU,CAAG,IAAA,CAAqD,CAApD,GAAEC,MAAF,CAAoD,IAAA,CAAlDA,KAAF,CAASC,KAAT,CAAoD,IAAA,CAA3CA,KAAT,CAAgBC,MAAhB,CAAoD,IAAA,CAApCA,MAAhB,CAAwBC,KAAxB,CAAoD,IAAA,CAA5BA,KAAxB,CAAkCC,IAAAA,0BAAkB,IAAA,YACtE,GAAMC,UAAS,CAAGV,KAAK,CAACK,KAAK,CAACM,MAANN,CAAaO,IAAd,CAALZ,CAAyBM,KAAzBN,CAA+BM,KAA/BN,CAAAA,CAAsCa,GAAtCb,EAAAA,CAA4Cc,MAA5Cd,EAAlB,CACA,GAAMe,KAAI,CAAGV,KAAK,CAACW,KAANX,CAAYE,MAAZF,CAAb,CACA,GAAMY,iBAAgB,CAAGC,WAAW,CAACC,KAAZD,CAAoB,KAApBA,CAA4B,KAArD,CAEA,MACE,MAAA,CAAA,aAAA,CAAC,IAAD,CAAA,QAAA,CAAA,CAAA,CAAA,CACMT,IADN,CAAA,CAEE,KAAK,CAAE,CACLW,MAAM,CAACR,IADF,8BAEHZ,KAAK,CAAEU,SAAT,EAAuBK,IAAvB,MAA6BE,gBAAAA,CAAAA,gBAAAA,GAC7BT,KAHK,CAFT,CAAA,CAAA,CADF,CAUD,CAfD,CAiBA,GAAMY,OAAM,CAAG,UAAU,CAACC,MAAX,CAAkB,CAC/BT,IAAI,CAAE,CACJU,SAAS,CAAE,MADP,CADyB,CAAlB,CAAf,CAMA,cAAenB,UAAS,CAACC,UAAD,CAAxB","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { I18nManager, StyleProp, TextStyle, StyleSheet } from 'react-native';\n\nimport Text from './Text';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentProps<typeof Text> & {\n  alpha: number;\n  family: 'regular' | 'medium' | 'light' | 'thin';\n  style?: StyleProp<TextStyle>;\n  theme: ReactNativePaper.Theme;\n};\n\nconst StyledText = ({ theme, alpha, family, style, ...rest }: Props) => {\n  const textColor = color(theme.colors.text).alpha(alpha).rgb().string();\n  const font = theme.fonts[family];\n  const writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n\n  return (\n    <Text\n      {...rest}\n      style={[\n        styles.text,\n        { color: textColor, ...font, writingDirection },\n        style,\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\nexport default withTheme(StyledText);\n"]},"metadata":{},"sourceType":"module"}