{"ast":null,"code":"import color from'color';import Animated from\"react-native-web/dist/exports/Animated\";import DarkTheme from\"./DarkTheme\";var isAnimatedValue=function isAnimatedValue(it){return it instanceof Animated.Value;};export default function overlay(elevation){var surfaceColor=arguments.length>1&&arguments[1]!==undefined?arguments[1]:DarkTheme.colors.surface;if(isAnimatedValue(elevation)){var inputRange=[0,1,2,3,8,24];return elevation.interpolate({inputRange:inputRange,outputRange:inputRange.map(function(elevation){return calculateColor(surfaceColor,elevation);})});}return calculateColor(surfaceColor,elevation);}function calculateColor(surfaceColor){var elevation=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var overlayTransparency;if(elevation>=1&&elevation<=24){overlayTransparency=elevationOverlayTransparency[elevation];}else if(elevation>24){overlayTransparency=elevationOverlayTransparency[24];}else{overlayTransparency=elevationOverlayTransparency[1];}return color(surfaceColor).mix(color('white'),overlayTransparency*0.01).hex();}var elevationOverlayTransparency={1:5,2:7,3:8,4:9,5:10,6:11,7:11.5,8:12,9:12.5,10:13,11:13.5,12:14,13:14.25,14:14.5,15:14.75,16:15,17:15.12,18:15.24,19:15.36,20:15.48,21:15.6,22:15.72,23:15.84,24:16};","map":{"version":3,"sources":["overlay.tsx"],"names":["color","DarkTheme","isAnimatedValue","it","Animated","Value","overlay","elevation","surfaceColor","colors","surface","inputRange","interpolate","outputRange","map","calculateColor","overlayTransparency","elevationOverlayTransparency","mix","hex"],"mappings":"AAAA,MAAOA,MAAP,KAAkB,OAAlB,CAAA,6DAEA,MAAOC,UAAP,mBAEA,GAAMC,gBAAe,CACnBC,QADID,gBAAe,CACnBC,EADsB,QAEGA,GAAE,WAAYC,SAAQ,CAACC,KAFlD,GAIA,cAAe,SAASC,QAAT,CACbC,SADa,CAG+C,CAAA,GAD5DC,aAC4D,CAAA,SAAA,CAAA,MAAA,CAAA,CAAA,EAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CADrCP,SAAS,CAACQ,MAAVR,CAAiBS,OACoB,CAC5D,GAAIR,eAAe,CAACK,SAAD,CAAnB,CAAgC,CAC9B,GAAMI,WAAU,CAAG,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAa,CAAb,CAAgB,EAAhB,CADW,CAI9B,MAAO,UAAS,CAACC,WAAV,CAAsB,CAC3BD,UAD2B,CAC3BA,UAD2B,CAE3BE,WAAW,CAAE,UAAU,CAACC,GAAX,CAAgBP,SAAAA,SAAD,CAAe,CACzC,MAAOQ,eAAc,CAACP,YAAD,CAAeD,SAAf,CAArB,CACD,CAFY,CAFc,CAAtB,CAAP,CAL0D,CAc5D,MAAOQ,eAAc,CAACP,YAAD,CAAeD,SAAf,CAArB,CACD,CAED,QAASQ,eAAT,CAAwBP,YAAxB,CAAqE,CAAA,GAAvBD,UAAuB,CAAA,SAAA,CAAA,MAAA,CAAA,CAAA,EAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAH,CAAG,CACnE,GAAIS,oBAAJ,CACA,GAAIT,SAAS,EAAI,CAAbA,EAAkBA,SAAS,EAAI,EAAnC,CAAuC,CACrCS,mBAAmB,CAAGC,4BAA4B,CAACV,SAAD,CAAlDS,CACD,CAFD,IAEO,IAAIT,SAAS,CAAG,EAAhB,CAAoB,CACzBS,mBAAmB,CAAGC,4BAA4B,CAAC,EAAD,CAAlDD,CACD,CAFM,IAEA,CACLA,mBAAmB,CAAGC,4BAA4B,CAAC,CAAD,CAAlDD,CACD,CACD,MAAOhB,MAAK,CAACQ,YAAD,CAALR,CACJkB,GADIlB,CACAA,KAAK,CAAC,OAAD,CADLA,CACgBgB,mBAAmB,CAAG,IADtChB,CAAAA,CAEJmB,GAFInB,EAAP,CAGD,CAED,GAAMiB,6BAAoD,CAAG,CAC3D,CAAA,CAAG,CADwD,CAE3D,CAAA,CAAG,CAFwD,CAG3D,CAAA,CAAG,CAHwD,CAI3D,CAAA,CAAG,CAJwD,CAK3D,CAAA,CAAG,EALwD,CAM3D,CAAA,CAAG,EANwD,CAO3D,CAAA,CAAG,IAPwD,CAQ3D,CAAA,CAAG,EARwD,CAS3D,CAAA,CAAG,IATwD,CAU3D,EAAA,CAAI,EAVuD,CAW3D,EAAA,CAAI,IAXuD,CAY3D,EAAA,CAAI,EAZuD,CAa3D,EAAA,CAAI,KAbuD,CAc3D,EAAA,CAAI,IAduD,CAe3D,EAAA,CAAI,KAfuD,CAgB3D,EAAA,CAAI,EAhBuD,CAiB3D,EAAA,CAAI,KAjBuD,CAkB3D,EAAA,CAAI,KAlBuD,CAmB3D,EAAA,CAAI,KAnBuD,CAoB3D,EAAA,CAAI,KApBuD,CAqB3D,EAAA,CAAI,IArBuD,CAsB3D,EAAA,CAAI,KAtBuD,CAuB3D,EAAA,CAAI,KAvBuD,CAwB3D,EAAA,CAAI,EAxBuD,CAA7D","sourcesContent":["import color from 'color';\nimport { Animated } from 'react-native';\nimport DarkTheme from './DarkTheme';\n\nconst isAnimatedValue = (\n  it: number | Animated.AnimatedInterpolation\n): it is Animated.Value => it instanceof Animated.Value;\n\nexport default function overlay<T extends Animated.Value | number>(\n  elevation: T,\n  surfaceColor: string = DarkTheme.colors.surface\n): T extends number ? string : Animated.AnimatedInterpolation {\n  if (isAnimatedValue(elevation)) {\n    const inputRange = [0, 1, 2, 3, 8, 24];\n\n    // @ts-expect-error: TS doesn't seem to refine the type correctly\n    return elevation.interpolate({\n      inputRange,\n      outputRange: inputRange.map((elevation) => {\n        return calculateColor(surfaceColor, elevation);\n      }),\n    });\n  }\n\n  // @ts-expect-error: TS doesn't seem to refine the type correctly\n  return calculateColor(surfaceColor, elevation);\n}\n\nfunction calculateColor(surfaceColor: string, elevation: number = 1) {\n  let overlayTransparency: number;\n  if (elevation >= 1 && elevation <= 24) {\n    overlayTransparency = elevationOverlayTransparency[elevation];\n  } else if (elevation > 24) {\n    overlayTransparency = elevationOverlayTransparency[24];\n  } else {\n    overlayTransparency = elevationOverlayTransparency[1];\n  }\n  return color(surfaceColor)\n    .mix(color('white'), overlayTransparency * 0.01)\n    .hex();\n}\n\nconst elevationOverlayTransparency: Record<string, number> = {\n  1: 5,\n  2: 7,\n  3: 8,\n  4: 9,\n  5: 10,\n  6: 11,\n  7: 11.5,\n  8: 12,\n  9: 12.5,\n  10: 13,\n  11: 13.5,\n  12: 14,\n  13: 14.25,\n  14: 14.5,\n  15: 14.75,\n  16: 15,\n  17: 15.12,\n  18: 15.24,\n  19: 15.36,\n  20: 15.48,\n  21: 15.6,\n  22: 15.72,\n  23: 15.84,\n  24: 16,\n};\n"]},"metadata":{},"sourceType":"module"}