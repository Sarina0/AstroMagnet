{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"style\",\"theme\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import color from'color';import Text from\"../Typography/Text\";import{withTheme}from\"../../core/theming\";var ListSubheader=function ListSubheader(_ref){var style=_ref.style,theme=_ref.theme,rest=_objectWithoutProperties(_ref,_excluded);var colors=theme.colors,fonts=theme.fonts;var font=fonts.medium;var textColor=color(colors.text).alpha(0.54).rgb().string();return React.createElement(Text,_extends({numberOfLines:1},rest,{style:[styles.container,_objectSpread({color:textColor},font),style]}));};ListSubheader.displayName='List.Subheader';var styles=StyleSheet.create({container:{paddingHorizontal:16,paddingVertical:13}});export default withTheme(ListSubheader);","map":{"version":3,"sources":["ListSubheader.tsx"],"names":["React","color","Text","withTheme","ListSubheader","style","theme","rest","colors","fonts","font","medium","textColor","text","alpha","rgb","string","styles","container","displayName","create","paddingHorizontal","paddingVertical"],"mappings":"otCAAA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CAAA,iEAEA,MAAOC,MAAP,KAAkB,OAAlB,CACA,MAAOC,KAAP,0BACA,OAASC,SAAT,0BA0BA,GAAMC,cAAa,CAAG,QAAhBA,cAAa,CAAG,IAAA,CAAsC,CAArC,GAAEC,MAAF,CAAqC,IAAA,CAAnCA,KAAF,CAASC,KAAT,CAAqC,IAAA,CAA5BA,KAAT,CAAmBC,IAAAA,0BAAkB,IAAA,YAC1D,GAAQC,OAAF,CAAoBF,KAA1B,CAAQE,MAAF,CAAUC,KAAAA,CAAUH,KAA1B,CAAgBG,KAAAA,CAChB,GAAMC,KAAI,CAAGD,KAAK,CAACE,MAAnB,CACA,GAAMC,UAAS,CAAGX,KAAK,CAACO,MAAM,CAACK,IAAR,CAALZ,CAAmBa,KAAnBb,CAAyB,IAAzBA,CAAAA,CAA+Bc,GAA/Bd,EAAAA,CAAqCe,MAArCf,EAAlB,CAEA,MACE,MAAA,CAAA,aAAA,CAAC,IAAD,CAAA,QAAA,CAAA,CACE,aAAa,CAAE,CADjB,CAAA,CAEMM,IAFN,CAAA,CAGE,KAAK,CAAE,CAACU,MAAM,CAACC,SAAR,gBAAqBjB,KAAK,CAAEW,SAAT,EAAuBF,IAAAA,EAAQL,KAAlD,CAHT,CAAA,CAAA,CADF,CAOD,CAZD,CAcAD,aAAa,CAACe,WAAdf,CAA4B,gBAA5BA,CAEA,GAAMa,OAAM,CAAG,UAAU,CAACG,MAAX,CAAkB,CAC/BF,SAAS,CAAE,CACTG,iBAAiB,CAAE,EADV,CAETC,eAAe,CAAE,EAFR,CADoB,CAAlB,CAAf,CAOA,cAAenB,UAAS,CAACC,aAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport color from 'color';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\nexport type Props = React.ComponentProps<typeof Text> & {\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to Text element.\n   */\n  style?: StyleProp<TextStyle>;\n};\n\n/**\n * A component used to display a header in lists.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => <List.Subheader>My List Title</List.Subheader>;\n *\n * export default MyComponent;\n * ```\n */\nconst ListSubheader = ({ style, theme, ...rest }: Props) => {\n  const { colors, fonts } = theme;\n  const font = fonts.medium;\n  const textColor = color(colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <Text\n      numberOfLines={1}\n      {...rest}\n      style={[styles.container, { color: textColor, ...font }, style]}\n    />\n  );\n};\n\nListSubheader.displayName = 'List.Subheader';\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 16,\n    paddingVertical: 13,\n  },\n});\n\nexport default withTheme(ListSubheader);\n"]},"metadata":{},"sourceType":"module"}