{"ast":null,"code":"import binaryToBase64 from'react-native/Libraries/Utilities/binaryToBase64';import{promiseDefer}from\"./promise\";var CHARS='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';function btoa(input){var map;var i=0;var block=0;var output='';for(block=0,i=0,map=CHARS;input.charAt(i|0)||(map='=',i%1);output+=map.charAt(63&block>>8-i%1*8)){var charCode=input.charCodeAt(i+=3/4);if(charCode>0xff){throw new Error(\"'RNFirebase.Base64.btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");}block=block<<8|charCode;}return output;}function atob(input){var i=0;var bc=0;var bs=0;var buffer;var output='';var str=input.replace(/[=]+$/,'');if(str.length%4===1){throw new Error(\"'RNFirebase.Base64.atob' failed: The string to be decoded is not correctly encoded.\");}for(bc=0,bs=0,i=0;buffer=str.charAt(i++);~buffer&&(bs=bc%4?bs*64+buffer:buffer,bc++%4)?output+=String.fromCharCode(255&bs>>(-2*bc&6)):0){buffer=CHARS.indexOf(buffer);}return output;}function fromData(data){if(data instanceof Blob){var fileReader=new FileReader();var _promiseDefer=promiseDefer(),resolve=_promiseDefer.resolve,reject=_promiseDefer.reject,promise=_promiseDefer.promise;fileReader.readAsDataURL(data);fileReader.onloadend=function onloadend(){resolve({string:fileReader.result,format:'data_url'});};fileReader.onerror=function onerror(event){fileReader.abort();reject(event);};return promise;}if(data instanceof ArrayBuffer||data instanceof Uint8Array){return Promise.resolve({string:binaryToBase64(data),format:'base64'});}throw new Error(\"'RNFirebase.Base64.fromData' failed: Unknown data type.\");}export default{btoa:btoa,atob:atob,fromData:fromData};","map":{"version":3,"names":["binaryToBase64","promiseDefer","CHARS","btoa","input","map","i","block","output","charAt","charCode","charCodeAt","Error","atob","bc","bs","buffer","str","replace","length","String","fromCharCode","indexOf","fromData","data","Blob","fileReader","FileReader","resolve","reject","promise","readAsDataURL","onloadend","string","result","format","onerror","event","abort","ArrayBuffer","Uint8Array","Promise"],"sources":["/Users/sonminhnguyen/Documents/programming/react-native/school/astro_magnet_initial/astro_magnet/node_modules/@react-native-firebase/app/lib/common/Base64.js"],"sourcesContent":["/* eslint-disable no-bitwise */\n/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport binaryToBase64 from 'react-native/Libraries/Utilities/binaryToBase64';\nimport { promiseDefer } from './promise';\n\nconst CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n/**\n * window.btoa\n */\nfunction btoa(input) {\n  let map;\n  let i = 0;\n  let block = 0;\n  let output = '';\n\n  for (\n    block = 0, i = 0, map = CHARS;\n    input.charAt(i | 0) || ((map = '='), i % 1);\n    output += map.charAt(63 & (block >> (8 - (i % 1) * 8)))\n  ) {\n    const charCode = input.charCodeAt((i += 3 / 4));\n\n    if (charCode > 0xff) {\n      throw new Error(\n        \"'RNFirebase.Base64.btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\",\n      );\n    }\n\n    block = (block << 8) | charCode;\n  }\n\n  return output;\n}\n\n/**\n * window.atob\n */\nfunction atob(input) {\n  let i = 0;\n  let bc = 0;\n  let bs = 0;\n  let buffer;\n  let output = '';\n\n  const str = input.replace(/[=]+$/, '');\n\n  if (str.length % 4 === 1) {\n    throw new Error(\n      \"'RNFirebase.Base64.atob' failed: The string to be decoded is not correctly encoded.\",\n    );\n  }\n\n  for (\n    bc = 0, bs = 0, i = 0;\n    (buffer = str.charAt(i++));\n    ~buffer && ((bs = bc % 4 ? bs * 64 + buffer : buffer), bc++ % 4)\n      ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\n      : 0\n  ) {\n    buffer = CHARS.indexOf(buffer);\n  }\n\n  return output;\n}\n\n/**\n * Converts a Blob, ArrayBuffer or Uint8Array to a base64 string.\n */\nfunction fromData(data) {\n  if (data instanceof Blob) {\n    const fileReader = new FileReader();\n    const { resolve, reject, promise } = promiseDefer();\n\n    fileReader.readAsDataURL(data);\n\n    fileReader.onloadend = function onloadend() {\n      resolve({ string: fileReader.result, format: 'data_url' });\n    };\n\n    fileReader.onerror = function onerror(event) {\n      fileReader.abort();\n      reject(event);\n    };\n\n    return promise;\n  }\n\n  if (data instanceof ArrayBuffer || data instanceof Uint8Array) {\n    return Promise.resolve({\n      string: binaryToBase64(data),\n      format: 'base64',\n    });\n  }\n\n  throw new Error(\"'RNFirebase.Base64.fromData' failed: Unknown data type.\");\n}\n\nexport default {\n  btoa,\n  atob,\n  fromData,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}