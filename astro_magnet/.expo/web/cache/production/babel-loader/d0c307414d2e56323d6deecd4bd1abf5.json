{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";export function multiFactor(auth){console.warn('This method is deprecated. Please use auth().multiFactor(user) instead');return new MultiFactorUser(auth);}export var MultiFactorUser=function(){function MultiFactorUser(auth,user){_classCallCheck(this,MultiFactorUser);this._auth=auth;if(user===undefined){user=auth.currentUser;}this._user=user;this.enrolledFactor=user.multiFactor.enrolledFactors;}_createClass(MultiFactorUser,[{key:\"getSession\",value:function getSession(){return this._auth.native.getSession();}},{key:\"enroll\",value:function(){var _enroll=_asyncToGenerator(function*(multiFactorAssertion,displayName){var token=multiFactorAssertion.token,secret=multiFactorAssertion.secret;yield this._auth.native.finalizeMultiFactorEnrollment(token,secret,displayName);return this._auth.currentUser.reload();});function enroll(_x,_x2){return _enroll.apply(this,arguments);}return enroll;}()},{key:\"unenroll\",value:function unenroll(){return Promise.reject(new Error('No implemented yet.'));}}]);return MultiFactorUser;}();","map":{"version":3,"names":["multiFactor","auth","console","warn","MultiFactorUser","user","_auth","undefined","currentUser","_user","enrolledFactor","enrolledFactors","native","getSession","multiFactorAssertion","displayName","token","secret","finalizeMultiFactorEnrollment","reload","Promise","reject","Error"],"sources":["/Users/sonminhnguyen/Documents/programming/react-native/school/astro_magnet_initial/astro_magnet/node_modules/@react-native-firebase/auth/lib/multiFactor.js"],"sourcesContent":["/**\n * Return a MultiFactorUser instance the gateway to multi-factor operations.\n */\nexport function multiFactor(auth) {\n  // eslint-disable-next-line no-console\n  console.warn('This method is deprecated. Please use auth().multiFactor(user) instead');\n  return new MultiFactorUser(auth);\n}\n\nexport class MultiFactorUser {\n  constructor(auth, user) {\n    this._auth = auth;\n    if (user === undefined) {\n      user = auth.currentUser;\n    }\n    this._user = user;\n    this.enrolledFactor = user.multiFactor.enrolledFactors;\n  }\n\n  getSession() {\n    return this._auth.native.getSession();\n  }\n\n  /**\n   * Finalize the enrollment process for the given multi-factor assertion.\n   * Optionally set a displayName. This method will reload the current user\n   * profile, which is necessary to see the multi-factor changes.\n   */\n  async enroll(multiFactorAssertion, displayName) {\n    const { token, secret } = multiFactorAssertion;\n    await this._auth.native.finalizeMultiFactorEnrollment(token, secret, displayName);\n\n    // We need to reload the user otherwise the changes are not visible\n    return this._auth.currentUser.reload();\n  }\n\n  unenroll() {\n    return Promise.reject(new Error('No implemented yet.'));\n  }\n}\n"],"mappings":"uMAGA,MAAO,SAASA,YAAW,CAACC,IAAI,CAAE,CAEhCC,OAAO,CAACC,IAAI,CAAC,wEAAwE,CAAC,CACtF,MAAO,IAAIC,gBAAe,CAACH,IAAI,CAAC,CAClC,CAEA,UAAaG,gBAAe,YAC1B,yBAAYH,IAAI,CAAEI,IAAI,CAAE,uCACtB,IAAI,CAACC,KAAK,CAAGL,IAAI,CACjB,GAAII,IAAI,GAAKE,SAAS,CAAE,CACtBF,IAAI,CAAGJ,IAAI,CAACO,WAAW,CACzB,CACA,IAAI,CAACC,KAAK,CAAGJ,IAAI,CACjB,IAAI,CAACK,cAAc,CAAGL,IAAI,CAACL,WAAW,CAACW,eAAe,CACxD,CAAC,sDAED,qBAAa,CACX,MAAO,KAAI,CAACL,KAAK,CAACM,MAAM,CAACC,UAAU,EAAE,CACvC,CAAC,+DAOD,UAAaC,oBAAoB,CAAEC,WAAW,CAAE,CAC9C,GAAQC,MAAK,CAAaF,oBAAoB,CAAtCE,KAAK,CAAEC,MAAM,CAAKH,oBAAoB,CAA/BG,MAAM,CACrB,KAAM,KAAI,CAACX,KAAK,CAACM,MAAM,CAACM,6BAA6B,CAACF,KAAK,CAAEC,MAAM,CAAEF,WAAW,CAAC,CAGjF,MAAO,KAAI,CAACT,KAAK,CAACE,WAAW,CAACW,MAAM,EAAE,CACxC,CAAC,yGAED,mBAAW,CACT,MAAOC,QAAO,CAACC,MAAM,CAAC,GAAIC,MAAK,CAAC,qBAAqB,CAAC,CAAC,CACzD,CAAC"},"metadata":{},"sourceType":"module"}