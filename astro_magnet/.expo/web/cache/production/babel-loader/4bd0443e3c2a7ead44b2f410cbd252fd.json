{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{useState,useEffect,useContext}from\"react\";import firestore from\"@react-native-firebase/firestore\";import{UserContext}from\"../context/user\";export default function useChatChannels(onError){var _useContext=useContext(UserContext),profile=_useContext.profile;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),channels=_useState2[0],setChannels=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),loading=_useState4[0],setLoading=_useState4[1];useEffect(function(){if(!profile){setLoading(false);return;}if(profile.messagingFriendList.length===0){setLoading(false);setChannels([]);return;}var chatRoomIds=profile.messagingFriendList.map(function(friend){return friend.chatRoomId;});var unsubscribe=firestore().collection(\"chatRooms\").where(firestore.FieldPath.documentId(),\"in\",chatRoomIds).onSnapshot(function(querySnapshot){var list=[];querySnapshot.forEach(function(doc){list.push(_objectSpread({id:doc.id},doc.data()));});setChannels(list);setLoading(false);},function(error){setLoading(false);onError&&onError(\"Error fetching chatrooms\");console.log(\"[ERROR] error fetching chatrooms:\",error);});return unsubscribe;},[profile==null?void 0:profile.messagingFriendList]);return{channels:channels,loading:loading};}","map":{"version":3,"names":["useState","useEffect","useContext","firestore","UserContext","useChatChannels","onError","profile","channels","setChannels","loading","setLoading","messagingFriendList","length","chatRoomIds","map","friend","chatRoomId","unsubscribe","collection","where","FieldPath","documentId","onSnapshot","querySnapshot","list","forEach","doc","push","id","data","error","console","log"],"sources":["/Users/sonminhnguyen/Documents/programming/react-native/school/astro_magnet_initial/astro_magnet/src/hooks/useChatChannels.tsx"],"sourcesContent":["import { useState, useEffect, useContext } from \"react\";\nimport firestore from \"@react-native-firebase/firestore\";\nimport { FireDoc } from \"@app/shared/interfaces/firebase\";\nimport type { ChatRoom } from \"@app/shared/interfaces/message\";\nimport {UserContext} from \"@app/context/user\";\n\nexport default function useChatChannels(\n    onError?: (error: string) => void\n) {\n    const { profile } = useContext(UserContext);\n    const [channels, setChannels] = useState<ChatRoom[]>([]);\n    const [loading, setLoading] = useState<boolean>(true);\n\n    useEffect(()=>{\n        if (!profile) {\n            setLoading(false);\n            return;\n        }\n        if (profile.messagingFriendList.length === 0) {\n            setLoading(false);\n            setChannels([]);\n            return;\n        }\n        const chatRoomIds = profile.messagingFriendList.map((friend) => friend.chatRoomId);\n        const unsubscribe = firestore()\n            .collection(\"chatRooms\")\n            .where(firestore.FieldPath.documentId(), \"in\", chatRoomIds)\n            .onSnapshot(\n                (querySnapshot) => {\n                    const list: FireDoc[] = [];\n                    querySnapshot.forEach((doc) => {\n                        list.push({\n                            id: doc.id,\n                            ...doc.data(),\n                        });\n                    });\n                    setChannels(list as ChatRoom[]);\n                    setLoading(false);\n                },\n                (error) => {\n                    setLoading(false);\n                    onError && onError(\"Error fetching chatrooms\");\n                    console.log(\"[ERROR] error fetching chatrooms:\", error);\n                });\n        return unsubscribe;\n    },[profile?.messagingFriendList])\n    return {\n        channels,\n        loading\n    }\n}"],"mappings":"y4BAAA,OAASA,QAAQ,CAAEC,SAAS,CAAEC,UAAU,KAAQ,OAAO,CACvD,MAAOC,UAAS,KAAM,kCAAkC,CAGxD,OAAQC,WAAW,uBAEnB,cAAe,SAASC,gBAAe,CACnCC,OAAiC,CACnC,CACE,gBAAoBJ,UAAU,CAACE,WAAW,CAAC,CAAnCG,OAAO,aAAPA,OAAO,CACf,cAAgCP,QAAQ,CAAa,EAAE,CAAC,wCAAjDQ,QAAQ,eAAEC,WAAW,eAC5B,eAA8BT,QAAQ,CAAU,IAAI,CAAC,yCAA9CU,OAAO,eAAEC,UAAU,eAE1BV,SAAS,CAAC,UAAI,CACV,GAAI,CAACM,OAAO,CAAE,CACVI,UAAU,CAAC,KAAK,CAAC,CACjB,OACJ,CACA,GAAIJ,OAAO,CAACK,mBAAmB,CAACC,MAAM,GAAK,CAAC,CAAE,CAC1CF,UAAU,CAAC,KAAK,CAAC,CACjBF,WAAW,CAAC,EAAE,CAAC,CACf,OACJ,CACA,GAAMK,YAAW,CAAGP,OAAO,CAACK,mBAAmB,CAACG,GAAG,CAAC,SAACC,MAAM,QAAKA,OAAM,CAACC,UAAU,GAAC,CAClF,GAAMC,YAAW,CAAGf,SAAS,EAAE,CAC1BgB,UAAU,CAAC,WAAW,CAAC,CACvBC,KAAK,CAACjB,SAAS,CAACkB,SAAS,CAACC,UAAU,EAAE,CAAE,IAAI,CAAER,WAAW,CAAC,CAC1DS,UAAU,CACP,SAACC,aAAa,CAAK,CACf,GAAMC,KAAe,CAAG,EAAE,CAC1BD,aAAa,CAACE,OAAO,CAAC,SAACC,GAAG,CAAK,CAC3BF,IAAI,CAACG,IAAI,gBACLC,EAAE,CAAEF,GAAG,CAACE,EAAE,EACPF,GAAG,CAACG,IAAI,EAAE,EACf,CACN,CAAC,CAAC,CACFrB,WAAW,CAACgB,IAAI,CAAe,CAC/Bd,UAAU,CAAC,KAAK,CAAC,CACrB,CAAC,CACD,SAACoB,KAAK,CAAK,CACPpB,UAAU,CAAC,KAAK,CAAC,CACjBL,OAAO,EAAIA,OAAO,CAAC,0BAA0B,CAAC,CAC9C0B,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAEF,KAAK,CAAC,CAC3D,CAAC,CAAC,CACV,MAAOb,YAAW,CACtB,CAAC,CAAC,CAACX,OAAO,cAAPA,OAAO,CAAEK,mBAAmB,CAAC,CAAC,CACjC,MAAO,CACHJ,QAAQ,CAARA,QAAQ,CACRE,OAAO,CAAPA,OACJ,CAAC,CACL"},"metadata":{},"sourceType":"module"}