{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"style\",\"type\",\"visible\",\"theme\",\"onLayout\",\"padding\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import color from'color';import Animated from\"react-native-web/dist/exports/Animated\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import AnimatedText from\"./Typography/AnimatedText\";import{withTheme}from\"../core/theming\";var HelperText=function HelperText(_ref){var style=_ref.style,_ref$type=_ref.type,type=_ref$type===void 0?'info':_ref$type,_ref$visible=_ref.visible,visible=_ref$visible===void 0?true:_ref$visible,theme=_ref.theme,onLayout=_ref.onLayout,_ref$padding=_ref.padding,padding=_ref$padding===void 0?'normal':_ref$padding,rest=_objectWithoutProperties(_ref,_excluded);var _React$useRef=React.useRef(new Animated.Value(visible?1:0)),shown=_React$useRef.current;var _React$useRef2=React.useRef(0),textHeight=_React$useRef2.current;var scale=theme.animation.scale;var _rest$maxFontSizeMult=rest.maxFontSizeMultiplier,maxFontSizeMultiplier=_rest$maxFontSizeMult===void 0?1.5:_rest$maxFontSizeMult;React.useEffect(function(){if(visible){Animated.timing(shown,{toValue:1,duration:150*scale,useNativeDriver:true}).start();}else{Animated.timing(shown,{toValue:0,duration:180*scale,useNativeDriver:true}).start();}},[visible,scale,shown]);var handleTextLayout=function handleTextLayout(e){onLayout===null||onLayout===void 0?void 0:onLayout(e);textHeight=e.nativeEvent.layout.height;};var colors=theme.colors,dark=theme.dark;var textColor=type==='error'?colors.error:color(colors.text).alpha(dark?0.7:0.54).rgb().string();return React.createElement(AnimatedText,_extends({onLayout:handleTextLayout,style:[styles.text,padding!=='none'?styles.padding:{},{color:textColor,opacity:shown,transform:visible&&type==='error'?[{translateY:shown.interpolate({inputRange:[0,1],outputRange:[-textHeight/2,0]})}]:[]},style],maxFontSizeMultiplier:maxFontSizeMultiplier},rest),rest.children);};var styles=StyleSheet.create({text:{fontSize:12,paddingVertical:4},padding:{paddingHorizontal:12}});export default withTheme(HelperText);","map":{"version":3,"sources":["HelperText.tsx"],"names":["React","color","AnimatedText","withTheme","HelperText","style","type","visible","theme","onLayout","padding","rest","current","shown","useRef","Animated","Value","textHeight","scale","animation","maxFontSizeMultiplier","useEffect","timing","toValue","duration","useNativeDriver","start","handleTextLayout","e","nativeEvent","layout","height","colors","dark","textColor","error","text","alpha","rgb","string","styles","opacity","transform","translateY","interpolate","inputRange","outputRange","children","create","fontSize","paddingVertical","paddingHorizontal"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport AnimatedText from './Typography/AnimatedText';\nimport { withTheme } from '../core/theming';\nimport type { $Omit } from '../types';\n\nexport type Props = $Omit<\n  $Omit<React.ComponentPropsWithRef<typeof AnimatedText>, 'padding'>,\n  'type'\n> & {\n  /**\n   * Type of the helper text.\n   */\n  type: 'error' | 'info';\n  /**\n   * Whether to display the helper text.\n   */\n  visible?: boolean;\n  /**\n   * Whether to apply padding to the helper text.\n   */\n  padding?: 'none' | 'normal';\n  /**\n   * Text content of the HelperText.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *    const onChangeText = text => setText(text);\n *\n *   const hasErrors = () => {\n *     return !text.includes('@');\n *   };\n *\n *  return (\n *     <View>\n *       <TextInput label=\"Email\" value={text} onChangeText={onChangeText} />\n *       <HelperText type=\"error\" visible={hasErrors()}>\n *         Email address is invalid!\n *       </HelperText>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst HelperText = ({\n  style,\n  type = 'info',\n  visible = true,\n  theme,\n  onLayout,\n  padding = 'normal',\n  ...rest\n}: Props) => {\n  const { current: shown } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n\n  let { current: textHeight } = React.useRef<number>(0);\n\n  const { scale } = theme.animation;\n\n  const { maxFontSizeMultiplier = 1.5 } = rest;\n\n  React.useEffect(() => {\n    if (visible) {\n      // show text\n      Animated.timing(shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      // hide text\n      Animated.timing(shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, shown]);\n\n  const handleTextLayout = (e: LayoutChangeEvent) => {\n    onLayout?.(e);\n    textHeight = e.nativeEvent.layout.height;\n  };\n\n  const { colors, dark } = theme;\n\n  const textColor =\n    type === 'error'\n      ? colors.error\n      : color(colors.text)\n          .alpha(dark ? 0.7 : 0.54)\n          .rgb()\n          .string();\n\n  return (\n    <AnimatedText\n      onLayout={handleTextLayout}\n      style={[\n        styles.text,\n        padding !== 'none' ? styles.padding : {},\n        {\n          color: textColor,\n          opacity: shown,\n          transform:\n            visible && type === 'error'\n              ? [\n                  {\n                    translateY: shown.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [-textHeight / 2, 0],\n                    }),\n                  },\n                ]\n              : [],\n        },\n        style,\n      ]}\n      maxFontSizeMultiplier={maxFontSizeMultiplier}\n      {...rest}\n    >\n      {rest.children}\n    </AnimatedText>\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4,\n  },\n  padding: {\n    paddingHorizontal: 12,\n  },\n});\n\nexport default withTheme(HelperText);\n"]},"metadata":{},"sourceType":"module"}