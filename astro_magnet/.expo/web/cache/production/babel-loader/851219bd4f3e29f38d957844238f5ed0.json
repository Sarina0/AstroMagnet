{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";var linkProviderId='emailLink';var passwordProviderId='password';var EmailAuthProvider=function(){function EmailAuthProvider(){_classCallCheck(this,EmailAuthProvider);throw new Error('`new EmailAuthProvider()` is not supported on the native Firebase SDKs.');}_createClass(EmailAuthProvider,null,[{key:\"EMAIL_LINK_SIGN_IN_METHOD\",get:function get(){return linkProviderId;}},{key:\"EMAIL_PASSWORD_SIGN_IN_METHOD\",get:function get(){return passwordProviderId;}},{key:\"PROVIDER_ID\",get:function get(){return passwordProviderId;}},{key:\"credential\",value:function credential(email,password){return{token:email,secret:password,providerId:passwordProviderId};}},{key:\"credentialWithLink\",value:function credentialWithLink(email,emailLink){return{token:email,secret:emailLink,providerId:linkProviderId};}}]);return EmailAuthProvider;}();export{EmailAuthProvider as default};","map":{"version":3,"names":["linkProviderId","passwordProviderId","EmailAuthProvider","Error","email","password","token","secret","providerId","emailLink"],"sources":["/Users/sonminhnguyen/Documents/programming/react-native/school/astro_magnet_initial/astro_magnet/node_modules/@react-native-firebase/auth/lib/providers/EmailAuthProvider.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nconst linkProviderId = 'emailLink';\nconst passwordProviderId = 'password';\n\nexport default class EmailAuthProvider {\n  constructor() {\n    throw new Error('`new EmailAuthProvider()` is not supported on the native Firebase SDKs.');\n  }\n\n  static get EMAIL_LINK_SIGN_IN_METHOD() {\n    return linkProviderId;\n  }\n\n  static get EMAIL_PASSWORD_SIGN_IN_METHOD() {\n    return passwordProviderId;\n  }\n\n  static get PROVIDER_ID() {\n    return passwordProviderId;\n  }\n\n  static credential(email, password) {\n    return {\n      token: email,\n      secret: password,\n      providerId: passwordProviderId,\n    };\n  }\n\n  static credentialWithLink(email, emailLink) {\n    return {\n      token: email,\n      secret: emailLink,\n      providerId: linkProviderId,\n    };\n  }\n}\n"],"mappings":"gIAiBA,GAAMA,eAAc,CAAG,WAAW,CAClC,GAAMC,mBAAkB,CAAG,UAAU,CAAC,GAEjBC,kBAAiB,YACpC,4BAAc,yCACZ,KAAM,IAAIC,MAAK,CAAC,yEAAyE,CAAC,CAC5F,CAAC,0EAED,cAAuC,CACrC,MAAOH,eAAc,CACvB,CAAC,2CAED,cAA2C,CACzC,MAAOC,mBAAkB,CAC3B,CAAC,yBAED,cAAyB,CACvB,MAAOA,mBAAkB,CAC3B,CAAC,0BAED,oBAAkBG,KAAK,CAAEC,QAAQ,CAAE,CACjC,MAAO,CACLC,KAAK,CAAEF,KAAK,CACZG,MAAM,CAAEF,QAAQ,CAChBG,UAAU,CAAEP,kBACd,CAAC,CACH,CAAC,kCAED,4BAA0BG,KAAK,CAAEK,SAAS,CAAE,CAC1C,MAAO,CACLH,KAAK,CAAEF,KAAK,CACZG,MAAM,CAAEE,SAAS,CACjBD,UAAU,CAAER,cACd,CAAC,CACH,CAAC,wCA/BkBE,iBAAiB"},"metadata":{},"sourceType":"module"}