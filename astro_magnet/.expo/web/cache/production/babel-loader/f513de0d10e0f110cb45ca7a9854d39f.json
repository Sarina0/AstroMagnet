{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"color\",\"subtitle\",\"subtitleStyle\",\"onPress\",\"style\",\"titleRef\",\"titleStyle\",\"theme\",\"title\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import TouchableWithoutFeedback from\"react-native-web/dist/exports/TouchableWithoutFeedback\";import View from\"react-native-web/dist/exports/View\";import color from'color';import Text from\"../Typography/Text\";import{withTheme}from\"../../core/theming\";import{white}from\"../../styles/colors\";var AppbarContent=function AppbarContent(_ref){var _ref$color=_ref.color,titleColor=_ref$color===void 0?white:_ref$color,subtitle=_ref.subtitle,subtitleStyle=_ref.subtitleStyle,onPress=_ref.onPress,style=_ref.style,titleRef=_ref.titleRef,titleStyle=_ref.titleStyle,theme=_ref.theme,title=_ref.title,rest=_objectWithoutProperties(_ref,_excluded);var fonts=theme.fonts;var subtitleColor=color(titleColor).alpha(0.7).rgb().string();return React.createElement(TouchableWithoutFeedback,{onPress:onPress,disabled:!onPress},React.createElement(View,_extends({style:[styles.container,style]},rest),React.createElement(Text,{ref:titleRef,style:[_objectSpread({color:titleColor},Platform.OS==='ios'?fonts.regular:fonts.medium),styles.title,titleStyle],numberOfLines:1,accessible:true,accessibilityTraits:\"header\",accessibilityRole:Platform.OS==='web'?'heading':'header'},title),subtitle?React.createElement(Text,{style:[styles.subtitle,{color:subtitleColor},subtitleStyle],numberOfLines:1},subtitle):null));};AppbarContent.displayName='Appbar.Content';var styles=StyleSheet.create({container:{flex:1,paddingHorizontal:12},title:{fontSize:Platform.OS==='ios'?17:20},subtitle:{fontSize:Platform.OS==='ios'?11:14}});export default withTheme(AppbarContent);var AppbarContentWithTheme=withTheme(AppbarContent);export{AppbarContentWithTheme as AppbarContent};","map":{"version":3,"sources":["AppbarContent.tsx"],"names":["React","color","Text","withTheme","white","AppbarContent","titleColor","subtitle","subtitleStyle","onPress","style","titleRef","titleStyle","theme","title","rest","fonts","subtitleColor","alpha","rgb","string","styles","container","Platform","OS","regular","medium","displayName","create","flex","paddingHorizontal","fontSize","AppbarContentWithTheme"],"mappings":"iyCAAA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CAAA,gRAUA,MAAOC,MAAP,KAAkB,OAAlB,CAEA,MAAOC,KAAP,0BAEA,OAASC,SAAT,0BACA,OAASC,KAAT,2BA+DA,GAAMC,cAAa,CAAG,QAAhBA,cAAa,CAAG,IAAA,CAWT,CAXU,eAWV,IAAA,CAVXJ,KAAK,CAAEK,UAAU,qBAAGF,KADC,YAErBG,QAFqB,CAWV,IAAA,CATXA,QAFqB,CAGrBC,aAHqB,CAWV,IAAA,CARXA,aAHqB,CAIrBC,OAJqB,CAWV,IAAA,CAPXA,OAJqB,CAKrBC,KALqB,CAWV,IAAA,CANXA,KALqB,CAMrBC,QANqB,CAWV,IAAA,CALXA,QANqB,CAOrBC,UAPqB,CAWV,IAAA,CAJXA,UAPqB,CAQrBC,KARqB,CAWV,IAAA,CAHXA,KARqB,CASrBC,KATqB,CAWV,IAAA,CAFXA,KATqB,CAUlBC,IAAAA,0BACQ,IAAA,YACX,GAAQC,MAAAA,CAAUH,KAAlB,CAAQG,KAAAA,CAER,GAAMC,cAAa,CAAGhB,KAAK,CAACK,UAAD,CAALL,CAAkBiB,KAAlBjB,CAAwB,GAAxBA,CAAAA,CAA6BkB,GAA7BlB,EAAAA,CAAmCmB,MAAnCnB,EAAtB,CAEA,MACE,MAAA,CAAA,aAAA,CAAC,wBAAD,CAAA,CAA0B,OAAO,CAAEQ,OAAnC,CAA4C,QAAQ,CAAE,CAACA,OAAvD,CAAA,CACE,KAAA,CAAA,aAAA,CAAC,IAAD,CAAA,QAAA,CAAA,CAAM,KAAK,CAAE,CAACY,MAAM,CAACC,SAAR,CAAmBZ,KAAnB,CAAb,CAAA,CAA4CK,IAA5C,CAAA,CACE,KAAA,CAAA,aAAA,CAAC,IAAD,CAAA,CACE,GAAG,CAAEJ,QADP,CAEE,KAAK,CAAE,gBAEHV,KAAK,CAAEK,UADT,EAEMiB,QAAQ,CAACC,EAATD,GAAgB,KAAhBA,CAAwBP,KAAK,CAACS,OAA9BF,CAAwCP,KAAK,CAACU,MAAlD,EAEFL,MAAM,CAACP,KALF,CAMLF,UANK,CAFT,CAUE,aAAa,CAAE,CAVjB,CAWE,UAAU,CAAA,IAXZ,CAYE,mBAAmB,CAAC,QAZtB,CAcE,iBAAiB,CAAEW,QAAQ,CAACC,EAATD,GAAgB,KAAhBA,CAAwB,SAAxBA,CAAoC,QAdzD,CAAA,CAgBGT,KAhBH,CADF,CAmBGP,QAAQ,CACP,KAAA,CAAA,aAAA,CAAC,IAAD,CAAA,CACE,KAAK,CAAE,CAACc,MAAM,CAACd,QAAR,CAAkB,CAAEN,KAAK,CAAEgB,aAAT,CAAlB,CAA4CT,aAA5C,CADT,CAEE,aAAa,CAAE,CAFjB,CAAA,CAIGD,QAJH,CADO,CAOL,IA1BN,CADF,CADF,CAgCD,CAhDD,CAkDAF,aAAa,CAACsB,WAAdtB,CAA4B,gBAA5BA,CAEA,GAAMgB,OAAM,CAAG,UAAU,CAACO,MAAX,CAAkB,CAC/BN,SAAS,CAAE,CACTO,IAAI,CAAE,CADG,CAETC,iBAAiB,CAAE,EAFV,CADoB,CAK/BhB,KAAK,CAAE,CACLiB,QAAQ,CAAER,QAAQ,CAACC,EAATD,GAAgB,KAAhBA,CAAwB,EAAxBA,CAA6B,EADlC,CALwB,CAQ/BhB,QAAQ,CAAE,CACRwB,QAAQ,CAAER,QAAQ,CAACC,EAATD,GAAgB,KAAhBA,CAAwB,EAAxBA,CAA6B,EAD/B,CARqB,CAAlB,CAAf,CAaA,cAAepB,UAAS,CAACE,aAAD,CAAxB,CAGA,GAAM2B,uBAAsB,CAAG7B,SAAS,CAACE,aAAD,CAAxC,CAEA,OAAS2B,sBAAsB,GAAI3B,cAAnC","sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport Text from '../Typography/Text';\n\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\n\nimport type { $RemoveChildren } from '../../types';\n\nexport type Props = $RemoveChildren<typeof View> & {\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Text for the title.\n   */\n  title: React.ReactNode;\n  /**\n   * Style for the title.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Reference for the title.\n   */\n  titleRef?: React.RefObject<Text>;\n  /**\n   * Text for the subtitle.\n   */\n  subtitle?: React.ReactNode;\n  /**\n   * Style for the subtitle.\n   */\n  subtitleStyle?: StyleProp<TextStyle>;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component used to display a title and optional subtitle in an appbar.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-content.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *     <Appbar.Header>\n *        <Appbar.Content title=\"Title\" subtitle={'Subtitle'} />\n *     </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarContent = ({\n  color: titleColor = white,\n  subtitle,\n  subtitleStyle,\n  onPress,\n  style,\n  titleRef,\n  titleStyle,\n  theme,\n  title,\n  ...rest\n}: Props) => {\n  const { fonts } = theme;\n\n  const subtitleColor = color(titleColor).alpha(0.7).rgb().string();\n\n  return (\n    <TouchableWithoutFeedback onPress={onPress} disabled={!onPress}>\n      <View style={[styles.container, style]} {...rest}>\n        <Text\n          ref={titleRef}\n          style={[\n            {\n              color: titleColor,\n              ...(Platform.OS === 'ios' ? fonts.regular : fonts.medium),\n            },\n            styles.title,\n            titleStyle,\n          ]}\n          numberOfLines={1}\n          accessible\n          accessibilityTraits=\"header\"\n          // @ts-expect-error React Native doesn't accept 'heading' as it's web-only\n          accessibilityRole={Platform.OS === 'web' ? 'heading' : 'header'}\n        >\n          {title}\n        </Text>\n        {subtitle ? (\n          <Text\n            style={[styles.subtitle, { color: subtitleColor }, subtitleStyle]}\n            numberOfLines={1}\n          >\n            {subtitle}\n          </Text>\n        ) : null}\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nAppbarContent.displayName = 'Appbar.Content';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 12,\n  },\n  title: {\n    fontSize: Platform.OS === 'ios' ? 17 : 20,\n  },\n  subtitle: {\n    fontSize: Platform.OS === 'ios' ? 11 : 14,\n  },\n});\n\nexport default withTheme(AppbarContent);\n\n// @component-docs ignore-next-line\nconst AppbarContentWithTheme = withTheme(AppbarContent);\n// @component-docs ignore-next-line\nexport { AppbarContentWithTheme as AppbarContent };\n"]},"metadata":{},"sourceType":"module"}