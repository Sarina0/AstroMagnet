{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React from'react';import TextInputIcon,{IconAdornment}from\"./TextInputIcon\";import TextInputAffix,{AffixAdornment}from\"./TextInputAffix\";import{ADORNMENT_OFFSET,OUTLINED_INPUT_OFFSET}from\"../constants\";import{AdornmentSide,AdornmentType,InputMode}from\"./enums\";export function getAdornmentConfig(_ref){var left=_ref.left,right=_ref.right;var adornmentConfig=[];if(left||right){[{side:AdornmentSide.Left,adornment:left},{side:AdornmentSide.Right,adornment:right}].forEach(function(_ref2){var side=_ref2.side,adornment=_ref2.adornment;if(adornment&&React.isValidElement(adornment)){var type;if(adornment.type===TextInputAffix){type=AdornmentType.Affix;}else if(adornment.type===TextInputIcon){type=AdornmentType.Icon;}adornmentConfig.push({side:side,type:type});}});}return adornmentConfig;}export function getAdornmentStyleAdjustmentForNativeInput(_ref3){var adornmentConfig=_ref3.adornmentConfig,leftAffixWidth=_ref3.leftAffixWidth,rightAffixWidth=_ref3.rightAffixWidth,paddingHorizontal=_ref3.paddingHorizontal,_ref3$inputOffset=_ref3.inputOffset,inputOffset=_ref3$inputOffset===void 0?0:_ref3$inputOffset,mode=_ref3.mode;if(adornmentConfig.length){var adornmentStyleAdjustmentForNativeInput=adornmentConfig.map(function(_ref4){var _ref7;var type=_ref4.type,side=_ref4.side;var isLeftSide=side===AdornmentSide.Left;var inputModeAdornemntOffset=mode===InputMode.Outlined?ADORNMENT_OFFSET+OUTLINED_INPUT_OFFSET:ADORNMENT_OFFSET;var paddingKey=\"padding\"+captalize(side);var affixWidth=isLeftSide?leftAffixWidth:rightAffixWidth;var padding=typeof paddingHorizontal==='number'?paddingHorizontal:inputModeAdornemntOffset;var offset=affixWidth+padding;var isAffix=type===AdornmentType.Affix;var marginKey=\"margin\"+captalize(side);return _ref7={},_defineProperty(_ref7,marginKey,isAffix?0:offset),_defineProperty(_ref7,paddingKey,isAffix?offset:inputOffset),_ref7;});var allStyleAdjustmentsMerged=adornmentStyleAdjustmentForNativeInput.reduce(function(mergedStyles,currentStyle){return _objectSpread(_objectSpread({},mergedStyles),currentStyle);},{});return allStyleAdjustmentsMerged;}else{return[{}];}}var captalize=function captalize(text){return text.charAt(0).toUpperCase()+text.slice(1);};var TextInputAdornment=function TextInputAdornment(_ref5){var adornmentConfig=_ref5.adornmentConfig,left=_ref5.left,right=_ref5.right,onAffixChange=_ref5.onAffixChange,textStyle=_ref5.textStyle,visible=_ref5.visible,topPosition=_ref5.topPosition,isTextInputFocused=_ref5.isTextInputFocused,forceFocus=_ref5.forceFocus,paddingHorizontal=_ref5.paddingHorizontal,maxFontSizeMultiplier=_ref5.maxFontSizeMultiplier;if(adornmentConfig.length){return React.createElement(React.Fragment,null,adornmentConfig.map(function(_ref6){var type=_ref6.type,side=_ref6.side;var inputAdornmentComponent;if(side===AdornmentSide.Left){inputAdornmentComponent=left;}else if(side===AdornmentSide.Right){inputAdornmentComponent=right;}var commonProps={key:side,side:side,testID:side+\"-\"+type+\"-adornment\",isTextInputFocused:isTextInputFocused,paddingHorizontal:paddingHorizontal};if(type===AdornmentType.Icon){return React.createElement(IconAdornment,_extends({},commonProps,{icon:inputAdornmentComponent,topPosition:topPosition[AdornmentType.Icon],forceFocus:forceFocus}));}else if(type===AdornmentType.Affix){return React.createElement(AffixAdornment,_extends({},commonProps,{topPosition:topPosition[AdornmentType.Affix][side],affix:inputAdornmentComponent,textStyle:textStyle,onLayout:onAffixChange[side],visible:visible,maxFontSizeMultiplier:maxFontSizeMultiplier}));}else{return null;}}));}else{return null;}};export default TextInputAdornment;","map":{"version":3,"sources":["TextInputAdornment.tsx"],"names":["React","TextInputIcon","IconAdornment","TextInputAffix","AffixAdornment","ADORNMENT_OFFSET","OUTLINED_INPUT_OFFSET","AdornmentSide","AdornmentType","InputMode","getAdornmentConfig","left","right","adornmentConfig","side","Left","adornment","Right","forEach","isValidElement","type","Affix","Icon","push","getAdornmentStyleAdjustmentForNativeInput","leftAffixWidth","rightAffixWidth","paddingHorizontal","inputOffset","mode","length","adornmentStyleAdjustmentForNativeInput","map","isLeftSide","inputModeAdornemntOffset","Outlined","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","reduce","mergedStyles","currentStyle","text","charAt","toUpperCase","slice","TextInputAdornment","onAffixChange","textStyle","visible","topPosition","isTextInputFocused","forceFocus","maxFontSizeMultiplier","inputAdornmentComponent","commonProps","key","testID"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport { ADORNMENT_OFFSET, OUTLINED_INPUT_OFFSET } from '../constants';\nimport type {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n} from 'react-native';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  paddingHorizontal,\n  inputOffset = 0,\n  mode,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n  mode?: 'outlined' | 'flat';\n  paddingHorizontal?: number | string;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isLeftSide = side === AdornmentSide.Left;\n        const inputModeAdornemntOffset =\n          mode === InputMode.Outlined\n            ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n            : ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n        const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n        const padding =\n          typeof paddingHorizontal === 'number'\n            ? paddingHorizontal\n            : inputModeAdornemntOffset;\n        const offset = affixWidth + padding;\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged =\n      adornmentStyleAdjustmentForNativeInput.reduce(\n        (mergedStyles, currentStyle) => {\n          return {\n            ...mergedStyles,\n            ...currentStyle,\n          };\n        },\n        {}\n      );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            key: side,\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n            paddingHorizontal,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n                maxFontSizeMultiplier={maxFontSizeMultiplier}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"]},"metadata":{},"sourceType":"module"}