{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"disabled\",\"onPress\",\"theme\",\"value\",\"status\",\"testID\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import color from'color';import{RadioButtonContext}from\"./RadioButtonGroup\";import{handlePress,isChecked}from\"./utils\";import TouchableRipple from\"../TouchableRipple/TouchableRipple\";import{withTheme}from\"../../core/theming\";var BORDER_WIDTH=2;var RadioButtonAndroid=function RadioButtonAndroid(_ref){var disabled=_ref.disabled,onPress=_ref.onPress,theme=_ref.theme,value=_ref.value,status=_ref.status,testID=_ref.testID,rest=_objectWithoutProperties(_ref,_excluded);var _React$useRef=React.useRef(new Animated.Value(BORDER_WIDTH)),borderAnim=_React$useRef.current;var _React$useRef2=React.useRef(new Animated.Value(1)),radioAnim=_React$useRef2.current;var isFirstRendering=React.useRef(true);var scale=theme.animation.scale;React.useEffect(function(){if(isFirstRendering.current){isFirstRendering.current=false;return;}if(status==='checked'){radioAnim.setValue(1.2);Animated.timing(radioAnim,{toValue:1,duration:150*scale,useNativeDriver:true}).start();}else{borderAnim.setValue(10);Animated.timing(borderAnim,{toValue:BORDER_WIDTH,duration:150*scale,useNativeDriver:false}).start();}},[status,borderAnim,radioAnim,scale]);var checkedColor=rest.color||theme.colors.accent;var uncheckedColor=rest.uncheckedColor||color(theme.colors.text).alpha(theme.dark?0.7:0.54).rgb().string();var rippleColor,radioColor;return React.createElement(RadioButtonContext.Consumer,null,function(context){var checked=isChecked({contextValue:context===null||context===void 0?void 0:context.value,status:status,value:value})==='checked';if(disabled){rippleColor=color(theme.colors.text).alpha(0.16).rgb().string();radioColor=theme.colors.disabled;}else{rippleColor=color(checkedColor).fade(0.32).rgb().string();radioColor=checked?checkedColor:uncheckedColor;}return React.createElement(TouchableRipple,_extends({},rest,{borderless:true,rippleColor:rippleColor,onPress:disabled?undefined:function(){handlePress({onPress:onPress,onValueChange:context===null||context===void 0?void 0:context.onValueChange,value:value});},accessibilityTraits:disabled?['button','disabled']:'button',accessibilityComponentType:checked?'radiobutton_checked':'radiobutton_unchecked',accessibilityRole:\"radio\",accessibilityState:{disabled:disabled,checked:checked},accessibilityLiveRegion:\"polite\",style:styles.container,testID:testID}),React.createElement(Animated.View,{style:[styles.radio,{borderColor:radioColor,borderWidth:borderAnim}]},checked?React.createElement(View,{style:[StyleSheet.absoluteFill,styles.radioContainer]},React.createElement(Animated.View,{style:[styles.dot,{backgroundColor:radioColor,transform:[{scale:radioAnim}]}]})):null));});};RadioButtonAndroid.displayName='RadioButton.Android';var styles=StyleSheet.create({container:{borderRadius:18},radioContainer:{alignItems:'center',justifyContent:'center'},radio:{height:20,width:20,borderRadius:10,margin:8},dot:{height:10,width:10,borderRadius:5}});export default withTheme(RadioButtonAndroid);var RadioButtonAndroidWithTheme=withTheme(RadioButtonAndroid);export{RadioButtonAndroidWithTheme as RadioButtonAndroid};","map":{"version":3,"sources":["RadioButtonAndroid.tsx"],"names":["React","color","RadioButtonContext","handlePress","isChecked","TouchableRipple","withTheme","BORDER_WIDTH","RadioButtonAndroid","disabled","onPress","theme","value","status","testID","rest","current","borderAnim","useRef","Animated","Value","radioAnim","isFirstRendering","scale","animation","useEffect","setValue","timing","toValue","duration","useNativeDriver","start","checkedColor","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","radioColor","context","checked","contextValue","fade","undefined","onValueChange","styles","container","radio","borderColor","borderWidth","StyleSheet","absoluteFill","radioContainer","dot","backgroundColor","transform","displayName","create","borderRadius","alignItems","justifyContent","height","width","margin","RadioButtonAndroidWithTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonAndroid = ({\n  disabled,\n  onPress,\n  theme,\n  value,\n  status,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: borderAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(BORDER_WIDTH)\n  );\n\n  const { current: radioAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor =\n    rest.uncheckedColor ||\n    color(theme.colors.text)\n      .alpha(theme.dark ? 0.7 : 0.54)\n      .rgb()\n      .string();\n\n  let rippleColor: string, radioColor: string;\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        if (disabled) {\n          rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n          radioColor = theme.colors.disabled;\n        } else {\n          rippleColor = color(checkedColor).fade(0.32).rgb().string();\n          radioColor = checked ? checkedColor : uncheckedColor;\n        }\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      onValueChange: context?.onValueChange,\n                      value,\n                    });\n                  }\n            }\n            // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n            accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n            accessibilityComponentType={\n              checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <Animated.View\n              style={[\n                styles.radio,\n                {\n                  borderColor: radioColor,\n                  borderWidth: borderAnim,\n                },\n              ]}\n            >\n              {checked ? (\n                <View style={[StyleSheet.absoluteFill, styles.radioContainer]}>\n                  <Animated.View\n                    style={[\n                      styles.dot,\n                      {\n                        backgroundColor: radioColor,\n                        transform: [{ scale: radioAnim }],\n                      },\n                    ]}\n                  />\n                </View>\n              ) : null}\n            </Animated.View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonAndroid.displayName = 'RadioButton.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nconst RadioButtonAndroidWithTheme = withTheme(RadioButtonAndroid);\n// @component-docs ignore-next-line\nexport { RadioButtonAndroidWithTheme as RadioButtonAndroid };\n"]},"metadata":{},"sourceType":"module"}