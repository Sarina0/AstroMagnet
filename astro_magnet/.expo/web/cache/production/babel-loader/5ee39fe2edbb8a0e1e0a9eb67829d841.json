{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{Platform}from'expo-modules-core';import ExpoLocation from\"./ExpoLocation\";import{LocationAccuracy}from\"./Location.types\";import{LocationSubscriber}from\"./LocationSubscribers\";export function installWebGeolocationPolyfill(){if(Platform.OS!=='web'){if(!('window'in global)){global.window=global;}if(!('navigator'in global.window)){global.window.navigator={};}window.navigator.geolocation={getCurrentPosition:getCurrentPosition,watchPosition:watchPosition,clearWatch:clearWatch,stopObserving:function stopObserving(){}};}}function convertGeolocationOptions(options){return{accuracy:options.enableHighAccuracy?LocationAccuracy.High:LocationAccuracy.Balanced};}function getCurrentPosition(success){var error=arguments.length>1&&arguments[1]!==undefined?arguments[1]:function(){};var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};_getCurrentPositionAsyncWrapper(success,error,options);}function _getCurrentPositionAsyncWrapper(_x,_x2,_x3){return _getCurrentPositionAsyncWrapper2.apply(this,arguments);}function _getCurrentPositionAsyncWrapper2(){_getCurrentPositionAsyncWrapper2=_asyncToGenerator(function*(success,error,options){try{yield ExpoLocation.requestPermissionsAsync();var result=yield ExpoLocation.getCurrentPositionAsync(convertGeolocationOptions(options));success(result);}catch(e){error(e);}});return _getCurrentPositionAsyncWrapper2.apply(this,arguments);}function watchPosition(success,error,options){var watchId=LocationSubscriber.registerCallback(success);ExpoLocation.watchPositionImplAsync(watchId,options).catch(function(err){LocationSubscriber.unregisterCallback(watchId);error({watchId:watchId,message:err.message,code:err.code});});return watchId;}function clearWatch(watchId){LocationSubscriber.unregisterCallback(watchId);}","map":{"version":3,"sources":["../src/GeolocationPolyfill.ts"],"names":[],"mappings":"uEAAA,OAAS,QAAQ,KAAQ,mBAAmB,CAE5C,MAAO,aAAY,sBACnB,OAAyB,gBAAgB,wBACzC,OAAS,kBAAkB,6BAe3B,MAAM,SAAU,8BAA6B,EAAA,CAC3C,GAAI,QAAQ,CAAC,EAAE,GAAK,KAAK,CAAE,CAEzB,GAAI,EAAE,QAAQ,EAAI,OAAM,CAAC,CAAE,CACzB,MAAM,CAAC,MAAM,CAAG,MAAM,CACvB,CACD,GAAI,EAAE,WAAW,EAAI,OAAM,CAAC,MAAM,CAAC,CAAE,CACnC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAG,CAAA,CAAE,CAC7B,CAGD,MAAM,CAAC,SAAS,CAAC,WAAW,CAAG,CAC7B,kBAAkB,CAAlB,kBAAkB,CAClB,aAAa,CAAb,aAAa,CACb,UAAU,CAAV,UAAU,CAIV,aAAa,CAAE,wBAAK,CAAE,C,CACvB,CACF,CACH,CAEA,QAAS,0BAAyB,CAAC,OAA2B,CAAA,CAC5D,MAAO,CACL,QAAQ,CAAE,OAAO,CAAC,kBAAkB,CAAG,gBAAgB,CAAC,IAAI,CAAG,gBAAgB,CAAC,Q,CACjF,CACH,CAEA,QAAS,mBAAkB,CACzB,OAAmC,CAEH,IADhC,MAAA,2DAAkC,UAAK,CAAE,CAAC,IAC1C,QAAA,2DAA8B,CAAA,CAAE,CAEhC,+BAA+B,CAAC,OAAO,CAAE,KAAK,CAAE,OAAO,CAAC,CAC1D,CAAC,QAIc,gCAA+B,2KAA9C,UACE,OAAmC,CACnC,KAA+B,CAC/B,OAA2B,CAAA,CAE3B,GAAI,CACF,KAAM,aAAY,CAAC,uBAAuB,EAAE,CAC5C,GAAM,OAAM,MAAS,aAAY,CAAC,uBAAuB,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC,CAC7F,OAAO,CAAC,MAAM,CAAC,CAChB,CAAC,MAAO,CAAC,CAAE,CACV,KAAK,CAAC,CAAC,CAAC,CACT,CACH,CAAC,iEAGD,QAAS,cAAa,CACpB,OAAmC,CACnC,KAA+B,CAC/B,OAA2B,CAAA,CAE3B,GAAM,QAAO,CAAG,kBAAkB,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAE5D,YAAY,CAAC,sBAAsB,CAAC,OAAO,CAAE,OAAO,CAAC,CAAC,KAAK,CAAC,SAAC,GAAG,CAAI,CAClE,kBAAkB,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAC9C,KAAK,CAAC,CAAE,OAAO,CAAP,OAAO,CAAE,OAAO,CAAE,GAAG,CAAC,OAAO,CAAE,IAAI,CAAE,GAAG,CAAC,IAAI,CAAE,CAAC,CAC1D,CAAC,CAAC,CAEF,MAAO,QAAO,CAChB,CAGA,QAAS,WAAU,CAAC,OAAe,CAAA,CACjC,kBAAkB,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAChD","sourcesContent":["import { Platform } from 'expo-modules-core';\n\nimport ExpoLocation from './ExpoLocation';\nimport { LocationObject, LocationAccuracy, LocationOptions } from './Location.types';\nimport { LocationSubscriber } from './LocationSubscribers';\n\ntype GeolocationSuccessCallback = (data: LocationObject) => void;\ntype GeolocationErrorCallback = (error: any) => void;\n\ntype GeolocationOptions = {\n  enableHighAccuracy?: boolean;\n};\n\ndeclare const global: any;\n\n// @needsAudit\n/**\n * Polyfills `navigator.geolocation` for interop with the core React Native and Web API approach to geolocation.\n */\nexport function installWebGeolocationPolyfill(): void {\n  if (Platform.OS !== 'web') {\n    // Make sure `window.navigator` is defined in the global scope.\n    if (!('window' in global)) {\n      global.window = global;\n    }\n    if (!('navigator' in global.window)) {\n      global.window.navigator = {};\n    }\n\n    // @ts-ignore\n    window.navigator.geolocation = {\n      getCurrentPosition,\n      watchPosition,\n      clearWatch,\n\n      // We don't polyfill stopObserving, this is an internal method that probably should not even exist\n      // in react-native docs\n      stopObserving: () => {},\n    };\n  }\n}\n\nfunction convertGeolocationOptions(options: GeolocationOptions): LocationOptions {\n  return {\n    accuracy: options.enableHighAccuracy ? LocationAccuracy.High : LocationAccuracy.Balanced,\n  };\n}\n\nfunction getCurrentPosition(\n  success: GeolocationSuccessCallback,\n  error: GeolocationErrorCallback = () => {},\n  options: GeolocationOptions = {}\n): void {\n  _getCurrentPositionAsyncWrapper(success, error, options);\n}\n\n// This function exists to let us continue to return undefined from getCurrentPosition, while still\n// using async/await for the internal implementation of it\nasync function _getCurrentPositionAsyncWrapper(\n  success: GeolocationSuccessCallback,\n  error: GeolocationErrorCallback,\n  options: GeolocationOptions\n): Promise<any> {\n  try {\n    await ExpoLocation.requestPermissionsAsync();\n    const result = await ExpoLocation.getCurrentPositionAsync(convertGeolocationOptions(options));\n    success(result);\n  } catch (e) {\n    error(e);\n  }\n}\n\n// Polyfill: navigator.geolocation.watchPosition\nfunction watchPosition(\n  success: GeolocationSuccessCallback,\n  error: GeolocationErrorCallback,\n  options: GeolocationOptions\n) {\n  const watchId = LocationSubscriber.registerCallback(success);\n\n  ExpoLocation.watchPositionImplAsync(watchId, options).catch((err) => {\n    LocationSubscriber.unregisterCallback(watchId);\n    error({ watchId, message: err.message, code: err.code });\n  });\n\n  return watchId;\n}\n\n// Polyfill: navigator.geolocation.clearWatch\nfunction clearWatch(watchId: number) {\n  LocationSubscriber.unregisterCallback(watchId);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}