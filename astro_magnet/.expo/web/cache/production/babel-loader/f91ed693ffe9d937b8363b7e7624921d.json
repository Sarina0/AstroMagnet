{"ast":null,"code":"var PUSH_CHARS='-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';var AUTO_ID_CHARS='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';var lastPushTime=0;var lastRandChars=[];export function generateDatabaseId(){var serverTimeOffset=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var timeStampChars=new Array(8);var now=new Date().getTime()+serverTimeOffset;var duplicateTime=now===lastPushTime;lastPushTime=now;for(var i=7;i>=0;i-=1){timeStampChars[i]=PUSH_CHARS.charAt(now%64);now=Math.floor(now/64);}if(now!==0){throw new Error('We should have converted the entire timestamp.');}var id=timeStampChars.join('');if(!duplicateTime){for(var _i=0;_i<12;_i+=1){lastRandChars[_i]=Math.floor(Math.random()*64);}}else{var _i2;for(_i2=11;_i2>=0&&lastRandChars[_i2]===63;_i2-=1){lastRandChars[_i2]=0;}lastRandChars[_i2]+=1;}for(var _i3=0;_i3<12;_i3++){id+=PUSH_CHARS.charAt(lastRandChars[_i3]);}if(id.length!==20){throw new Error('Length should be 20.');}return id;}export function generateFirestoreId(){var autoId='';for(var i=0;i<20;i++){autoId+=AUTO_ID_CHARS.charAt(Math.floor(Math.random()*AUTO_ID_CHARS.length));}return autoId;}","map":{"version":3,"names":["PUSH_CHARS","AUTO_ID_CHARS","lastPushTime","lastRandChars","generateDatabaseId","serverTimeOffset","timeStampChars","Array","now","Date","getTime","duplicateTime","i","charAt","Math","floor","Error","id","join","random","length","generateFirestoreId","autoId"],"sources":["/Users/sonminhnguyen/Documents/programming/react-native/school/astro_magnet_initial/astro_magnet/node_modules/@react-native-firebase/app/lib/common/id.js"],"sourcesContent":["const PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst AUTO_ID_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n// timestamp of last push, used to prevent local collisions if you push twice in one ms.\nlet lastPushTime = 0;\n\n// we generate 72-bits of randomness which get turned into 12 characters and appended to the\n// timestamp to prevent collisions with other clients.  We store the last characters we\n// generated because in the event of a collision, we'll use those same characters except\n// \"incremented\" by one.\nconst lastRandChars = [];\n\n/**\n * Generate a firebase id - for use with ref().push(val, cb) - e.g. -KXMr7k2tXUFQqiaZRY4'\n * @param serverTimeOffset - pass in server time offset from native side\n * @returns {string}\n */\nexport function generateDatabaseId(serverTimeOffset = 0) {\n  const timeStampChars = new Array(8);\n  let now = new Date().getTime() + serverTimeOffset;\n  const duplicateTime = now === lastPushTime;\n\n  lastPushTime = now;\n\n  for (let i = 7; i >= 0; i -= 1) {\n    timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n    now = Math.floor(now / 64);\n  }\n\n  if (now !== 0) {\n    throw new Error('We should have converted the entire timestamp.');\n  }\n\n  let id = timeStampChars.join('');\n\n  if (!duplicateTime) {\n    for (let i = 0; i < 12; i += 1) {\n      lastRandChars[i] = Math.floor(Math.random() * 64);\n    }\n  } else {\n    // if the timestamp hasn't changed since last push,\n    // use the same random number, but increment it by 1.\n    let i;\n    for (i = 11; i >= 0 && lastRandChars[i] === 63; i -= 1) {\n      lastRandChars[i] = 0;\n    }\n\n    lastRandChars[i] += 1;\n  }\n\n  for (let i = 0; i < 12; i++) {\n    id += PUSH_CHARS.charAt(lastRandChars[i]);\n  }\n\n  if (id.length !== 20) {\n    throw new Error('Length should be 20.');\n  }\n\n  return id;\n}\n\n/**\n * Generate a firestore auto id for use with collection/document .add()\n * @return {string}\n */\nexport function generateFirestoreId() {\n  let autoId = '';\n\n  for (let i = 0; i < 20; i++) {\n    autoId += AUTO_ID_CHARS.charAt(Math.floor(Math.random() * AUTO_ID_CHARS.length));\n  }\n  return autoId;\n}\n"],"mappings":"AAAA,GAAMA,WAAU,CAAG,kEAAkE,CAErF,GAAMC,cAAa,CAAG,gEAAgE,CAGtF,GAAIC,aAAY,CAAG,CAAC,CAMpB,GAAMC,cAAa,CAAG,EAAE,CAOxB,MAAO,SAASC,mBAAkB,EAAuB,IAAtBC,iBAAgB,2DAAG,CAAC,CACrD,GAAMC,eAAc,CAAG,GAAIC,MAAK,CAAC,CAAC,CAAC,CACnC,GAAIC,IAAG,CAAG,GAAIC,KAAI,EAAE,CAACC,OAAO,EAAE,CAAGL,gBAAgB,CACjD,GAAMM,cAAa,CAAGH,GAAG,GAAKN,YAAY,CAE1CA,YAAY,CAAGM,GAAG,CAElB,IAAK,GAAII,EAAC,CAAG,CAAC,CAAEA,CAAC,EAAI,CAAC,CAAEA,CAAC,EAAI,CAAC,CAAE,CAC9BN,cAAc,CAACM,CAAC,CAAC,CAAGZ,UAAU,CAACa,MAAM,CAACL,GAAG,CAAG,EAAE,CAAC,CAC/CA,GAAG,CAAGM,IAAI,CAACC,KAAK,CAACP,GAAG,CAAG,EAAE,CAAC,CAC5B,CAEA,GAAIA,GAAG,GAAK,CAAC,CAAE,CACb,KAAM,IAAIQ,MAAK,CAAC,gDAAgD,CAAC,CACnE,CAEA,GAAIC,GAAE,CAAGX,cAAc,CAACY,IAAI,CAAC,EAAE,CAAC,CAEhC,GAAI,CAACP,aAAa,CAAE,CAClB,IAAK,GAAIC,GAAC,CAAG,CAAC,CAAEA,EAAC,CAAG,EAAE,CAAEA,EAAC,EAAI,CAAC,CAAE,CAC9BT,aAAa,CAACS,EAAC,CAAC,CAAGE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACK,MAAM,EAAE,CAAG,EAAE,CAAC,CACnD,CACF,CAAC,IAAM,CAGL,GAAIP,IAAC,CACL,IAAKA,GAAC,CAAG,EAAE,CAAEA,GAAC,EAAI,CAAC,EAAIT,aAAa,CAACS,GAAC,CAAC,GAAK,EAAE,CAAEA,GAAC,EAAI,CAAC,CAAE,CACtDT,aAAa,CAACS,GAAC,CAAC,CAAG,CAAC,CACtB,CAEAT,aAAa,CAACS,GAAC,CAAC,EAAI,CAAC,CACvB,CAEA,IAAK,GAAIA,IAAC,CAAG,CAAC,CAAEA,GAAC,CAAG,EAAE,CAAEA,GAAC,EAAE,CAAE,CAC3BK,EAAE,EAAIjB,UAAU,CAACa,MAAM,CAACV,aAAa,CAACS,GAAC,CAAC,CAAC,CAC3C,CAEA,GAAIK,EAAE,CAACG,MAAM,GAAK,EAAE,CAAE,CACpB,KAAM,IAAIJ,MAAK,CAAC,sBAAsB,CAAC,CACzC,CAEA,MAAOC,GAAE,CACX,CAMA,MAAO,SAASI,oBAAmB,EAAG,CACpC,GAAIC,OAAM,CAAG,EAAE,CAEf,IAAK,GAAIV,EAAC,CAAG,CAAC,CAAEA,CAAC,CAAG,EAAE,CAAEA,CAAC,EAAE,CAAE,CAC3BU,MAAM,EAAIrB,aAAa,CAACY,MAAM,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACK,MAAM,EAAE,CAAGlB,aAAa,CAACmB,MAAM,CAAC,CAAC,CAClF,CACA,MAAOE,OAAM,CACf"},"metadata":{},"sourceType":"module"}