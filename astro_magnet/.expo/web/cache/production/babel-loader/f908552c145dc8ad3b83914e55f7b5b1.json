{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import NativeModules from\"react-native-web/dist/exports/NativeModules\";import Platform from\"react-native-web/dist/exports/Platform\";var RNGoogleSignin=NativeModules.RNGoogleSignin;var IS_IOS=Platform.OS==='ios';var GoogleSignin=function(){function GoogleSignin(){_classCallCheck(this,GoogleSignin);_defineProperty(this,\"configPromise\",void 0);if(__DEV__&&!RNGoogleSignin){console.error(\"RN GoogleSignin native module is not correctly linked. Please read the readme, setup and troubleshooting instructions carefully or try manual linking.\");}}_createClass(GoogleSignin,[{key:\"signIn\",value:function(){var _signIn=_asyncToGenerator(function*(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};yield this.configPromise;return yield RNGoogleSignin.signIn(options);});function signIn(){return _signIn.apply(this,arguments);}return signIn;}()},{key:\"hasPlayServices\",value:function(){var _hasPlayServices=_asyncToGenerator(function*(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{showPlayServicesUpdateDialog:true};if(IS_IOS){return true;}else{if(options&&options.showPlayServicesUpdateDialog===undefined){throw new Error('RNGoogleSignin: Missing property `showPlayServicesUpdateDialog` in options object for `hasPlayServices`');}return RNGoogleSignin.playServicesAvailable(options.showPlayServicesUpdateDialog);}});function hasPlayServices(){return _hasPlayServices.apply(this,arguments);}return hasPlayServices;}()},{key:\"configure\",value:function configure(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};if(options.offlineAccess&&!options.webClientId){throw new Error('RNGoogleSignin: offline use requires server web ClientID');}this.configPromise=RNGoogleSignin.configure(options);}},{key:\"addScopes\",value:function(){var _addScopes=_asyncToGenerator(function*(options){var isSignedIn=yield this.isSignedIn();if(!isSignedIn){return null;}return IS_IOS?RNGoogleSignin.addScopes(options):RNGoogleSignin.getCurrentUser();});function addScopes(_x){return _addScopes.apply(this,arguments);}return addScopes;}()},{key:\"signInSilently\",value:function(){var _signInSilently=_asyncToGenerator(function*(){yield this.configPromise;return RNGoogleSignin.signInSilently();});function signInSilently(){return _signInSilently.apply(this,arguments);}return signInSilently;}()},{key:\"signOut\",value:function(){var _signOut=_asyncToGenerator(function*(){return RNGoogleSignin.signOut();});function signOut(){return _signOut.apply(this,arguments);}return signOut;}()},{key:\"revokeAccess\",value:function(){var _revokeAccess=_asyncToGenerator(function*(){return RNGoogleSignin.revokeAccess();});function revokeAccess(){return _revokeAccess.apply(this,arguments);}return revokeAccess;}()},{key:\"isSignedIn\",value:function(){var _isSignedIn=_asyncToGenerator(function*(){return RNGoogleSignin.isSignedIn();});function isSignedIn(){return _isSignedIn.apply(this,arguments);}return isSignedIn;}()},{key:\"getCurrentUser\",value:function(){var _getCurrentUser=_asyncToGenerator(function*(){return RNGoogleSignin.getCurrentUser();});function getCurrentUser(){return _getCurrentUser.apply(this,arguments);}return getCurrentUser;}()},{key:\"clearCachedAccessToken\",value:function(){var _clearCachedAccessToken=_asyncToGenerator(function*(tokenString){if(!tokenString||typeof tokenString!=='string'){return Promise.reject('GoogleSignIn: clearCachedAccessToken() expects a string token.');}return IS_IOS?null:yield RNGoogleSignin.clearCachedAccessToken(tokenString);});function clearCachedAccessToken(_x2){return _clearCachedAccessToken.apply(this,arguments);}return clearCachedAccessToken;}()},{key:\"getTokens\",value:function(){var _getTokens=_asyncToGenerator(function*(){if(IS_IOS){var tokens=yield RNGoogleSignin.getTokens();return tokens;}else{var userObject=yield RNGoogleSignin.getTokens();return{idToken:userObject.idToken,accessToken:userObject.accessToken};}});function getTokens(){return _getTokens.apply(this,arguments);}return getTokens;}()}]);return GoogleSignin;}();export var GoogleSigninSingleton=new GoogleSignin();export var statusCodes={SIGN_IN_CANCELLED:RNGoogleSignin.SIGN_IN_CANCELLED,IN_PROGRESS:RNGoogleSignin.IN_PROGRESS,PLAY_SERVICES_NOT_AVAILABLE:RNGoogleSignin.PLAY_SERVICES_NOT_AVAILABLE,SIGN_IN_REQUIRED:RNGoogleSignin.SIGN_IN_REQUIRED};","map":{"version":3,"sources":["GoogleSignin.ts"],"names":["RNGoogleSignin","NativeModules","IS_IOS","Platform","OS","GoogleSignin","constructor","__DEV__","console","error","signIn","options","configPromise","hasPlayServices","showPlayServicesUpdateDialog","undefined","Error","playServicesAvailable","configure","offlineAccess","webClientId","addScopes","isSignedIn","getCurrentUser","signInSilently","signOut","revokeAccess","clearCachedAccessToken","tokenString","Promise","reject","getTokens","tokens","userObject","idToken","accessToken","GoogleSigninSingleton","statusCodes","SIGN_IN_CANCELLED","IN_PROGRESS","PLAY_SERVICES_NOT_AVAILABLE","SIGN_IN_REQUIRED"],"mappings":"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","sourcesContent":["import { NativeModules, Platform } from 'react-native';\nimport type {\n  AddScopesParams,\n  SignInParams,\n  ConfigureParams,\n  HasPlayServicesParams,\n  User,\n} from './types';\n\nconst { RNGoogleSignin } = NativeModules;\n\nconst IS_IOS = Platform.OS === 'ios';\n\nclass GoogleSignin {\n  configPromise?: Promise<void>;\n\n  constructor() {\n    if (__DEV__ && !RNGoogleSignin) {\n      console.error(\n        `RN GoogleSignin native module is not correctly linked. Please read the readme, setup and troubleshooting instructions carefully or try manual linking.`,\n      );\n    }\n  }\n\n  async signIn(options: SignInParams = {}): Promise<User> {\n    await this.configPromise;\n    return await RNGoogleSignin.signIn(options);\n  }\n\n  async hasPlayServices(\n    options: HasPlayServicesParams = { showPlayServicesUpdateDialog: true },\n  ): Promise<boolean> {\n    if (IS_IOS) {\n      return true;\n    } else {\n      if (options && options.showPlayServicesUpdateDialog === undefined) {\n        throw new Error(\n          'RNGoogleSignin: Missing property `showPlayServicesUpdateDialog` in options object for `hasPlayServices`',\n        );\n      }\n      return RNGoogleSignin.playServicesAvailable(options.showPlayServicesUpdateDialog);\n    }\n  }\n\n  configure(options: ConfigureParams = {}): void {\n    if (options.offlineAccess && !options.webClientId) {\n      throw new Error('RNGoogleSignin: offline use requires server web ClientID');\n    }\n\n    this.configPromise = RNGoogleSignin.configure(options);\n  }\n\n  async addScopes(options: AddScopesParams): Promise<User | null> {\n    const isSignedIn = await this.isSignedIn();\n    if (!isSignedIn) {\n      return null;\n    }\n    return IS_IOS ? RNGoogleSignin.addScopes(options) : RNGoogleSignin.getCurrentUser();\n  }\n\n  async signInSilently(): Promise<User> {\n    await this.configPromise;\n    return RNGoogleSignin.signInSilently();\n  }\n\n  async signOut(): Promise<null> {\n    return RNGoogleSignin.signOut();\n  }\n\n  async revokeAccess(): Promise<null> {\n    return RNGoogleSignin.revokeAccess();\n  }\n\n  async isSignedIn(): Promise<boolean> {\n    return RNGoogleSignin.isSignedIn();\n  }\n\n  async getCurrentUser(): Promise<User | null> {\n    return RNGoogleSignin.getCurrentUser();\n  }\n\n  async clearCachedAccessToken(tokenString: string): Promise<null> {\n    if (!tokenString || typeof tokenString !== 'string') {\n      return Promise.reject('GoogleSignIn: clearCachedAccessToken() expects a string token.');\n    }\n    return IS_IOS ? null : await RNGoogleSignin.clearCachedAccessToken(tokenString);\n  }\n\n  async getTokens(): Promise<{ idToken: string; accessToken: string }> {\n    if (IS_IOS) {\n      const tokens = await RNGoogleSignin.getTokens();\n      return tokens;\n    } else {\n      const userObject = await RNGoogleSignin.getTokens();\n      return {\n        idToken: userObject.idToken,\n        accessToken: userObject.accessToken,\n      };\n    }\n  }\n}\n\nexport const GoogleSigninSingleton = new GoogleSignin();\n\nexport const statusCodes = {\n  SIGN_IN_CANCELLED: RNGoogleSignin.SIGN_IN_CANCELLED as string,\n  IN_PROGRESS: RNGoogleSignin.IN_PROGRESS as string,\n  PLAY_SERVICES_NOT_AVAILABLE: RNGoogleSignin.PLAY_SERVICES_NOT_AVAILABLE as string,\n  SIGN_IN_REQUIRED: RNGoogleSignin.SIGN_IN_REQUIRED as string,\n} as const;\n"]},"metadata":{},"sourceType":"module"}