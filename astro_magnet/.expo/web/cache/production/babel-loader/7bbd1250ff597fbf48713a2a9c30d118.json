{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"style\",\"status\",\"label\",\"onPress\",\"labelStyle\",\"theme\",\"testID\",\"mode\",\"position\",\"disabled\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import Checkbox from\"./Checkbox\";import CheckboxAndroid from\"./CheckboxAndroid\";import CheckboxIOS from\"./CheckboxIOS\";import Text from\"../Typography/Text\";import TouchableRipple from\"../TouchableRipple/TouchableRipple\";import{withTheme}from\"../../core/theming\";var CheckboxItem=function CheckboxItem(_ref){var style=_ref.style,status=_ref.status,label=_ref.label,onPress=_ref.onPress,labelStyle=_ref.labelStyle,theme=_ref.theme,testID=_ref.testID,mode=_ref.mode,_ref$position=_ref.position,position=_ref$position===void 0?'trailing':_ref$position,disabled=_ref.disabled,props=_objectWithoutProperties(_ref,_excluded);var checkboxProps=_objectSpread(_objectSpread({},props),{},{status:status,theme:theme,disabled:disabled});var isLeading=position==='leading';var checkbox;if(mode==='android'){checkbox=React.createElement(CheckboxAndroid,checkboxProps);}else if(mode==='ios'){checkbox=React.createElement(CheckboxIOS,checkboxProps);}else{checkbox=React.createElement(Checkbox,checkboxProps);}return React.createElement(TouchableRipple,{accessibilityLabel:label,accessibilityRole:\"checkbox\",accessibilityState:{checked:status==='checked',disabled:disabled},onPress:onPress,testID:testID,disabled:disabled},React.createElement(View,{style:[styles.container,style],pointerEvents:\"none\",importantForAccessibility:\"no-hide-descendants\"},isLeading&&checkbox,React.createElement(Text,{style:[styles.label,{color:disabled?theme.colors.disabled:theme.colors.text,textAlign:isLeading?'right':'left'},labelStyle]},label),!isLeading&&checkbox));};CheckboxItem.displayName='Checkbox.Item';export default withTheme(CheckboxItem);var CheckboxItemWithTheme=withTheme(CheckboxItem);export{CheckboxItemWithTheme as CheckboxItem};var styles=StyleSheet.create({container:{flexDirection:'row',alignItems:'center',justifyContent:'space-between',paddingVertical:8,paddingHorizontal:16},label:{fontSize:16,flexShrink:1,flexGrow:1}});","map":{"version":3,"sources":["CheckboxItem.tsx"],"names":["React","Checkbox","CheckboxAndroid","CheckboxIOS","Text","TouchableRipple","withTheme","CheckboxItem","style","status","label","onPress","labelStyle","theme","testID","mode","position","disabled","props","checkboxProps","isLeading","checkbox","checked","styles","container","color","colors","text","textAlign","displayName","CheckboxItemWithTheme","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize","flexShrink","flexGrow"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\nexport type Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Checkbox control position.\n   */\n  position?: 'leading' | 'trailing';\n  /**\n   * Whether `<Checkbox.Android />` or `<Checkbox.IOS />` should be used.\n   * Left undefined `<Checkbox />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme,\n  testID,\n  mode,\n  position = 'trailing',\n  disabled,\n  ...props\n}: Props) => {\n  const checkboxProps = { ...props, status, theme, disabled };\n  const isLeading = position === 'leading';\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = <CheckboxAndroid {...checkboxProps} />;\n  } else if (mode === 'ios') {\n    checkbox = <CheckboxIOS {...checkboxProps} />;\n  } else {\n    checkbox = <Checkbox {...checkboxProps} />;\n  }\n\n  return (\n    <TouchableRipple\n      accessibilityLabel={label}\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{\n        checked: status === 'checked',\n        disabled,\n      }}\n      onPress={onPress}\n      testID={testID}\n      disabled={disabled}\n    >\n      <View\n        style={[styles.container, style]}\n        pointerEvents=\"none\"\n        importantForAccessibility=\"no-hide-descendants\"\n      >\n        {isLeading && checkbox}\n        <Text\n          style={[\n            styles.label,\n            {\n              color: disabled ? theme.colors.disabled : theme.colors.text,\n              textAlign: isLeading ? 'right' : 'left',\n            },\n            labelStyle,\n          ]}\n        >\n          {label}\n        </Text>\n        {!isLeading && checkbox}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nconst CheckboxItemWithTheme = withTheme(CheckboxItem);\n// @component-docs ignore-next-line\nexport { CheckboxItemWithTheme as CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}