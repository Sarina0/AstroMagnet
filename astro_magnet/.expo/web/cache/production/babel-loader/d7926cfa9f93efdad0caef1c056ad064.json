{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import*as React from'react';export var ListAccordionGroupContext=React.createContext(null);var ListAccordionGroup=function ListAccordionGroup(_ref){var expandedIdProp=_ref.expandedId,onAccordionPress=_ref.onAccordionPress,children=_ref.children;var _React$useState=React.useState(undefined),_React$useState2=_slicedToArray(_React$useState,2),expandedId=_React$useState2[0],setExpandedId=_React$useState2[1];var onAccordionPressDefault=function onAccordionPressDefault(newExpandedId){setExpandedId(function(currentExpandedId){return currentExpandedId===newExpandedId?undefined:newExpandedId;});};return React.createElement(ListAccordionGroupContext.Provider,{value:{expandedId:expandedIdProp||expandedId,onAccordionPress:onAccordionPress||onAccordionPressDefault}},children);};ListAccordionGroup.displayName='List.AccordionGroup';export default ListAccordionGroup;","map":{"version":3,"sources":["ListAccordionGroup.tsx"],"names":["React","ListAccordionGroupContext","createContext","ListAccordionGroup","expandedId","expandedIdProp","onAccordionPress","children","setExpandedId","useState","undefined","onAccordionPressDefault","newExpandedId","currentExpandedId","displayName"],"mappings":"iEAAA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CAsBA,MAAO,IAAMC,0BAAyB,CACpCD,KAAK,CAACE,aAANF,CAAmD,IAAnDA,CADK,CAwCP,GAAMG,mBAAkB,CAAG,QAArBA,mBAAkB,CAAG,IAAA,CAId,CAJe,GACdE,eADc,CAIf,IAAA,CAHXD,UAAU,CACVE,gBAF0B,CAIf,IAAA,CAFXA,gBAF0B,CAG1BC,QAAAA,CACW,IAAA,CADXA,QAAAA,CAEA,oBAAoCP,KAAK,CAACS,QAANT,CAElCU,SAFkCV,CAApC,oDAAOI,UAAD,qBAAaI,aAAb,qBAIN,GAAMG,wBAAuB,CAAIC,QAA3BD,wBAAuB,CAAIC,aAAD,CAAoC,CAClEJ,aAAa,CAAEK,SAAAA,iBAAD,QACZA,kBAAiB,GAAKD,aAAtBC,CAAsCH,SAAtCG,CAAkDD,aADvC,GAAbJ,CAGD,CAJD,CAMA,MACE,MAAA,CAAA,aAAA,CAAC,yBAAD,CAA2B,QAA3B,CAAA,CACE,KAAK,CAAE,CACLJ,UAAU,CAAEC,cAAc,EAAID,UADzB,CAELE,gBAAgB,CAAEA,gBAAgB,EAAIK,uBAFjC,CADT,CAAA,CAMGJ,QANH,CADF,CAUD,CAzBD,CA2BAJ,kBAAkB,CAACW,WAAnBX,CAAiC,qBAAjCA,CAEA,cAAeA,mBAAf","sourcesContent":["import * as React from 'react';\n\nexport type Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onAccordionPress?: (expandedId: string | number) => void;\n  /**\n   * Id of the currently expanded list accordion\n   */\n  expandedId?: string | number;\n  /**\n   * React elements containing list accordions\n   */\n  children: React.ReactNode;\n};\n\nexport type ListAccordionGroupContextType = {\n  expandedId: string | number | undefined;\n  onAccordionPress: (expandedId: string | number) => void;\n} | null;\n\nexport const ListAccordionGroupContext =\n  React.createContext<ListAccordionGroupContextType>(null);\n\n/**\n * List.AccordionGroup allows to control a group of List Accordions. `id` prop for List.Accordion is required in order for group to work.\n * List.AccordionGroup can be a controlled or uncontrolled component. The example shows the uncontrolled version.\n * At most one Accordion can be expanded at a given time.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, Text } from 'react-native';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.AccordionGroup>\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\n *       <List.Item title=\"Item 1\" />\n *     </List.Accordion>\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\n *       <List.Item title=\"Item 2\" />\n *     </List.Accordion>\n *     <View>\n *       <Text>\n *         List.Accordion can be wrapped because implementation uses React.Context.\n *       </Text>\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\n *         <List.Item title=\"Item 3\" />\n *       </List.Accordion>\n *     </View>\n *   </List.AccordionGroup>\n * );\n *\n * export default MyComponent;\n *```\n */\nconst ListAccordionGroup = ({\n  expandedId: expandedIdProp,\n  onAccordionPress,\n  children,\n}: Props) => {\n  const [expandedId, setExpandedId] = React.useState<\n    string | number | undefined\n  >(undefined);\n\n  const onAccordionPressDefault = (newExpandedId: string | number) => {\n    setExpandedId((currentExpandedId) =>\n      currentExpandedId === newExpandedId ? undefined : newExpandedId\n    );\n  };\n\n  return (\n    <ListAccordionGroupContext.Provider\n      value={{\n        expandedId: expandedIdProp || expandedId, // component can be controlled or uncontrolled\n        onAccordionPress: onAccordionPress || onAccordionPressDefault,\n      }}\n    >\n      {children}\n    </ListAccordionGroupContext.Provider>\n  );\n};\n\nListAccordionGroup.displayName = 'List.AccordionGroup';\n\nexport default ListAccordionGroup;\n"]},"metadata":{},"sourceType":"module"}