{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import React from'react';import color from'color';import Text from\"react-native-web/dist/exports/Text\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Animated from\"react-native-web/dist/exports/Animated\";import{withTheme}from\"../../../core/theming\";import{AdornmentSide}from\"./enums\";var AFFIX_OFFSET=12;var AffixContext=React.createContext({textStyle:{fontFamily:'',color:''},topPosition:null,side:AdornmentSide.Left});var AffixAdornment=function AffixAdornment(_ref){var affix=_ref.affix,side=_ref.side,textStyle=_ref.textStyle,topPosition=_ref.topPosition,onLayout=_ref.onLayout,visible=_ref.visible,paddingHorizontal=_ref.paddingHorizontal,maxFontSizeMultiplier=_ref.maxFontSizeMultiplier;return React.createElement(AffixContext.Provider,{value:{side:side,textStyle:textStyle,topPosition:topPosition,onLayout:onLayout,visible:visible,paddingHorizontal:paddingHorizontal,maxFontSizeMultiplier:maxFontSizeMultiplier}},affix);};var TextInputAffix=function TextInputAffix(_ref2){var text=_ref2.text,labelStyle=_ref2.textStyle,theme=_ref2.theme;var _React$useContext=React.useContext(AffixContext),textStyle=_React$useContext.textStyle,onLayout=_React$useContext.onLayout,topPosition=_React$useContext.topPosition,side=_React$useContext.side,visible=_React$useContext.visible,paddingHorizontal=_React$useContext.paddingHorizontal,maxFontSizeMultiplier=_React$useContext.maxFontSizeMultiplier;var textColor=color(theme.colors.text).alpha(theme.dark?0.7:0.54).rgb().string();var offset=typeof paddingHorizontal==='number'?paddingHorizontal:AFFIX_OFFSET;var style=_defineProperty({top:topPosition},side,offset);return React.createElement(Animated.View,{style:[styles.container,style,{opacity:(visible===null||visible===void 0?void 0:visible.interpolate({inputRange:[0,1],outputRange:[1,0]}))||1}],onLayout:onLayout},React.createElement(Text,{maxFontSizeMultiplier:maxFontSizeMultiplier,style:[{color:textColor},textStyle,labelStyle]},text));};TextInputAffix.displayName='TextInput.Affix';var styles=StyleSheet.create({container:{position:'absolute',justifyContent:'center',alignItems:'center'}});export default withTheme(TextInputAffix);export{TextInputAffix,AffixAdornment};","map":{"version":3,"sources":["TextInputAffix.tsx"],"names":["React","color","withTheme","AdornmentSide","AFFIX_OFFSET","AffixContext","createContext","textStyle","fontFamily","topPosition","side","Left","AffixAdornment","affix","onLayout","visible","paddingHorizontal","maxFontSizeMultiplier","TextInputAffix","text","labelStyle","theme","useContext","textColor","colors","alpha","dark","rgb","string","offset","style","top","styles","container","opacity","interpolate","inputRange","outputRange","displayName","create","position","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React from 'react';\nimport color from 'color';\nimport {\n  Text,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n  Animated,\n  ViewStyle,\n} from 'react-native';\n\nimport { withTheme } from '../../../core/theming';\nimport { AdornmentSide } from './enums';\n\nconst AFFIX_OFFSET = 12;\n\nexport type Props = {\n  /**\n   * Text to show.\n   */\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  /**\n   * Style that is passed to the Text element.\n   */\n  textStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nconst AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({\n  affix,\n  side,\n  textStyle,\n  topPosition,\n  onLayout,\n  visible,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n        paddingHorizontal,\n        maxFontSizeMultiplier,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing text in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outline.affix.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       mode=\"outlined\"\n *       label=\"Outlined input\"\n *       placeholder=\"Type something\"\n *       right={<TextInput.Affix text=\"/100\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputAffix = ({ text, textStyle: labelStyle, theme }: Props) => {\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal,\n    maxFontSizeMultiplier,\n  } = React.useContext(AffixContext);\n  const textColor = color(theme.colors.text)\n    .alpha(theme.dark ? 0.7 : 0.54)\n    .rgb()\n    .string();\n\n  const offset =\n    typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  const style = {\n    top: topPosition,\n    [side]: offset,\n  } as ViewStyle;\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n    >\n      <Text\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n        style={[{ color: textColor }, textStyle, labelStyle]}\n      >\n        {text}\n      </Text>\n    </Animated.View>\n  );\n};\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(TextInputAffix);\n\n// @component-docs ignore-next-line\nexport { TextInputAffix, AffixAdornment };\n"]},"metadata":{},"sourceType":"module"}