{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";var _excluded=[\"name\",\"onPress\",\"forceTextInputFocus\",\"color\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React from'react';import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import IconButton from\"../../IconButton\";export var ICON_SIZE=24;var ICON_OFFSET=12;var StyleContext=React.createContext({style:{},isTextInputFocused:false,forceFocus:function forceFocus(){}});var IconAdornment=function IconAdornment(_ref){var icon=_ref.icon,topPosition=_ref.topPosition,side=_ref.side,isTextInputFocused=_ref.isTextInputFocused,forceFocus=_ref.forceFocus;var style=_defineProperty({top:topPosition},side,ICON_OFFSET);var contextState={style:style,isTextInputFocused:isTextInputFocused,forceFocus:forceFocus};return React.createElement(StyleContext.Provider,{value:contextState},icon);};var TextInputIcon=function TextInputIcon(_ref2){var name=_ref2.name,onPress=_ref2.onPress,forceTextInputFocus=_ref2.forceTextInputFocus,color=_ref2.color,rest=_objectWithoutProperties(_ref2,_excluded);var _React$useContext=React.useContext(StyleContext),style=_React$useContext.style,isTextInputFocused=_React$useContext.isTextInputFocused,forceFocus=_React$useContext.forceFocus;var onPressWithFocusControl=React.useCallback(function(){if(forceTextInputFocus&&!isTextInputFocused){forceFocus();}onPress===null||onPress===void 0?void 0:onPress();},[forceTextInputFocus,forceFocus,isTextInputFocused,onPress]);return React.createElement(View,{style:[styles.container,style]},React.createElement(IconButton,_extends({icon:name,style:styles.iconButton,size:ICON_SIZE,onPress:onPressWithFocusControl,color:typeof color==='function'?color(isTextInputFocused):color},rest)));};TextInputIcon.displayName='TextInput.Icon';TextInputIcon.defaultProps={forceTextInputFocus:true};var styles=StyleSheet.create({container:{position:'absolute',width:ICON_SIZE,height:ICON_SIZE,justifyContent:'center',alignItems:'center'},iconButton:{margin:0}});export default TextInputIcon;export{IconAdornment};","map":{"version":3,"sources":["TextInputIcon.tsx"],"names":["React","IconButton","ICON_SIZE","ICON_OFFSET","StyleContext","createContext","style","isTextInputFocused","forceFocus","IconAdornment","icon","topPosition","side","top","contextState","TextInputIcon","name","onPress","forceTextInputFocus","color","rest","useContext","onPressWithFocusControl","useCallback","styles","container","iconButton","displayName","defaultProps","create","position","width","height","justifyContent","alignItems","margin"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\n\nimport IconButton from '../../IconButton';\nimport type { $Omit } from '../../../../src/types';\nimport type { IconSource } from '../../Icon';\n\nexport type Props = $Omit<\n  React.ComponentProps<typeof IconButton>,\n  'icon' | 'theme' | 'color'\n> & {\n  /**\n   * Icon to show.\n   */\n  name: IconSource;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Whether the TextInput will focus after onPress.\n   */\n  forceTextInputFocus?: boolean;\n  /**\n   * Color of the icon or a function receiving a boolean indicating whether the TextInput is focused and returning the color.\n   */\n  color?: ((isTextInputFocused: boolean) => string | undefined) | string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ReactNativePaper.Theme;\n};\n\nexport const ICON_SIZE = 24;\nconst ICON_OFFSET = 12;\n\ntype StyleContextType = {\n  style: StyleProp<ViewStyle>;\n  isTextInputFocused: boolean;\n  forceFocus: () => void;\n};\n\nconst StyleContext = React.createContext<StyleContextType>({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: () => {},\n});\n\nconst IconAdornment: React.FunctionComponent<\n  {\n    testID: string;\n    icon: React.ReactNode;\n    topPosition: number;\n    side: 'left' | 'right';\n  } & Omit<StyleContextType, 'style'>\n> = ({ icon, topPosition, side, isTextInputFocused, forceFocus }) => {\n  const style = {\n    top: topPosition,\n    [side]: ICON_OFFSET,\n  };\n  const contextState = { style, isTextInputFocused, forceFocus };\n\n  return (\n    <StyleContext.Provider value={contextState}>{icon}</StyleContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing icon in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       label=\"Password\"\n *       secureTextEntry\n *       right={<TextInput.Icon name=\"eye\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputIcon = ({\n  name,\n  onPress,\n  forceTextInputFocus,\n  color,\n  ...rest\n}: Props) => {\n  const { style, isTextInputFocused, forceFocus } =\n    React.useContext(StyleContext);\n\n  const onPressWithFocusControl = React.useCallback(() => {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n    onPress?.();\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n\n  return (\n    <View style={[styles.container, style]}>\n      <IconButton\n        icon={name}\n        style={styles.iconButton}\n        size={ICON_SIZE}\n        onPress={onPressWithFocusControl}\n        color={typeof color === 'function' ? color(isTextInputFocused) : color}\n        {...rest}\n      />\n    </View>\n  );\n};\nTextInputIcon.displayName = 'TextInput.Icon';\n\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  iconButton: {\n    margin: 0,\n  },\n});\n\nexport default TextInputIcon;\n\n// @component-docs ignore-next-line\nexport { IconAdornment };\n"]},"metadata":{},"sourceType":"module"}