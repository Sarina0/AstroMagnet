{"ast":null,"code":"import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Platform from\"react-native-web/dist/exports/Platform\";import Modal from\"../Modal\";import DialogContent from\"./DialogContent\";import DialogActions from\"./DialogActions\";import DialogTitle from\"./DialogTitle\";import DialogScrollArea from\"./DialogScrollArea\";import{withTheme}from\"../../core/theming\";import overlay from\"../../styles/overlay\";var DIALOG_ELEVATION=24;var Dialog=function Dialog(_ref){var children=_ref.children,_ref$dismissable=_ref.dismissable,dismissable=_ref$dismissable===void 0?true:_ref$dismissable,onDismiss=_ref.onDismiss,_ref$visible=_ref.visible,visible=_ref$visible===void 0?false:_ref$visible,style=_ref.style,theme=_ref.theme;return React.createElement(Modal,{dismissable:dismissable,onDismiss:onDismiss,visible:visible,contentContainerStyle:[{borderRadius:theme.roundness,backgroundColor:theme.dark&&theme.mode==='adaptive'?overlay(DIALOG_ELEVATION,theme.colors.surface):theme.colors.surface},styles.container,style],theme:theme},React.Children.toArray(children).filter(function(child){return child!=null&&typeof child!=='boolean';}).map(function(child,i){if(i===0&&React.isValidElement(child)&&child.type===DialogContent){return React.cloneElement(child,{style:[{paddingTop:24},child.props.style]});}return child;}));};Dialog.Content=DialogContent;Dialog.Actions=DialogActions;Dialog.Title=DialogTitle;Dialog.ScrollArea=DialogScrollArea;var styles=StyleSheet.create({container:{marginVertical:Platform.OS==='android'?44:0,marginHorizontal:26,elevation:DIALOG_ELEVATION,justifyContent:'flex-start'}});export default withTheme(Dialog);","map":{"version":3,"sources":["Dialog.tsx"],"names":["React","Modal","DialogContent","DialogActions","DialogTitle","DialogScrollArea","withTheme","overlay","DIALOG_ELEVATION","Dialog","children","dismissable","onDismiss","visible","style","theme","borderRadius","roundness","backgroundColor","dark","mode","colors","surface","styles","container","Children","toArray","filter","child","map","i","isValidElement","type","cloneElement","paddingTop","props","Content","Actions","Title","ScrollArea","create","marginVertical","Platform","OS","marginHorizontal","elevation","justifyContent"],"mappings":"AAAA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CAAA,8HAEA,MAAOC,MAAP,gBACA,MAAOC,cAAP,uBACA,MAAOC,cAAP,uBAEA,MAAOC,YAAP,qBACA,MAAOC,iBAAP,0BACA,OAASC,SAAT,0BACA,MAAOC,QAAP,4BA0BA,GAAMC,iBAAwB,CAAG,EAAjC,CA+CA,GAAMC,OAAM,CAAG,QAATA,OAAM,CAAG,IAAA,CAAA,CAAA,GACbC,SADc,CAAD,IAAA,CACbA,QADc,kBAAD,IAAA,CAEbC,WAAW,CAAXA,WAAW,2BAAG,IAFA,kBAGdC,SAHc,CAAD,IAAA,CAGbA,SAHc,cAAD,IAAA,CAIbC,OAAO,CAAPA,OAAO,uBAAG,KAJI,cAKdC,KALc,CAAD,IAAA,CAKbA,KALc,CAMdC,KAAAA,CANa,IAAA,CAMbA,KAAAA,CANa,MAQb,MAAA,CAAA,aAAA,CAAC,KAAD,CAAA,CACE,WAAW,CAAEJ,WADf,CAEE,SAAS,CAAEC,SAFb,CAGE,OAAO,CAAEC,OAHX,CAIE,qBAAqB,CAAE,CACrB,CACEG,YAAY,CAAED,KAAK,CAACE,SADtB,CAEEC,eAAe,CACbH,KAAK,CAACI,IAANJ,EAAcA,KAAK,CAACK,IAANL,GAAe,UAA7BA,CACIR,OAAO,CAACC,gBAAD,CAAmBO,KAAK,CAACM,MAANN,CAAaO,OAAhC,CADXP,CAEIA,KAAK,CAACM,MAANN,CAAaO,OALrB,CADqB,CAQrBC,MAAM,CAACC,SARc,CASrBV,KATqB,CAJzB,CAeE,KAAK,CAAEC,KAfT,CAAA,CAiBG,KAAK,CAACU,QAAN,CAAeC,OAAf,CAAuBhB,QAAvB,CAAA,CACEiB,MADF,CACUC,SAAAA,KAAD,QAAWA,MAAK,EAAI,IAATA,EAAiB,MAAOA,MAAP,GAAiB,SADtD,GAAA,CAEEC,GAFF,CAEM,SAACD,KAAD,CAAQE,CAAR,CAAc,CACjB,GACEA,CAAC,GAAK,CAANA,EACA9B,KAAK,CAAC+B,cAAN/B,CAAqB4B,KAArB5B,CADA8B,EAEAF,KAAK,CAACI,IAANJ,GAAe1B,aAHjB,CAIE,CAEA,MAAO,MAAK,CAAC+B,YAAN,CAAmBL,KAAnB,CAA0B,CAC/Bd,KAAK,CAAE,CAAC,CAAEoB,UAAU,CAAE,EAAd,CAAD,CAAqBN,KAAK,CAACO,KAANP,CAAYd,KAAjC,CADwB,CAA1B,CAAP,CAGD,CAED,MAAOc,MAAP,CACD,CAfF,CAjBH,CARa,CAAA,CAAf,CA6CAnB,MAAM,CAAC2B,OAAP3B,CAAiBP,aAAjBO,CAEAA,MAAM,CAAC4B,OAAP5B,CAAiBN,aAAjBM,CAEAA,MAAM,CAAC6B,KAAP7B,CAAeL,WAAfK,CAEAA,MAAM,CAAC8B,UAAP9B,CAAoBJ,gBAApBI,CAEA,GAAMc,OAAM,CAAG,UAAU,CAACiB,MAAX,CAAkB,CAC/BhB,SAAS,CAAE,CAQTiB,cAAc,CAAEC,QAAQ,CAACC,EAATD,GAAgB,SAAhBA,CAA4B,EAA5BA,CAAiC,CARxC,CASTE,gBAAgB,CAAE,EATT,CAUTC,SAAS,CAAErC,gBAVF,CAWTsC,cAAc,CAAE,YAXP,CADoB,CAAlB,CAAf,CAgBA,cAAexC,UAAS,CAACG,MAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Platform, StyleProp, ViewStyle } from 'react-native';\nimport Modal from '../Modal';\nimport DialogContent from './DialogContent';\nimport DialogActions from './DialogActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport DialogTitle, { DialogTitle as _DialogTitle } from './DialogTitle';\nimport DialogScrollArea from './DialogScrollArea';\nimport { withTheme } from '../../core/theming';\nimport overlay from '../../styles/overlay';\n\nexport type Props = {\n  /**\n   * Determines whether clicking outside the dialog dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the dialog.\n   */\n  onDismiss?: () => void;\n  /**\n   * Determines Whether the dialog is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Dialog`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst DIALOG_ELEVATION: number = 24;\n\n/**\n * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/dialog-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/dialog-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Paragraph, Dialog, Portal, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showDialog = () => setVisible(true);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <Provider>\n *       <View>\n *         <Button onPress={showDialog}>Show Dialog</Button>\n *         <Portal>\n *           <Dialog visible={visible} onDismiss={hideDialog}>\n *             <Dialog.Title>Alert</Dialog.Title>\n *             <Dialog.Content>\n *               <Paragraph>This is simple dialog</Paragraph>\n *             </Dialog.Content>\n *             <Dialog.Actions>\n *               <Button onPress={hideDialog}>Done</Button>\n *             </Dialog.Actions>\n *           </Dialog>\n *         </Portal>\n *       </View>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Dialog = ({\n  children,\n  dismissable = true,\n  onDismiss,\n  visible = false,\n  style,\n  theme,\n}: Props) => (\n  <Modal\n    dismissable={dismissable}\n    onDismiss={onDismiss}\n    visible={visible}\n    contentContainerStyle={[\n      {\n        borderRadius: theme.roundness,\n        backgroundColor:\n          theme.dark && theme.mode === 'adaptive'\n            ? overlay(DIALOG_ELEVATION, theme.colors.surface)\n            : theme.colors.surface,\n      },\n      styles.container,\n      style,\n    ]}\n    theme={theme}\n  >\n    {React.Children.toArray(children)\n      .filter((child) => child != null && typeof child !== 'boolean')\n      .map((child, i) => {\n        if (\n          i === 0 &&\n          React.isValidElement(child) &&\n          child.type === DialogContent\n        ) {\n          // Dialog content is the first item, so we add a top padding\n          return React.cloneElement(child, {\n            style: [{ paddingTop: 24 }, child.props.style],\n          });\n        }\n\n        return child;\n      })}\n  </Modal>\n);\n\n// @component ./DialogContent.tsx\nDialog.Content = DialogContent;\n// @component ./DialogActions.tsx\nDialog.Actions = DialogActions;\n// @component ./DialogTitle.tsx\nDialog.Title = DialogTitle;\n// @component ./DialogScrollArea.tsx\nDialog.ScrollArea = DialogScrollArea;\n\nconst styles = StyleSheet.create({\n  container: {\n    /**\n     * This prevents the shadow from being clipped on Android since Android\n     * doesn't support `overflow: visible`.\n     * One downside for this fix is that it will disable clicks on the area\n     * of the shadow around the dialog, consequently, if you click around the\n     * dialog (44 pixel from the top and bottom) it won't be dismissed.\n     */\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: DIALOG_ELEVATION,\n    justifyContent: 'flex-start',\n  },\n});\n\nexport default withTheme(Dialog);\n"]},"metadata":{},"sourceType":"module"}