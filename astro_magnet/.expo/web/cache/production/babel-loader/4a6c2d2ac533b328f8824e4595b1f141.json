{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"status\",\"disabled\",\"onPress\",\"theme\",\"testID\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import color from'color';import MaterialCommunityIcon from\"../MaterialCommunityIcon\";import TouchableRipple from\"../TouchableRipple/TouchableRipple\";import{withTheme}from\"../../core/theming\";var CheckboxIOS=function CheckboxIOS(_ref){var status=_ref.status,disabled=_ref.disabled,onPress=_ref.onPress,theme=_ref.theme,testID=_ref.testID,rest=_objectWithoutProperties(_ref,_excluded);var checked=status==='checked';var indeterminate=status==='indeterminate';var checkedColor=disabled?theme.colors.disabled:rest.color||theme.colors.accent;var rippleColor;if(disabled){rippleColor=color(theme.colors.text).alpha(0.16).rgb().string();}else{rippleColor=color(checkedColor).fade(0.32).rgb().string();}var icon=indeterminate?'minus':'check';return React.createElement(TouchableRipple,_extends({},rest,{borderless:true,rippleColor:rippleColor,onPress:onPress,disabled:disabled,accessibilityTraits:disabled?['button','disabled']:'button',accessibilityComponentType:\"button\",accessibilityRole:\"checkbox\",accessibilityState:{disabled:disabled,checked:checked},accessibilityLiveRegion:\"polite\",style:styles.container,testID:testID}),React.createElement(View,{style:{opacity:indeterminate||checked?1:0}},React.createElement(MaterialCommunityIcon,{allowFontScaling:false,name:icon,size:24,color:checkedColor,direction:\"ltr\"})));};CheckboxIOS.displayName='Checkbox.IOS';var styles=StyleSheet.create({container:{borderRadius:18,padding:6}});export default withTheme(CheckboxIOS);var CheckboxIOSWithTheme=withTheme(CheckboxIOS);export{CheckboxIOSWithTheme as CheckboxIOS};","map":{"version":3,"sources":["CheckboxIOS.tsx"],"names":["React","color","MaterialCommunityIcon","TouchableRipple","withTheme","CheckboxIOS","status","disabled","onPress","theme","testID","rest","checked","indeterminate","checkedColor","colors","accent","rippleColor","text","alpha","rgb","string","fade","icon","styles","container","opacity","displayName","create","borderRadius","padding","CheckboxIOSWithTheme"],"mappings":"2aAAA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CAAA,sHAEA,MAAOC,MAAP,KAAkB,OAAlB,CACA,MAAOC,sBAAP,gCACA,MAAOC,gBAAP,0CACA,OAASC,SAAT,0BA8CA,GAAMC,YAAW,CAAG,QAAdA,YAAW,CAAG,IAAA,CAOP,CAPQ,GACnBC,OADmB,CAOR,IAAA,CANXA,MADmB,CAEnBC,QAFmB,CAOR,IAAA,CALXA,QAFmB,CAGnBC,OAHmB,CAOR,IAAA,CAJXA,OAHmB,CAInBC,KAJmB,CAOR,IAAA,CAHXA,KAJmB,CAKnBC,MALmB,CAOR,IAAA,CAFXA,MALmB,CAMhBC,IAAAA,0BACQ,IAAA,YACX,GAAMC,QAAO,CAAGN,MAAM,GAAK,SAA3B,CACA,GAAMO,cAAa,CAAGP,MAAM,GAAK,eAAjC,CAEA,GAAMQ,aAAY,CAAGP,QAAQ,CACzBE,KAAK,CAACM,MAANN,CAAaF,QADY,CAEzBI,IAAI,CAACV,KAALU,EAAcF,KAAK,CAACM,MAANN,CAAaO,MAF/B,CAIA,GAAIC,YAAJ,CAEA,GAAIV,QAAJ,CAAc,CACZU,WAAW,CAAGhB,KAAK,CAACQ,KAAK,CAACM,MAANN,CAAaS,IAAd,CAALjB,CAAyBkB,KAAzBlB,CAA+B,IAA/BA,CAAAA,CAAqCmB,GAArCnB,EAAAA,CAA2CoB,MAA3CpB,EAAdgB,CACD,CAFD,IAEO,CACLA,WAAW,CAAGhB,KAAK,CAACa,YAAD,CAALb,CAAoBqB,IAApBrB,CAAyB,IAAzBA,CAAAA,CAA+BmB,GAA/BnB,EAAAA,CAAqCoB,MAArCpB,EAAdgB,CACD,CAED,GAAMM,KAAI,CAAGV,aAAa,CAAG,OAAH,CAAa,OAAvC,CAEA,MACE,MAAA,CAAA,aAAA,CAAC,eAAD,CAAA,QAAA,CAAA,CAAA,CAAA,CACMF,IADN,CAAA,CAEE,UAAU,CAAA,IAFZ,CAGE,WAAW,CAAEM,WAHf,CAIE,OAAO,CAAET,OAJX,CAKE,QAAQ,CAAED,QALZ,CAOE,mBAAmB,CAAEA,QAAQ,CAAG,CAAC,QAAD,CAAW,UAAX,CAAH,CAA4B,QAP3D,CAQE,0BAA0B,CAAC,QAR7B,CASE,iBAAiB,CAAC,UATpB,CAUE,kBAAkB,CAAE,CAAEA,QAAF,CAAEA,QAAF,CAAYK,OAAAA,CAAAA,OAAZ,CAVtB,CAWE,uBAAuB,CAAC,QAX1B,CAYE,KAAK,CAAEY,MAAM,CAACC,SAZhB,CAaE,MAAM,CAAEf,MAbV,CAAA,CAAA,CAeE,KAAA,CAAA,aAAA,CAAC,IAAD,CAAA,CAAM,KAAK,CAAE,CAAEgB,OAAO,CAAEb,aAAa,EAAID,OAAjBC,CAA2B,CAA3BA,CAA+B,CAA1C,CAAb,CAAA,CACE,KAAA,CAAA,aAAA,CAAC,qBAAD,CAAA,CACE,gBAAgB,CAAE,KADpB,CAEE,IAAI,CAAEU,IAFR,CAGE,IAAI,CAAE,EAHR,CAIE,KAAK,CAAET,YAJT,CAKE,SAAS,CAAC,KALZ,CAAA,CADF,CAfF,CADF,CA2BD,CApDD,CAsDAT,WAAW,CAACsB,WAAZtB,CAA0B,cAA1BA,CAEA,GAAMmB,OAAM,CAAG,UAAU,CAACI,MAAX,CAAkB,CAC/BH,SAAS,CAAE,CACTI,YAAY,CAAE,EADL,CAETC,OAAO,CAAE,CAFA,CADoB,CAAlB,CAAf,CAOA,cAAe1B,UAAS,CAACC,WAAD,CAAxB,CAGA,GAAM0B,qBAAoB,CAAG3B,SAAS,CAACC,WAAD,CAAtC,CAEA,OAAS0B,oBAAoB,GAAI1B,YAAjC","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxIOS = ({\n  status,\n  disabled,\n  onPress,\n  theme,\n  testID,\n  ...rest\n}: Props) => {\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n\n  const checkedColor = disabled\n    ? theme.colors.disabled\n    : rest.color || theme.colors.accent;\n\n  let rippleColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n  }\n\n  const icon = indeterminate ? 'minus' : 'check';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <View style={{ opacity: indeterminate || checked ? 1 : 0 }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={checkedColor}\n          direction=\"ltr\"\n        />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxIOS.displayName = 'Checkbox.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(CheckboxIOS);\n\n// @component-docs ignore-next-line\nconst CheckboxIOSWithTheme = withTheme(CheckboxIOS);\n// @component-docs ignore-next-line\nexport { CheckboxIOSWithTheme as CheckboxIOS };\n"]},"metadata":{},"sourceType":"module"}