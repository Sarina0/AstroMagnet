{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import ExpoLocation from\"./ExpoLocation\";import{LocationEventEmitter}from\"./LocationEventEmitter\";var nextWatchId=0;var Subscriber=function(){function Subscriber(eventName,eventDataField){_classCallCheck(this,Subscriber);this.callbacks={};this.eventSubscription=null;this.eventName=eventName;this.eventDataField=eventDataField;}_createClass(Subscriber,[{key:\"maybeInitializeSubscription\",value:function maybeInitializeSubscription(){var _this=this;if(this.eventSubscription){return;}this.eventSubscription=LocationEventEmitter.addListener(this.eventName,function(event){return _this.trigger(event);});}},{key:\"registerCallback\",value:function registerCallback(callback){this.maybeInitializeSubscription();var id=++nextWatchId;this.callbacks[id]=callback;return id;}},{key:\"unregisterCallback\",value:function unregisterCallback(id){if(!this.callbacks[id]){return;}delete this.callbacks[id];ExpoLocation.removeWatchAsync(id);if(Object.keys(this.callbacks).length===0&&this.eventSubscription){LocationEventEmitter.removeSubscription(this.eventSubscription);this.eventSubscription=null;}}},{key:\"trigger\",value:function trigger(event){var watchId=event.watchId;var callback=this.callbacks[watchId];if(callback){callback(event[this.eventDataField]);}else{ExpoLocation.removeWatchAsync(watchId);}}}]);return Subscriber;}();export var LocationSubscriber=new Subscriber('Expo.locationChanged','location');export var HeadingSubscriber=new Subscriber('Expo.headingChanged','heading');export function _getCurrentWatchId(){return nextWatchId;}","map":{"version":3,"sources":["../src/LocationSubscribers.ts"],"names":[],"mappings":"gIAEA,MAAO,aAAY,sBAEnB,OAAS,oBAAoB,8BAO7B,GAAI,YAAW,CAAG,CAAC,CAAC,GAEd,WAAU,YAMd,oBAAY,SAAiB,CAAE,cAAsB,CAAA,uCAH7C,SAAS,CAAmC,CAAA,CAAE,MAC9C,iBAAiB,CAAwB,IAAI,CAGnD,IAAI,CAAC,SAAS,CAAG,SAAS,CAC1B,IAAI,CAAC,cAAc,CAAG,cAAc,CACtC,CAAC,kEAED,sCAA2B,gBACzB,GAAI,IAAI,CAAC,iBAAiB,CAAE,CAC1B,OACD,CACD,IAAI,CAAC,iBAAiB,CAAG,oBAAoB,CAAC,WAAW,CACvD,IAAI,CAAC,SAAS,CACd,SAAC,KAAkB,QAAK,MAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAC5C,CACH,CAAC,gCAKD,0BAAiB,QAAsB,CAAA,CACrC,IAAI,CAAC,2BAA2B,EAAE,CAClC,GAAM,GAAE,CAAG,EAAE,WAAW,CACxB,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAG,QAAQ,CAC7B,MAAO,GAAE,CACX,CAAC,kCAKD,4BAAmB,EAAU,CAAA,CAE3B,GAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAE,CACvB,OACD,CAED,MAAO,KAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CACzB,YAAY,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAEjC,GAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,GAAK,CAAC,EAAI,IAAI,CAAC,iBAAiB,CAAE,CACtE,oBAAoB,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAC/D,IAAI,CAAC,iBAAiB,CAAG,IAAI,CAC9B,CACH,CAAC,uBAED,iBAAQ,KAAkB,CAAA,CACxB,GAAM,QAAO,CAAG,KAAK,CAAC,OAAO,CAC7B,GAAM,SAAQ,CAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAExC,GAAI,QAAQ,CAAE,CACZ,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,C,CACrC,IAAM,CACL,YAAY,CAAC,gBAAgB,CAAC,OAAO,CAAC,CACvC,CACH,CAAC,0BAGH,MAAO,IAAM,mBAAkB,CAAG,GAAI,WAAU,CAC9C,sBAAsB,CACtB,UAAU,CACX,CACD,MAAO,IAAM,kBAAiB,CAAG,GAAI,WAAU,CAC7C,qBAAqB,CACrB,SAAS,CACV,CAKD,MAAM,SAAU,mBAAkB,EAAA,CAChC,MAAO,YAAW,CACpB","sourcesContent":["import { Subscription } from 'expo-modules-core';\n\nimport ExpoLocation from './ExpoLocation';\nimport { LocationCallback, LocationHeadingCallback } from './Location.types';\nimport { LocationEventEmitter } from './LocationEventEmitter';\n\ntype EventObject = {\n  watchId: number;\n  [key: string]: any;\n};\n\nlet nextWatchId = 0;\n\nclass Subscriber<CallbackType extends LocationCallback | LocationHeadingCallback> {\n  private eventName: string;\n  private eventDataField: string;\n  private callbacks: { [id: string]: CallbackType } = {};\n  private eventSubscription: Subscription | null = null;\n\n  constructor(eventName: string, eventDataField: string) {\n    this.eventName = eventName;\n    this.eventDataField = eventDataField;\n  }\n\n  maybeInitializeSubscription() {\n    if (this.eventSubscription) {\n      return;\n    }\n    this.eventSubscription = LocationEventEmitter.addListener(\n      this.eventName,\n      (event: EventObject) => this.trigger(event)\n    );\n  }\n\n  /**\n   * Registers given callback under new id which is then returned.\n   */\n  registerCallback(callback: CallbackType): number {\n    this.maybeInitializeSubscription();\n    const id = ++nextWatchId;\n    this.callbacks[id] = callback;\n    return id;\n  }\n\n  /**\n   * Unregisters a callback with given id and revokes the subscription if possible.\n   */\n  unregisterCallback(id: number): void {\n    // Do nothing if we have already unregistered the callback.\n    if (!this.callbacks[id]) {\n      return;\n    }\n\n    delete this.callbacks[id];\n    ExpoLocation.removeWatchAsync(id);\n\n    if (Object.keys(this.callbacks).length === 0 && this.eventSubscription) {\n      LocationEventEmitter.removeSubscription(this.eventSubscription);\n      this.eventSubscription = null;\n    }\n  }\n\n  trigger(event: EventObject): void {\n    const watchId = event.watchId;\n    const callback = this.callbacks[watchId];\n\n    if (callback) {\n      callback(event[this.eventDataField]);\n    } else {\n      ExpoLocation.removeWatchAsync(watchId);\n    }\n  }\n}\n\nexport const LocationSubscriber = new Subscriber<LocationCallback>(\n  'Expo.locationChanged',\n  'location'\n);\nexport const HeadingSubscriber = new Subscriber<LocationHeadingCallback>(\n  'Expo.headingChanged',\n  'heading'\n);\n\n/**\n * @private Necessary for some unit tests.\n */\nexport function _getCurrentWatchId(): number {\n  return nextWatchId;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}