{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport firestore from '@react-native-firebase/firestore';\nvar UserController = function () {\n  function UserController() {\n    _classCallCheck(this, UserController);\n    throw new Error(\"UserController is a static class\");\n  }\n  _createClass(UserController, null, [{\n    key: \"createUser\",\n    value: function () {\n      var _createUser = _asyncToGenerator(function* (data, onError) {\n        yield firestore().collection('users').add(_objectSpread({}, data)).catch(function (error) {\n          console.log(\"[LOG] error create user:\", error);\n          onError && onError(error.message);\n        });\n        return {\n          status: true,\n          data: \"User created\"\n        };\n      });\n      function createUser(_x, _x2) {\n        return _createUser.apply(this, arguments);\n      }\n      return createUser;\n    }()\n  }, {\n    key: \"updateUser\",\n    value: function () {\n      var _updateUser = _asyncToGenerator(function* (userId, data, onError) {\n        yield firestore().collection('users').doc(userId).update(_objectSpread({}, data)).catch(function (error) {\n          console.log(\"[LOG] error update user:\", error);\n          onError && onError(error.message);\n        });\n        return {\n          status: true,\n          data: \"User updated successfully\"\n        };\n      });\n      function updateUser(_x3, _x4, _x5) {\n        return _updateUser.apply(this, arguments);\n      }\n      return updateUser;\n    }()\n  }, {\n    key: \"getAllUsers\",\n    value: function () {\n      var _getAllUsers = _asyncToGenerator(function* (onError) {\n        var result = [];\n        yield firestore().collection('users').get().then(function (querySnapshot) {\n          querySnapshot.forEach(function (documentSnapshot) {\n            result.push(documentSnapshot);\n          });\n        }).catch(function (error) {\n          console.log(\"[LOG] error get all user:\", error);\n          onError && onError(error.message);\n        });\n        return {\n          status: true,\n          data: result\n        };\n      });\n      function getAllUsers(_x6) {\n        return _getAllUsers.apply(this, arguments);\n      }\n      return getAllUsers;\n    }()\n  }, {\n    key: \"likeUser\",\n    value: function () {\n      var _likeUser = _asyncToGenerator(function* (currentUserId, userId, onError) {\n        yield firestore().collection('users').doc(currentUserId).update({\n          liked: firestore.FieldValue.arrayUnion(userId)\n        }).catch(function (error) {\n          console.log(\"[LOG] error liking user:\", error);\n          onError && onError(error.message);\n        });\n      });\n      function likeUser(_x7, _x8, _x9) {\n        return _likeUser.apply(this, arguments);\n      }\n      return likeUser;\n    }()\n  }, {\n    key: \"dislikeUser\",\n    value: function () {\n      var _dislikeUser = _asyncToGenerator(function* (currentUserId, userId, onError) {\n        yield firestore().collection('users').doc(currentUserId).update({\n          disliked: firestore.FieldValue.arrayUnion(userId)\n        }).catch(function (error) {\n          console.log(\"[LOG] error dislike user:\", error);\n          onError && onError(error.message);\n        });\n      });\n      function dislikeUser(_x10, _x11, _x12) {\n        return _dislikeUser.apply(this, arguments);\n      }\n      return dislikeUser;\n    }()\n  }]);\n  return UserController;\n}();\nexport { UserController as default };","map":{"version":3,"names":["firestore","UserController","Error","data","onError","collection","add","catch","error","console","log","message","status","userId","doc","update","result","get","then","querySnapshot","forEach","documentSnapshot","push","currentUserId","liked","FieldValue","arrayUnion","disliked"],"sources":["/Users/sonminhnguyen/Documents/programming/react-native/school/astro_magnet_initial/astro_magnet/src/controller/user/index.tsx"],"sourcesContent":["import { User } from '@app/shared/interfaces/user';\nimport firestore, { FirebaseFirestoreTypes } from '@react-native-firebase/firestore';\nimport { FireDoc } from \"@app/shared/interfaces/firebase\";\n\ntype NWResult<T> = {\n    status: boolean,\n    data: T\n}\n\n/**\n * User controller\n */\nexport default class UserController {\n\n    constructor() {\n        throw new Error(\"UserController is a static class\");\n    }\n\n    /**\n     * create a new user profile in firestore\n     * @param {User} data - new profile data\n     * @param {((message:)=>void)|undefinded }onError - error callback(handle network error)\n     * @returns {Promise<NWResult<string>>} - returns status of operation and message\n     */\n    static async createUser(\n        data: User,\n        onError?: (message: string) => void\n    ): Promise<NWResult<string>> {\n        await firestore()\n            .collection('users')\n            .add({\n                ...data,\n            }).catch((error) => {\n                console.log(\"[LOG] error create user:\", error)\n                onError && onError(error.message)\n            })\n\n        return {\n            status: true,\n            data: \"User created\"\n        }\n    }\n\n    /**\n     * update user profile in firestore\n     * @param {string} userId - current logged in user id\n     * @param {Partial<User>} data - new data to be updated\n     * @param {(message: string)=>void} onError - error callback(handle network error)\n     */\n    static async updateUser(\n        userId: string, \n        data: Partial<User>,\n        onError?: (message: string) => void\n    ): Promise<NWResult<string>> {\n        await firestore()\n            .collection('users')\n            .doc(userId)\n            .update({\n                ...data,\n            }).catch((error) => {\n                console.log(\"[LOG] error update user:\", error)\n                onError && onError(error.message)\n            })\n\n        return {\n            status: true,\n            data: \"User updated successfully\"\n        }\n    }\n\n    /**\n     * get all users\n     * @param {string} currentUserId - current logged in user id\n     * @param {(message: string)=>void} onError - error callback(handle network error)\n     * @returns returns FireDoc of users\n     */\n    static async getAllUsers(\n        onError?: (message: string) => void\n    ): Promise<NWResult<FireDoc[]>> {\n        let result: FireDoc[] = []\n        await firestore()\n            .collection('users')\n            .get()\n            .then((querySnapshot) => {\n                querySnapshot.forEach((documentSnapshot) => {\n                    result.push(documentSnapshot)\n                });\n            }).catch((error) => {\n                console.log(\"[LOG] error get all user:\", error)\n                onError && onError(error.message)\n            })\n\n        return {\n            status: true,\n            data: result\n        };\n    }\n\n    /**\n     * like user\n     * @param {string} currentUserId - current logged in user id\n     * @param {string} userId - user id to be liked\n     * @param {(message: string)=>void} onError - error callback(handle network error)\n     * @returns\n     */\n    static async likeUser(\n        currentUserId: string, \n        userId: string, \n        onError?: (message: string) => void\n    ): Promise<void> {\n        await firestore()\n            .collection('users')\n            .doc(currentUserId)\n            .update({\n                liked: firestore.FieldValue.arrayUnion(userId),\n            }).catch((error)=> {\n                console.log(\"[LOG] error liking user:\", error)\n                onError && onError(error.message)\n            })\n    }\n\n    /**\n     * like user\n     * @param {string} currentUserId - current logged in user id\n     * @param {string} userId - user id to be unliked\n     * @param {(message: string)=>void} onError - error callback(handle network error)\n     * @returns\n     */\n    static async dislikeUser(\n        currentUserId: string,\n        userId: string,\n        onError?: (message: string) => void\n    ): Promise<void> {\n        await firestore()\n            .collection('users')\n            .doc(currentUserId)\n            .update({\n                disliked: firestore.FieldValue.arrayUnion(userId),\n            }).catch((error) => {\n                console.log(\"[LOG] error dislike user:\", error)\n                onError && onError(error.message)\n            })\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}