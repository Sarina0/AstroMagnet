{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { NativeWindStyleSheet as _NativeWindStyleSheet } from \"nativewind\";\nimport { StyledComponent as _StyledComponent } from \"nativewind\";\nimport { Text, Box } from \"native-base\";\nimport DatePicker from \"react-native-date-picker\";\nimport { useState } from \"react\";\nimport moment from \"moment\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar TimeText = function TimeText(props) {\n  return _jsx(Text, {\n    color: \"onSecondary\",\n    fontSize: 18,\n    fontWeight: \"bold\",\n    onPress: props.openPicker,\n    children: props.time\n  });\n};\nvar PlaceholderText = function PlaceholderText(props) {\n  return _jsx(Text, {\n    color: \"indigo.900\",\n    fontSize: 18,\n    fontWeight: \"bold\",\n    onPress: props.openPicker,\n    children: props.text\n  });\n};\nexport default function DatePickerComponent(props) {\n  var _props$value, _props$value2;\n  var _useState = useState({\n      showDatePicker: false,\n      showTimePicker: false\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    _useState2$ = _useState2[0],\n    showDatePicker = _useState2$.showDatePicker,\n    showTimePicker = _useState2$.showTimePicker,\n    toggleShow = _useState2[1];\n  function getDMYTexts() {\n    var texts = moment(props.value).format(\"DD/MMM/YYYY\").split(\"/\").map(function (text, index) {\n      return _jsx(TimeText, {\n        time: text,\n        openPicker: toggleDatePicker\n      }, index);\n    });\n    return texts;\n  }\n  function toggleDatePicker() {\n    toggleShow({\n      showDatePicker: !showDatePicker,\n      showTimePicker: false\n    });\n  }\n  function toggleTimePicker() {\n    toggleShow({\n      showDatePicker: false,\n      showTimePicker: !showTimePicker\n    });\n  }\n  function comfirmDateTime(newDate) {\n    toggleShow({\n      showDatePicker: false,\n      showTimePicker: false\n    });\n    props.onChange(newDate);\n  }\n  return _jsxs(Box, {\n    my: 2,\n    style: props.style,\n    children: [props.label && _jsx(Text, {\n      fontSize: 20,\n      color: \"onSecondary\",\n      fontWeight: \"bold\",\n      mb: 2,\n      children: props.label\n    }), _jsxs(_StyledComponent, {\n      className: \"rounded-lg bg-secondary flex-row\\n                    p-2 items-center justify-between\",\n      component: Box,\n      children: [_jsx(Box, {\n        flex: 1,\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        paddingX: 5,\n        alignItems: \"center\",\n        children: props.value ? getDMYTexts() : _jsx(PlaceholderText, {\n          text: \"Select Date\",\n          openPicker: toggleDatePicker\n        })\n      }), _jsx(Box, {\n        flex: 0.75,\n        flexDirection: \"row\",\n        justifyContent: \"flex-end\",\n        pr: 5,\n        children: props.value ? _jsx(TimeText, {\n          time: moment(props.value).format(\"HH:mm\"),\n          openPicker: toggleTimePicker\n        }) : _jsx(PlaceholderText, {\n          text: \"Select Time\",\n          openPicker: toggleTimePicker\n        })\n      })]\n    }), _jsx(DatePicker, {\n      modal: true,\n      date: (_props$value = props.value) != null ? _props$value : new Date(),\n      open: showDatePicker,\n      onConfirm: comfirmDateTime,\n      onCancel: toggleDatePicker,\n      mode: \"date\"\n    }), _jsx(DatePicker, {\n      modal: true,\n      date: (_props$value2 = props.value) != null ? _props$value2 : new Date(),\n      open: showTimePicker,\n      onConfirm: comfirmDateTime,\n      onCancel: toggleTimePicker,\n      mode: \"time\",\n      is24hourSource: \"locale\"\n    })]\n  });\n}\n;\n_NativeWindStyleSheet.create({\n  styles: {\n    \"container\": {\n      \"width\": \"100%\"\n    },\n    \"container@0\": {\n      \"maxWidth\": 640\n    },\n    \"container@1\": {\n      \"maxWidth\": 768\n    },\n    \"container@2\": {\n      \"maxWidth\": 1024\n    },\n    \"container@3\": {\n      \"maxWidth\": 1280\n    },\n    \"container@4\": {\n      \"maxWidth\": 1536\n    },\n    \"flex\": {\n      \"display\": \"flex\"\n    },\n    \"flex-row\": {\n      \"flexDirection\": \"row\"\n    },\n    \"items-center\": {\n      \"alignItems\": \"center\"\n    },\n    \"justify-between\": {\n      \"justifyContent\": \"space-between\"\n    },\n    \"rounded-lg\": {\n      \"borderTopLeftRadius\": 8,\n      \"borderTopRightRadius\": 8,\n      \"borderBottomRightRadius\": 8,\n      \"borderBottomLeftRadius\": 8\n    },\n    \"bg-secondary\": {\n      \"backgroundColor\": \"#63458A\"\n    },\n    \"p-2\": {\n      \"paddingTop\": 8,\n      \"paddingRight\": 8,\n      \"paddingBottom\": 8,\n      \"paddingLeft\": 8\n    }\n  },\n  atRules: {\n    \"container\": [[[\"media\", \"(min-width: 640px)\"]], [[\"media\", \"(min-width: 768px)\"]], [[\"media\", \"(min-width: 1024px)\"]], [[\"media\", \"(min-width: 1280px)\"]], [[\"media\", \"(min-width: 1536px)\"]]]\n  },\n  topics: {\n    \"container\": [\"width\"]\n  }\n});","map":{"version":3,"names":["Text","Box","DatePicker","useState","moment","TimeText","props","openPicker","time","PlaceholderText","text","DatePickerComponent","showDatePicker","showTimePicker","toggleShow","getDMYTexts","texts","value","format","split","map","index","toggleDatePicker","toggleTimePicker","comfirmDateTime","newDate","onChange","style","label","Date"],"sources":["/Users/sonminhnguyen/Documents/programming/react-native/school/astro_magnet_initial/astro_magnet/src/frontend/components/global/datepicker.tsx"],"sourcesContent":["import {Text, Box, Pressable} from \"native-base\";\nimport { ViewStyle } from \"react-native\";\nimport DatePicker from \"react-native-date-picker\";\nimport {ReactNode, useState} from \"react\";\nimport moment from \"moment\";\n\ninterface Props {\n    label?: string,\n    value: Date | null | undefined,\n    onChange: (value: Date) => void,\n    style?: ViewStyle\n}\n\n/**\n * text to display time that is selected\n * @prop {string} time - time to display\n * @prop {() => void} openPicker - function to open the accompanying date/time picker\n * @returns {ReactNode} - time text component\n */\nconst TimeText = (props: {\n    time: string, \n    openPicker?: ()=>void\n}) => {\n    return (\n        <Text\n            color=\"onSecondary\"\n            fontSize={18}\n            fontWeight=\"bold\"\n            onPress={props.openPicker}\n        >\n            {props.time}\n        </Text>\n    )\n}\n\n/**\n * placeholder text for when no datetime is selected\n * @prop {string} text - placholder text to display\n * @prop {() => void} openPicker - function to open the accompanying date/time picker\n * @returns {ReactNode} - placholder text component\n */\nconst PlaceholderText = (props: {\n    text: string\n    openPicker: ()=>void\n}) => {\n    return (\n        <Text\n            color=\"indigo.900\"\n            fontSize={18}\n            fontWeight=\"bold\"\n            onPress={props.openPicker}\n        >\n            {props.text}\n        </Text>\n    )\n}\n\n/**\n * Date and time picker component\n * @prop {string | undefined} label - label of the date/time picker\n * @prop {Date | null | undefined} value - value of the date/time picker\n * @prop {(value: Date) => void} onChange - function to call when the value changes\n * @prop {ViewStyle | undefined} style - extra style for the date/time picker container\n * @returns {ReactNode} - date/time picker component\n */\nexport default function DatePickerComponent(props: Props) {\n\n    //open and close state of pickers\n    const [{\n        showDatePicker,\n        showTimePicker,\n    }, toggleShow] = useState({\n        showDatePicker: false,\n        showTimePicker: false,\n    });\n\n    /**\n     * get list of Text components that display selected day, month, year\n     * @returns {ReactNode[]} list of Text components\n     */\n    function getDMYTexts(): ReactNode {\n        const texts = moment(props.value)\n        .format(\"DD/MMM/YYYY\")\n        .split(\"/\")\n        .map((text, index) => {\n            return (\n                <TimeText\n                    key={index}\n                    time={text}\n                    openPicker={toggleDatePicker}\n                />\n            )\n        })\n\n        return texts;\n    }\n    \n    /**\n     * toggle date picker\n     */\n    function toggleDatePicker(): void {\n\n        //close time picker and toggle date picker\n        toggleShow({\n            showDatePicker: !showDatePicker,\n            showTimePicker: false,\n        });\n    }\n\n    /**\n     * toggle time picker\n     */\n    function toggleTimePicker(): void {\n\n        //close date picker and toggle time picker\n        toggleShow({\n            showDatePicker: false,\n            showTimePicker: !showTimePicker,\n        });\n    }\n\n    /**\n     * confirm selected date\n     * @param {Date} newDate new selected date\n     */\n    function comfirmDateTime(newDate: Date): void {\n\n        //close pickers\n        toggleShow({\n            showDatePicker: false,\n            showTimePicker: false,\n        });\n\n        //set new date\n        props.onChange(newDate);\n    }\n\n    return (\n        <Box\n            my={2}\n            style={props.style}\n        >\n            { props.label && \n                <Text\n                    fontSize={20}\n                    color=\"onSecondary\"\n                    fontWeight=\"bold\"\n                    mb={2}\n                >\n                    {props.label}\n                </Text>\n            }\n            <Box\n                className={\n                    `rounded-lg bg-secondary flex-row\n                    p-2 items-center justify-between`\n                }\n            >\n                <Box\n                    flex={1}\n                    flexDirection=\"row\"\n                    justifyContent=\"space-between\"\n                    paddingX={5}\n                    alignItems=\"center\"\n                >\n                    { props.value? getDMYTexts() :\n                        <PlaceholderText \n                            text=\"Select Date\" \n                            openPicker={toggleDatePicker}\n                        />\n                    }\n                </Box>\n                <Box \n                    flex={0.75}\n                    flexDirection=\"row\"\n                    justifyContent=\"flex-end\"\n                    pr={5}\n                >\n                    { props.value?\n                        <TimeText\n                            time={moment(props.value).format(\"HH:mm\")}\n                            openPicker={toggleTimePicker}\n                        />:\n                        <PlaceholderText \n                            text=\"Select Time\"\n                            openPicker={toggleTimePicker}\n                        />\n                    }\n                </Box>        \n            </Box>\n            <DatePicker\n                modal\n                date={props.value ?? new Date()}\n                open={showDatePicker}\n                onConfirm={comfirmDateTime}\n                onCancel={toggleDatePicker}\n                mode=\"date\"\n            />\n            <DatePicker\n                modal\n                date={props.value ?? new Date()}\n                open={showTimePicker}\n                onConfirm={comfirmDateTime}\n                onCancel={toggleTimePicker}\n                mode=\"time\"\n                is24hourSource=\"locale\"\n            />\n        </Box>\n    );\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}