{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { isNull, isObject, isString } from '@react-native-firebase/app/lib/common';\nimport { NativeFirebaseError } from '@react-native-firebase/app/lib/internal';\nvar SETTABLE_FIELDS = ['cacheControl', 'contentDisposition', 'contentEncoding', 'contentLanguage', 'contentType', 'customMetadata', 'md5hash'];\nexport function handleStorageEvent(_x, _x2) {\n  return _handleStorageEvent.apply(this, arguments);\n}\nfunction _handleStorageEvent() {\n  _handleStorageEvent = _asyncToGenerator(function* (storageInstance, event) {\n    var taskId = event.taskId,\n      eventName = event.eventName;\n    var body = event.body || {};\n    if (body.error) {\n      body.error = yield NativeFirebaseError.fromEvent(body.error, storageInstance._config.namespace);\n    }\n    storageInstance.emitter.emit(storageInstance.eventNameForApp(taskId, eventName), body);\n  });\n  return _handleStorageEvent.apply(this, arguments);\n}\nexport function getHttpUrlParts(url) {\n  var decoded = decodeURIComponent(url);\n  var parts = decoded.match(/\\/b\\/(.*)\\/o\\/([a-zA-Z0-9./\\-_]+)(.*)/);\n  if (!parts || parts.length < 3) {\n    return null;\n  }\n  return {\n    bucket: \"gs://\" + parts[1],\n    path: parts[2]\n  };\n}\nexport function getGsUrlParts(url) {\n  var bucket = url.substring(0, url.indexOf('/', 5)) || url;\n  var path = (url.indexOf('/', 5) > -1 ? url.substring(url.indexOf('/', 5) + 1, url.length) : '/') || '/';\n  return {\n    bucket: bucket,\n    path: path\n  };\n}\nexport function validateMetadata(metadata) {\n  var update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (!isObject(metadata)) {\n    throw new Error('firebase.storage.SettableMetadata must be an object value if provided.');\n  }\n  var metadataEntries = Object.entries(metadata);\n  for (var i = 0; i < metadataEntries.length; i++) {\n    var _metadataEntries$i = _slicedToArray(metadataEntries[i], 2),\n      key = _metadataEntries$i[0],\n      value = _metadataEntries$i[1];\n    if (!SETTABLE_FIELDS.includes(key)) {\n      throw new Error(\"firebase.storage.SettableMetadata unknown property '\" + key + \"' provided for metadata.\");\n    }\n    if (key === 'md5hash' && update === true) {\n      throw new Error(\"firebase.storage.SettableMetadata md5hash may only be set on upload, not on updateMetadata\");\n    }\n    if (key !== 'customMetadata') {\n      if (!isString(value) && !isNull(value)) {\n        throw new Error(\"firebase.storage.SettableMetadata invalid property '\" + key + \"' should be a string or null value.\");\n      }\n    } else if (!isObject(value) && !isNull(value)) {\n      throw new Error('firebase.storage.SettableMetadata.customMetadata must be an object of keys and string values or null value.');\n    }\n  }\n  return metadata;\n}","map":{"version":3,"names":["isNull","isObject","isString","NativeFirebaseError","SETTABLE_FIELDS","handleStorageEvent","storageInstance","event","taskId","eventName","body","error","fromEvent","_config","namespace","emitter","emit","eventNameForApp","getHttpUrlParts","url","decoded","decodeURIComponent","parts","match","length","bucket","path","getGsUrlParts","substring","indexOf","validateMetadata","metadata","update","Error","metadataEntries","Object","entries","i","key","value","includes"],"sources":["/Users/sonminhnguyen/Documents/programming/react-native/school/astro_magnet_initial/astro_magnet/node_modules/@react-native-firebase/storage/lib/utils.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isNull, isObject, isString } from '@react-native-firebase/app/lib/common';\nimport { NativeFirebaseError } from '@react-native-firebase/app/lib/internal';\n\nconst SETTABLE_FIELDS = [\n  'cacheControl',\n  'contentDisposition',\n  'contentEncoding',\n  'contentLanguage',\n  'contentType',\n  'customMetadata',\n  'md5hash',\n];\n\nexport async function handleStorageEvent(storageInstance, event) {\n  const { taskId, eventName } = event;\n  const body = event.body || {};\n\n  if (body.error) {\n    body.error = await NativeFirebaseError.fromEvent(body.error, storageInstance._config.namespace);\n  }\n\n  storageInstance.emitter.emit(storageInstance.eventNameForApp(taskId, eventName), body);\n}\n\nexport function getHttpUrlParts(url) {\n  const decoded = decodeURIComponent(url);\n  const parts = decoded.match(/\\/b\\/(.*)\\/o\\/([a-zA-Z0-9./\\-_]+)(.*)/);\n\n  if (!parts || parts.length < 3) {\n    return null;\n  }\n\n  return { bucket: `gs://${parts[1]}`, path: parts[2] };\n}\n\nexport function getGsUrlParts(url) {\n  const bucket = url.substring(0, url.indexOf('/', 5)) || url;\n  const path =\n    (url.indexOf('/', 5) > -1 ? url.substring(url.indexOf('/', 5) + 1, url.length) : '/') || '/';\n\n  return { bucket, path };\n}\n\nexport function validateMetadata(metadata, update = true) {\n  if (!isObject(metadata)) {\n    throw new Error('firebase.storage.SettableMetadata must be an object value if provided.');\n  }\n\n  const metadataEntries = Object.entries(metadata);\n\n  for (let i = 0; i < metadataEntries.length; i++) {\n    const [key, value] = metadataEntries[i];\n    // validate keys\n    if (!SETTABLE_FIELDS.includes(key)) {\n      throw new Error(\n        `firebase.storage.SettableMetadata unknown property '${key}' provided for metadata.`,\n      );\n    }\n\n    // md5 is only allowed on put, not on update\n    if (key === 'md5hash' && update === true) {\n      throw new Error(\n        `firebase.storage.SettableMetadata md5hash may only be set on upload, not on updateMetadata`,\n      );\n    }\n\n    // validate values\n    if (key !== 'customMetadata') {\n      if (!isString(value) && !isNull(value)) {\n        throw new Error(\n          `firebase.storage.SettableMetadata invalid property '${key}' should be a string or null value.`,\n        );\n      }\n    } else if (!isObject(value) && !isNull(value)) {\n      throw new Error(\n        'firebase.storage.SettableMetadata.customMetadata must be an object of keys and string values or null value.',\n      );\n    }\n  }\n\n  return metadata;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}