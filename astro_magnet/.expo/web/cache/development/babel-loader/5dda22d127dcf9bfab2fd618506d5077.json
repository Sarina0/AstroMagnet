{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport storage from '@react-native-firebase/storage';\nexport var UploadController = function () {\n  function UploadController() {\n    _classCallCheck(this, UploadController);\n    throw new Error(\"UploadController is a static class\");\n  }\n  _createClass(UploadController, null, [{\n    key: \"uploadImage\",\n    value: function () {\n      var _uploadImage = _asyncToGenerator(function* (image) {\n        var fileName = image.name;\n        var fileUri = image.uri;\n        if (!fileName) {\n          var randomText = '';\n          var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n          var charactersLength = characters.length;\n          for (var i = 0; i < 20; i++) {\n            randomText += characters.charAt(Math.floor(Math.random() * charactersLength));\n          }\n          fileName = randomText + '.jpg';\n        }\n        if (Platform.OS === 'ios') {\n          if (fileUri.indexOf('file://') === 0) {\n            fileUri = fileUri.replace('file://', '');\n          }\n        } else {\n          if (fileUri.indexOf('://') < 0) {\n            fileUri = 'file://' + fileUri;\n          }\n        }\n        var eventReference = storage().ref(fileName);\n        yield eventReference.putFile(fileUri);\n        var uploadedImage = yield storage().ref('/' + fileName).getDownloadURL().catch(function (error) {\n          console.log(\"[LOG] error:\", error);\n          throw new Error(error.message);\n        });\n        return uploadedImage;\n      });\n      function uploadImage(_x) {\n        return _uploadImage.apply(this, arguments);\n      }\n      return uploadImage;\n    }()\n  }]);\n  return UploadController;\n}();","map":{"version":3,"names":["storage","UploadController","Error","image","fileName","name","fileUri","uri","randomText","characters","charactersLength","length","i","charAt","Math","floor","random","Platform","OS","indexOf","replace","eventReference","ref","putFile","uploadedImage","getDownloadURL","catch","error","console","log","message"],"sources":["/Users/sonminhnguyen/Documents/programming/react-native/school/astro_magnet_initial/astro_magnet/src/controller/upload/index.tsx"],"sourcesContent":["import {Platform} from 'react-native'\nimport storage from '@react-native-firebase/storage';\n\n\n/**\n * Upload controller to handle upload\n */\nexport class UploadController {\n\n    constructor() {\n        throw new Error(\"UploadController is a static class\");\n    }\n\n    /**\n     * upload image to firebase storage\n     * @returns returns user info\n     */\n    static async uploadImage(image: {\n        uri: string\n        name?: string\n    }): Promise<string> {\n\n        //get image name\n        let fileName = image.name;\n\n        //get image uri\n        let fileUri = image.uri;\n\n        //if image name is not provided\n        if (!fileName) {\n\n            //generate random image name\n            let randomText = '';\n            var characters =\n                'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            var charactersLength = characters.length;\n            for (var i = 0; i < 20; i++) {\n                randomText += characters.charAt(Math.floor(Math.random() * charactersLength));\n            }\n            fileName = randomText + '.jpg';\n        }\n        \n\n        if (Platform.OS === 'ios') {\n            if (fileUri.indexOf('file://') === 0) {\n                fileUri = fileUri.replace('file://', '');\n            }\n        } else {\n            if (fileUri.indexOf('://') < 0) {\n                fileUri = 'file://' + fileUri;\n            }\n        }\n\n        const eventReference = storage().ref(fileName);\n        await eventReference.putFile(fileUri);\n        const uploadedImage = await storage()\n            .ref('/' + fileName)\n            .getDownloadURL()\n            .catch((error) => {\n                console.log(\"[LOG] error:\", error)\n                throw new Error(error.message)\n            })\n        return uploadedImage;\n    }\n}\n\n"],"mappings":";;;;AACA,OAAOA,OAAO,MAAM,gCAAgC;AAMpD,WAAaC,gBAAgB;EAEzB,4BAAc;IAAA;IACV,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;EACzD;EAAC;IAAA;IAAA;MAAA,qCAMD,WAAyBC,KAGxB,EAAmB;QAGhB,IAAIC,QAAQ,GAAGD,KAAK,CAACE,IAAI;QAGzB,IAAIC,OAAO,GAAGH,KAAK,CAACI,GAAG;QAGvB,IAAI,CAACH,QAAQ,EAAE;UAGX,IAAII,UAAU,GAAG,EAAE;UACnB,IAAIC,UAAU,GACV,gEAAgE;UACpE,IAAIC,gBAAgB,GAAGD,UAAU,CAACE,MAAM;UACxC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;YACzBJ,UAAU,IAAIC,UAAU,CAACI,MAAM,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGN,gBAAgB,CAAC,CAAC;UACjF;UACAN,QAAQ,GAAGI,UAAU,GAAG,MAAM;QAClC;QAGA,IAAIS,QAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;UACvB,IAAIZ,OAAO,CAACa,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;YAClCb,OAAO,GAAGA,OAAO,CAACc,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;UAC5C;QACJ,CAAC,MAAM;UACH,IAAId,OAAO,CAACa,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;YAC5Bb,OAAO,GAAG,SAAS,GAAGA,OAAO;UACjC;QACJ;QAEA,IAAMe,cAAc,GAAGrB,OAAO,EAAE,CAACsB,GAAG,CAAClB,QAAQ,CAAC;QAC9C,MAAMiB,cAAc,CAACE,OAAO,CAACjB,OAAO,CAAC;QACrC,IAAMkB,aAAa,SAASxB,OAAO,EAAE,CAChCsB,GAAG,CAAC,GAAG,GAAGlB,QAAQ,CAAC,CACnBqB,cAAc,EAAE,CAChBC,KAAK,CAAC,UAACC,KAAK,EAAK;UACdC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,KAAK,CAAC;UAClC,MAAM,IAAIzB,KAAK,CAACyB,KAAK,CAACG,OAAO,CAAC;QAClC,CAAC,CAAC;QACN,OAAON,aAAa;MACxB,CAAC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module"}