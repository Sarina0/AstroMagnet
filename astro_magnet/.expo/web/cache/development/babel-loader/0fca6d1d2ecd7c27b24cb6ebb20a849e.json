{"ast":null,"code":"var sexes = [\"male\", \"female\", \"other\"];\nexport var validateUser = function validateUser(user, onError, validateEmail) {\n  if (isEmptyFieldExist(user)) {\n    onError && onError(\"please fill in all fields\");\n    return false;\n  }\n  if (validateEmail && !isEmailValid(user.email)) {\n    onError && onError(\"invalid email\");\n    return false;\n  }\n  if (!isNameValid(user.name)) {\n    onError && onError(\"invalid name\");\n    return false;\n  }\n  if (!isAgeValid(user.dateAndTimeOfBirth)) {\n    onError && onError(\"invalid age, you must be 18 years old or older\");\n    return false;\n  }\n  if (!isSexValid(user.sex)) {\n    onError && onError(\"invalid sex\");\n  }\n  if (!isInterestedTypeValid(user.interestedType)) {\n    onError && onError(\"invalid interested\");\n    return false;\n  }\n  return true;\n};\nexport var isEmptyFieldExist = function isEmptyFieldExist(user) {\n  return !user.name || !user.dateAndTimeOfBirth || !user.placeOfBirth || !user.sex || !user.interestedType;\n};\nexport var isNameValid = function isNameValid(name) {\n  if (name.length < 3 || name.length > 30) {\n    return false;\n  }\n  return true;\n};\nexport var isEmailValid = function isEmailValid(email) {\n  var emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return emailRegex.test(email);\n};\nexport var isAgeValid = function isAgeValid(dateofbirth) {\n  var age = new Date().getFullYear() - dateofbirth.getFullYear();\n  return age >= 18;\n};\nexport var isSexValid = function isSexValid(sex) {\n  return sexes.includes(sex);\n};\nexport var isInterestedTypeValid = function isInterestedTypeValid(interestedType) {\n  return interestedType.every(function (sex) {\n    return sexes.includes(sex);\n  });\n};","map":{"version":3,"names":["sexes","validateUser","user","onError","validateEmail","isEmptyFieldExist","isEmailValid","email","isNameValid","name","isAgeValid","dateAndTimeOfBirth","isSexValid","sex","isInterestedTypeValid","interestedType","placeOfBirth","length","emailRegex","test","dateofbirth","age","Date","getFullYear","includes","every"],"sources":["/Users/sonminhnguyen/Documents/programming/react-native/school/astro_magnet_initial/astro_magnet/src/shared/actions/validation.ts"],"sourcesContent":["import {User} from \"../interfaces/user\";\n\nconst sexes = [\"male\", \"female\", \"other\"];\n\nexport const validateUser = (\n    user: Partial<User>, \n    onError?: (message: string)=> void,\n    validateEmail?: boolean,\n    \n) => {\n\n    //guard against empty fields\n    if (isEmptyFieldExist(user)) {\n        onError && onError(\"please fill in all fields\");\n        return false;\n    }\n\n    //guard against invalid email\n    if ( validateEmail && !isEmailValid(user.email!)) {\n        onError && onError(\"invalid email\");\n        return false;\n    }\n\n    //guard against invalid name\n    if (!isNameValid(user.name!)) {\n        onError && onError(\"invalid name\");\n        return false;\n    }\n\n    //guard against invalid age\n    if (!isAgeValid(user.dateAndTimeOfBirth!)) {\n        onError && onError(\"invalid age, you must be 18 years old or older\");\n        return false;\n    }\n\n    //guard against invalid sex\n    if (!isSexValid(user.sex!)) {\n        onError && onError(\"invalid sex\");\n    }\n\n    //guard against invalid interests\n    if (!isInterestedTypeValid(user.interestedType!)) {\n        onError && onError(\"invalid interested\");\n        return false;\n    }\n    return true;\n}\n\n/**\n * check if user has empty fields\n * @param user - user date to check\n * @returns {boolean} - true if user has empty fields false otherwise\n */\nexport const isEmptyFieldExist = (user: Partial<User>) => {\n    return (!user.name||\n        !user.dateAndTimeOfBirth||\n        !user.placeOfBirth||\n        !user.sex||\n        !user.interestedType);\n} \n\n/**\n * check if user name is valid\n * valid name is a string with length between 2 to 50\n * @param name - name to check\n * @returns {boolean} - true if name is valid false otherwise\n */\nexport const isNameValid = (name: string) => {\n    if (name.length < 3 || name.length > 30) {\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * check if user email is valide\n * @param email - email to check\n * @returns {boolean} - true if email is valid false otherwise\n */\nexport const isEmailValid = (email: string) => {\n    const emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return emailRegex.test(email);\n}\n\n/**\n * check if user is old enough(18 years old up)\n * @param dateofbirth - date of birth to check\n * @returns {boolean} - true if user is old enough false otherwise\n */\nexport const isAgeValid = (dateofbirth: Date) => {\n    const age = new Date().getFullYear() - dateofbirth.getFullYear();\n    return age >= 18;\n}\n\n/**\n * validate user sex\n * @param sex - user sex to check\n * @returns {boolean} - true if sex is valid false otherwise\n */\nexport const isSexValid = (sex: string) => {\n    return sexes.includes(sex);\n}\n\n/**\n * validate user interested type\n * @param interestedType - interested type to check\n * @returns {boolean} - true if interested type is valid false otherwise\n */\nexport const isInterestedTypeValid = (interestedType: string[]) => { \n    return interestedType.every((sex)=>{\n        return sexes.includes(sex);\n    })\n}"],"mappings":"AAEA,IAAMA,KAAK,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC;AAEzC,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAY,CACrBC,IAAmB,EACnBC,OAAkC,EAClCC,aAAuB,EAEtB;EAGD,IAAIC,iBAAiB,CAACH,IAAI,CAAC,EAAE;IACzBC,OAAO,IAAIA,OAAO,CAAC,2BAA2B,CAAC;IAC/C,OAAO,KAAK;EAChB;EAGA,IAAKC,aAAa,IAAI,CAACE,YAAY,CAACJ,IAAI,CAACK,KAAK,CAAE,EAAE;IAC9CJ,OAAO,IAAIA,OAAO,CAAC,eAAe,CAAC;IACnC,OAAO,KAAK;EAChB;EAGA,IAAI,CAACK,WAAW,CAACN,IAAI,CAACO,IAAI,CAAE,EAAE;IAC1BN,OAAO,IAAIA,OAAO,CAAC,cAAc,CAAC;IAClC,OAAO,KAAK;EAChB;EAGA,IAAI,CAACO,UAAU,CAACR,IAAI,CAACS,kBAAkB,CAAE,EAAE;IACvCR,OAAO,IAAIA,OAAO,CAAC,gDAAgD,CAAC;IACpE,OAAO,KAAK;EAChB;EAGA,IAAI,CAACS,UAAU,CAACV,IAAI,CAACW,GAAG,CAAE,EAAE;IACxBV,OAAO,IAAIA,OAAO,CAAC,aAAa,CAAC;EACrC;EAGA,IAAI,CAACW,qBAAqB,CAACZ,IAAI,CAACa,cAAc,CAAE,EAAE;IAC9CZ,OAAO,IAAIA,OAAO,CAAC,oBAAoB,CAAC;IACxC,OAAO,KAAK;EAChB;EACA,OAAO,IAAI;AACf,CAAC;AAOD,OAAO,IAAME,iBAAiB,GAAG,SAApBA,iBAAiB,CAAIH,IAAmB,EAAK;EACtD,OAAQ,CAACA,IAAI,CAACO,IAAI,IACd,CAACP,IAAI,CAACS,kBAAkB,IACxB,CAACT,IAAI,CAACc,YAAY,IAClB,CAACd,IAAI,CAACW,GAAG,IACT,CAACX,IAAI,CAACa,cAAc;AAC5B,CAAC;AAQD,OAAO,IAAMP,WAAW,GAAG,SAAdA,WAAW,CAAIC,IAAY,EAAK;EACzC,IAAIA,IAAI,CAACQ,MAAM,GAAG,CAAC,IAAIR,IAAI,CAACQ,MAAM,GAAG,EAAE,EAAE;IACrC,OAAO,KAAK;EAChB;EAEA,OAAO,IAAI;AACf,CAAC;AAOD,OAAO,IAAMX,YAAY,GAAG,SAAfA,YAAY,CAAIC,KAAa,EAAK;EAC3C,IAAMW,UAAU,GAAG,uJAAuJ;EAC1K,OAAOA,UAAU,CAACC,IAAI,CAACZ,KAAK,CAAC;AACjC,CAAC;AAOD,OAAO,IAAMG,UAAU,GAAG,SAAbA,UAAU,CAAIU,WAAiB,EAAK;EAC7C,IAAMC,GAAG,GAAG,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE,GAAGH,WAAW,CAACG,WAAW,EAAE;EAChE,OAAOF,GAAG,IAAI,EAAE;AACpB,CAAC;AAOD,OAAO,IAAMT,UAAU,GAAG,SAAbA,UAAU,CAAIC,GAAW,EAAK;EACvC,OAAOb,KAAK,CAACwB,QAAQ,CAACX,GAAG,CAAC;AAC9B,CAAC;AAOD,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqB,CAAIC,cAAwB,EAAK;EAC/D,OAAOA,cAAc,CAACU,KAAK,CAAC,UAACZ,GAAG,EAAG;IAC/B,OAAOb,KAAK,CAACwB,QAAQ,CAACX,GAAG,CAAC;EAC9B,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module"}