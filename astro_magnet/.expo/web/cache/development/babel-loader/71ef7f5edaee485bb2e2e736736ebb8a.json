{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { isAndroid, isNumber, isString } from '@react-native-firebase/app/lib/common';\nimport { createModuleNamespace, FirebaseModule, getFirebaseRoot } from '@react-native-firebase/app/lib/internal';\nimport StorageReference from \"./StorageReference\";\nimport StorageStatics from \"./StorageStatics\";\nimport { getGsUrlParts, getHttpUrlParts, handleStorageEvent } from \"./utils\";\nimport version from \"./version\";\nvar namespace = 'storage';\nvar nativeEvents = ['storage_event'];\nvar nativeModuleName = 'RNFBStorageModule';\nvar FirebaseStorageModule = function (_FirebaseModule) {\n  _inherits(FirebaseStorageModule, _FirebaseModule);\n  var _super = _createSuper(FirebaseStorageModule);\n  function FirebaseStorageModule(app, config, bucketUrl) {\n    var _this;\n    _classCallCheck(this, FirebaseStorageModule);\n    _this = _super.call(this, app, config, bucketUrl);\n    if (bucketUrl === undefined) {\n      _this._customUrlOrRegion = \"gs://\" + app.options.storageBucket;\n    } else if (!isString(bucketUrl) || !bucketUrl.startsWith('gs://')) {\n      throw new Error(\"firebase.app().storage(*) bucket url must be a string and begin with 'gs://'\");\n    }\n    _this.emitter.addListener(_this.eventNameForApp(nativeEvents[0]), handleStorageEvent.bind(null, _assertThisInitialized(_this)));\n    _this.emulatorHost = undefined;\n    _this.emulatorPort = 0;\n    _this._maxUploadRetryTime = _this.native.maxUploadRetryTime || 0;\n    _this._maxDownloadRetryTime = _this.native.maxDownloadRetryTime || 0;\n    _this._maxOperationRetryTime = _this.native.maxOperationRetryTime || 0;\n    return _this;\n  }\n  _createClass(FirebaseStorageModule, [{\n    key: \"maxUploadRetryTime\",\n    get: function get() {\n      return this._maxUploadRetryTime;\n    }\n  }, {\n    key: \"maxDownloadRetryTime\",\n    get: function get() {\n      return this._maxDownloadRetryTime;\n    }\n  }, {\n    key: \"maxOperationRetryTime\",\n    get: function get() {\n      return this._maxOperationRetryTime;\n    }\n  }, {\n    key: \"ref\",\n    value: function ref() {\n      var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';\n      if (!isString(path)) {\n        throw new Error(\"firebase.storage().ref(*) 'path' must be a string value.\");\n      }\n      return new StorageReference(this, path);\n    }\n  }, {\n    key: \"refFromURL\",\n    value: function refFromURL(url) {\n      if (!isString(url) || !url.startsWith('gs://') && !url.startsWith('http')) {\n        throw new Error(\"firebase.storage().refFromURL(*) 'url' must be a string value and begin with 'gs://' or 'https://'.\");\n      }\n      var path;\n      var bucket;\n      if (url.startsWith('http')) {\n        var parts = getHttpUrlParts(url);\n        if (!parts) {\n          throw new Error(\"firebase.storage().refFromURL(*) unable to parse 'url', ensure it's a valid storage url'.\");\n        }\n        bucket = parts.bucket;\n        path = parts.path;\n      } else {\n        var _getGsUrlParts = getGsUrlParts(url);\n        bucket = _getGsUrlParts.bucket;\n        path = _getGsUrlParts.path;\n      }\n      var storageInstance = this.app.storage(bucket);\n      return new StorageReference(storageInstance, path);\n    }\n  }, {\n    key: \"setMaxOperationRetryTime\",\n    value: function setMaxOperationRetryTime(time) {\n      if (!isNumber(time)) {\n        throw new Error(\"firebase.storage().setMaxOperationRetryTime(*) 'time' must be a number value.\");\n      }\n      this._maxOperationRetryTime = time;\n      return this.native.setMaxOperationRetryTime(time);\n    }\n  }, {\n    key: \"setMaxUploadRetryTime\",\n    value: function setMaxUploadRetryTime(time) {\n      if (!isNumber(time)) {\n        throw new Error(\"firebase.storage().setMaxUploadRetryTime(*) 'time' must be a number value.\");\n      }\n      this._maxUploadRetryTime = time;\n      return this.native.setMaxUploadRetryTime(time);\n    }\n  }, {\n    key: \"setMaxDownloadRetryTime\",\n    value: function setMaxDownloadRetryTime(time) {\n      if (!isNumber(time)) {\n        throw new Error(\"firebase.storage().setMaxDownloadRetryTime(*) 'time' must be a number value.\");\n      }\n      this._maxDownloadRetryTime = time;\n      return this.native.setMaxDownloadRetryTime(time);\n    }\n  }, {\n    key: \"useEmulator\",\n    value: function useEmulator(host, port) {\n      if (!host || !isString(host) || !port || !isNumber(port)) {\n        throw new Error('firebase.storage().useEmulator() takes a non-empty host and port');\n      }\n      var _host = host;\n      if (isAndroid && _host) {\n        if (_host === 'localhost' || _host === '127.0.0.1') {\n          _host = '10.0.2.2';\n          console.log('Mapping storage host to \"10.0.2.2\" for android emulators. Use real IP on real devices.');\n        }\n      }\n      this.emulatorHost = host;\n      this.emulatorPort = port;\n      this.native.useEmulator(_host, port);\n      return [_host, port];\n    }\n  }]);\n  return FirebaseStorageModule;\n}(FirebaseModule);\nexport var SDK_VERSION = version;\nexport var STATICS = StorageStatics;\nexport default createModuleNamespace({\n  statics: StorageStatics,\n  version: version,\n  namespace: namespace,\n  nativeEvents: nativeEvents,\n  nativeModuleName: nativeModuleName,\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: true,\n  disablePrependCustomUrlOrRegion: true,\n  ModuleClass: FirebaseStorageModule\n});\nexport var firebase = getFirebaseRoot();","map":{"version":3,"names":["isAndroid","isNumber","isString","createModuleNamespace","FirebaseModule","getFirebaseRoot","StorageReference","StorageStatics","getGsUrlParts","getHttpUrlParts","handleStorageEvent","version","namespace","nativeEvents","nativeModuleName","FirebaseStorageModule","app","config","bucketUrl","undefined","_customUrlOrRegion","options","storageBucket","startsWith","Error","emitter","addListener","eventNameForApp","bind","emulatorHost","emulatorPort","_maxUploadRetryTime","native","maxUploadRetryTime","_maxDownloadRetryTime","maxDownloadRetryTime","_maxOperationRetryTime","maxOperationRetryTime","path","url","bucket","parts","storageInstance","storage","time","setMaxOperationRetryTime","setMaxUploadRetryTime","setMaxDownloadRetryTime","host","port","_host","console","log","useEmulator","SDK_VERSION","STATICS","statics","hasMultiAppSupport","hasCustomUrlOrRegionSupport","disablePrependCustomUrlOrRegion","ModuleClass","firebase"],"sources":["/Users/sonminhnguyen/Documents/programming/react-native/school/astro_magnet_initial/astro_magnet/node_modules/@react-native-firebase/storage/lib/index.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isAndroid, isNumber, isString } from '@react-native-firebase/app/lib/common';\nimport {\n  createModuleNamespace,\n  FirebaseModule,\n  getFirebaseRoot,\n} from '@react-native-firebase/app/lib/internal';\nimport StorageReference from './StorageReference';\nimport StorageStatics from './StorageStatics';\nimport { getGsUrlParts, getHttpUrlParts, handleStorageEvent } from './utils';\nimport version from './version';\n\nconst namespace = 'storage';\nconst nativeEvents = ['storage_event'];\nconst nativeModuleName = 'RNFBStorageModule';\n\nclass FirebaseStorageModule extends FirebaseModule {\n  constructor(app, config, bucketUrl) {\n    super(app, config, bucketUrl);\n    if (bucketUrl === undefined) {\n      this._customUrlOrRegion = `gs://${app.options.storageBucket}`;\n    } else if (!isString(bucketUrl) || !bucketUrl.startsWith('gs://')) {\n      throw new Error(\n        \"firebase.app().storage(*) bucket url must be a string and begin with 'gs://'\",\n      );\n    }\n\n    this.emitter.addListener(\n      this.eventNameForApp(nativeEvents[0]),\n      handleStorageEvent.bind(null, this),\n    );\n\n    // Emulator instance vars needed to send through on iOS, iOS does not persist emulator state between calls\n    this.emulatorHost = undefined;\n    this.emulatorPort = 0;\n    this._maxUploadRetryTime = this.native.maxUploadRetryTime || 0;\n    this._maxDownloadRetryTime = this.native.maxDownloadRetryTime || 0;\n    this._maxOperationRetryTime = this.native.maxOperationRetryTime || 0;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setmaxuploadretrytime\n   */\n  get maxUploadRetryTime() {\n    return this._maxUploadRetryTime;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setmaxdownloadretrytime\n   */\n  get maxDownloadRetryTime() {\n    return this._maxDownloadRetryTime;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#maxoperationretrytime\n   */\n  get maxOperationRetryTime() {\n    return this._maxOperationRetryTime;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#ref\n   */\n  ref(path = '/') {\n    if (!isString(path)) {\n      throw new Error(\"firebase.storage().ref(*) 'path' must be a string value.\");\n    }\n\n    return new StorageReference(this, path);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#refFromURL\n   */\n  refFromURL(url) {\n    if (!isString(url) || (!url.startsWith('gs://') && !url.startsWith('http'))) {\n      throw new Error(\n        \"firebase.storage().refFromURL(*) 'url' must be a string value and begin with 'gs://' or 'https://'.\",\n      );\n    }\n\n    let path;\n    let bucket;\n\n    if (url.startsWith('http')) {\n      const parts = getHttpUrlParts(url);\n      if (!parts) {\n        throw new Error(\n          \"firebase.storage().refFromURL(*) unable to parse 'url', ensure it's a valid storage url'.\",\n        );\n      }\n      ({ bucket, path } = parts);\n    } else {\n      ({ bucket, path } = getGsUrlParts(url));\n    }\n\n    const storageInstance = this.app.storage(bucket);\n    return new StorageReference(storageInstance, path);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setMaxOperationRetryTime\n   */\n  setMaxOperationRetryTime(time) {\n    if (!isNumber(time)) {\n      throw new Error(\n        \"firebase.storage().setMaxOperationRetryTime(*) 'time' must be a number value.\",\n      );\n    }\n\n    this._maxOperationRetryTime = time;\n    return this.native.setMaxOperationRetryTime(time);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setMaxUploadRetryTime\n   */\n  setMaxUploadRetryTime(time) {\n    if (!isNumber(time)) {\n      throw new Error(\"firebase.storage().setMaxUploadRetryTime(*) 'time' must be a number value.\");\n    }\n\n    this._maxUploadRetryTime = time;\n    return this.native.setMaxUploadRetryTime(time);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setMaxDownloadRetryTime\n   */\n  setMaxDownloadRetryTime(time) {\n    if (!isNumber(time)) {\n      throw new Error(\n        \"firebase.storage().setMaxDownloadRetryTime(*) 'time' must be a number value.\",\n      );\n    }\n\n    this._maxDownloadRetryTime = time;\n    return this.native.setMaxDownloadRetryTime(time);\n  }\n\n  useEmulator(host, port) {\n    if (!host || !isString(host) || !port || !isNumber(port)) {\n      throw new Error('firebase.storage().useEmulator() takes a non-empty host and port');\n    }\n    let _host = host;\n    if (isAndroid && _host) {\n      if (_host === 'localhost' || _host === '127.0.0.1') {\n        _host = '10.0.2.2';\n        // eslint-disable-next-line no-console\n        console.log(\n          'Mapping storage host to \"10.0.2.2\" for android emulators. Use real IP on real devices.',\n        );\n      }\n    }\n    this.emulatorHost = host;\n    this.emulatorPort = port;\n    this.native.useEmulator(_host, port);\n    return [_host, port]; // undocumented return, just used to unit test android host remapping\n  }\n}\n\n// import { SDK_VERSION } from '@react-native-firebase/storage';\nexport const SDK_VERSION = version;\n\n// import { STATICS } from '@react-native-firebase/storage';\nexport const STATICS = StorageStatics;\n\n// import storage from '@react-native-firebase/storage';\n// storage().X(...);\nexport default createModuleNamespace({\n  statics: StorageStatics,\n  version,\n  namespace,\n  nativeEvents,\n  nativeModuleName,\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: true,\n  disablePrependCustomUrlOrRegion: true,\n  ModuleClass: FirebaseStorageModule,\n});\n\n// import storage, { firebase } from '@react-native-firebase/storage';\n// storage().X(...);\n// firebase.storage().X(...);\nexport const firebase = getFirebaseRoot();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}