{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { isArray, isNull, isObject, isString, isUndefined } from '@react-native-firebase/app/lib/common';\nimport NativeError from '@react-native-firebase/app/lib/internal/NativeFirebaseError';\nimport FirestoreDocumentSnapshot from \"./FirestoreDocumentSnapshot\";\nimport FirestoreFieldPath, { fromDotSeparatedString } from \"./FirestoreFieldPath\";\nimport FirestoreQuerySnapshot from \"./FirestoreQuerySnapshot\";\nimport { FirestoreAggregateQuery } from \"./FirestoreAggregate\";\nimport { parseSnapshotArgs } from \"./utils\";\nvar _id = 0;\nvar FirestoreQuery = function () {\n  function FirestoreQuery(firestore, collectionPath, modifiers, queryName) {\n    _classCallCheck(this, FirestoreQuery);\n    this._firestore = firestore;\n    this._collectionPath = collectionPath;\n    this._modifiers = modifiers;\n    this._queryName = queryName;\n  }\n  _createClass(FirestoreQuery, [{\n    key: \"firestore\",\n    get: function get() {\n      return this._firestore;\n    }\n  }, {\n    key: \"_handleQueryCursor\",\n    value: function _handleQueryCursor(cursor, docOrField, fields) {\n      var modifiers = this._modifiers._copy();\n      if (isUndefined(docOrField)) {\n        throw new Error(\"firebase.firestore().collection().\" + cursor + \"(*) Expected a DocumentSnapshot or list of field values but got undefined.\");\n      }\n      if (docOrField instanceof FirestoreDocumentSnapshot) {\n        if (fields.length > 0) {\n          throw new Error(\"firebase.firestore().collection().\" + cursor + \"(*) Too many arguments provided. Expected DocumentSnapshot or list of field values.\");\n        }\n        var documentSnapshot = docOrField;\n        if (!documentSnapshot.exists) {\n          throw new Error(\"firebase.firestore().collection().\" + cursor + \"(*) Can't use a DocumentSnapshot that doesn't exist.\");\n        }\n        var currentOrders = modifiers.orders;\n        var values = [];\n        for (var i = 0; i < currentOrders.length; i++) {\n          var order = currentOrders[i];\n          if (order.fieldPath === '__name__') {\n            continue;\n          }\n          var value = documentSnapshot.get(order.fieldPath);\n          if (value === undefined) {\n            throw new Error(\"firebase.firestore().collection().\" + cursor + \"(*) You are trying to start or end a query using a document for which the field '\" + order.fieldPath + \"' (used as the orderBy) does not exist.\");\n          }\n          values.push(value);\n        }\n        if (modifiers._orders.length) {\n          var lastOrder = modifiers._orders[modifiers._orders.length - 1];\n          if (lastOrder.fieldPath !== '__name__') {\n            modifiers._orders.push({\n              fieldPath: '__name__',\n              direction: lastOrder.direction\n            });\n          }\n        } else {\n          modifiers._orders.push({\n            fieldPath: '__name__',\n            direction: 'ASCENDING'\n          });\n        }\n        if (this._modifiers.isCollectionGroupQuery()) {\n          values.push(documentSnapshot.ref.path);\n        } else {\n          values.push(documentSnapshot.id);\n        }\n        return modifiers.setFieldsCursor(cursor, values);\n      }\n      var allFields = [docOrField].concat(fields);\n      if (allFields.length > modifiers.orders.length) {\n        throw new Error(\"firebase.firestore().collection().\" + cursor + \"(*) Too many arguments provided. The number of arguments must be less than or equal to the number of orderBy() clauses.\");\n      }\n      return modifiers.setFieldsCursor(cursor, allFields);\n    }\n  }, {\n    key: \"count\",\n    value: function count() {\n      return new FirestoreAggregateQuery(this._firestore, this, this._collectionPath, this._modifiers);\n    }\n  }, {\n    key: \"countFromServer\",\n    value: function countFromServer() {\n      return this.count();\n    }\n  }, {\n    key: \"endAt\",\n    value: function endAt(docOrField) {\n      for (var _len = arguments.length, fields = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        fields[_key - 1] = arguments[_key];\n      }\n      return new FirestoreQuery(this._firestore, this._collectionPath, this._handleQueryCursor('endAt', docOrField, fields), this._queryName);\n    }\n  }, {\n    key: \"endBefore\",\n    value: function endBefore(docOrField) {\n      for (var _len2 = arguments.length, fields = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        fields[_key2 - 1] = arguments[_key2];\n      }\n      return new FirestoreQuery(this._firestore, this._collectionPath, this._handleQueryCursor('endBefore', docOrField, fields), this._queryName);\n    }\n  }, {\n    key: \"get\",\n    value: function get(options) {\n      var _this = this;\n      if (!isUndefined(options) && !isObject(options)) {\n        throw new Error(\"firebase.firestore().collection().get(*) 'options' must be an object is provided.\");\n      }\n      if (options && options.source && options.source !== 'default' && options.source !== 'server' && options.source !== 'cache') {\n        throw new Error(\"firebase.firestore().collection().get(*) 'options' GetOptions.source must be one of 'default', 'server' or 'cache'.\");\n      }\n      if (!isUndefined(this._queryName)) {\n        return this._firestore.native.namedQueryGet(this._queryName, this._modifiers.type, this._modifiers.filters, this._modifiers.orders, this._modifiers.options, options).then(function (data) {\n          return new FirestoreQuerySnapshot(_this._firestore, _this, data);\n        });\n      }\n      this._modifiers.validatelimitToLast();\n      return this._firestore.native.collectionGet(this._collectionPath.relativeName, this._modifiers.type, this._modifiers.filters, this._modifiers.orders, this._modifiers.options, options).then(function (data) {\n        return new FirestoreQuerySnapshot(_this._firestore, _this, data);\n      });\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      if (!(other instanceof FirestoreQuery)) {\n        throw new Error(\"firebase.firestore().collection().isEqual(*) 'other' expected a Query instance.\");\n      }\n      if (this.firestore.app.name !== other.firestore.app.name || this._modifiers.type !== other._modifiers.type || this._modifiers.filters.length !== other._modifiers.filters.length || this._modifiers.orders.length !== other._modifiers.orders.length || this._collectionPath.relativeName !== other._collectionPath.relativeName || Object.keys(this._modifiers.options).length !== Object.keys(other._modifiers.options).length) {\n        return false;\n      }\n      if (JSON.stringify(this._modifiers.filters) !== JSON.stringify(other._modifiers.filters) || JSON.stringify(this._modifiers.orders) !== JSON.stringify(other._modifiers.orders) || JSON.stringify(this._modifiers.options) !== JSON.stringify(other._modifiers.options)) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"limit\",\n    value: function limit(_limit) {\n      if (this._modifiers.isValidLimit(_limit)) {\n        throw new Error(\"firebase.firestore().collection().limit(*) 'limit' must be a positive integer value.\");\n      }\n      var modifiers = this._modifiers._copy().limit(_limit);\n      return new FirestoreQuery(this._firestore, this._collectionPath, modifiers, this._queryName);\n    }\n  }, {\n    key: \"limitToLast\",\n    value: function limitToLast(_limitToLast) {\n      if (this._modifiers.isValidLimitToLast(_limitToLast)) {\n        throw new Error(\"firebase.firestore().collection().limitToLast(*) 'limitToLast' must be a positive integer value.\");\n      }\n      var modifiers = this._modifiers._copy().limitToLast(_limitToLast);\n      return new FirestoreQuery(this._firestore, this._collectionPath, modifiers, this._queryName);\n    }\n  }, {\n    key: \"onSnapshot\",\n    value: function onSnapshot() {\n      var _this2 = this;\n      var snapshotListenOptions;\n      var callback;\n      var onNext;\n      var onError;\n      this._modifiers.validatelimitToLast();\n      try {\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n        var options = parseSnapshotArgs(args);\n        snapshotListenOptions = options.snapshotListenOptions;\n        callback = options.callback;\n        onNext = options.onNext;\n        onError = options.onError;\n      } catch (e) {\n        throw new Error(\"firebase.firestore().collection().onSnapshot(*) \" + e.message);\n      }\n      function handleSuccess(querySnapshot) {\n        callback(querySnapshot, null);\n        onNext(querySnapshot);\n      }\n      function handleError(error) {\n        callback(null, error);\n        onError(error);\n      }\n      var listenerId = _id++;\n      var onSnapshotSubscription = this._firestore.emitter.addListener(this._firestore.eventNameForApp(\"firestore_collection_sync_event:\" + listenerId), function (event) {\n        if (event.body.error) {\n          handleError(NativeError.fromEvent(event.body.error, 'firestore'));\n        } else {\n          var querySnapshot = new FirestoreQuerySnapshot(_this2._firestore, _this2, event.body.snapshot);\n          handleSuccess(querySnapshot);\n        }\n      });\n      var unsubscribe = function unsubscribe() {\n        onSnapshotSubscription.remove();\n        _this2._firestore.native.collectionOffSnapshot(listenerId);\n      };\n      if (!isUndefined(this._queryName)) {\n        this._firestore.native.namedQueryOnSnapshot(this._queryName, this._modifiers.type, this._modifiers.filters, this._modifiers.orders, this._modifiers.options, listenerId, snapshotListenOptions);\n      } else {\n        this._firestore.native.collectionOnSnapshot(this._collectionPath.relativeName, this._modifiers.type, this._modifiers.filters, this._modifiers.orders, this._modifiers.options, listenerId, snapshotListenOptions);\n      }\n      return unsubscribe;\n    }\n  }, {\n    key: \"orderBy\",\n    value: function orderBy(fieldPath, directionStr) {\n      if (!isString(fieldPath) && !(fieldPath instanceof FirestoreFieldPath)) {\n        throw new Error(\"firebase.firestore().collection().orderBy(*) 'fieldPath' must be a string or instance of FieldPath.\");\n      }\n      var path;\n      if (isString(fieldPath)) {\n        try {\n          path = fromDotSeparatedString(fieldPath);\n        } catch (e) {\n          throw new Error(\"firebase.firestore().collection().orderBy(*) 'fieldPath' \" + e.message + \".\");\n        }\n      } else {\n        path = fieldPath;\n      }\n      if (!isUndefined(directionStr) && !this._modifiers.isValidDirection(directionStr)) {\n        throw new Error(\"firebase.firestore().collection().orderBy(_, *) 'directionStr' must be one of 'asc' or 'desc'.\");\n      }\n      if (this._modifiers.hasStart()) {\n        throw new Error('firebase.firestore().collection().orderBy() Invalid query. You must not call startAt() or startAfter() before calling orderBy().');\n      }\n      if (this._modifiers.hasEnd()) {\n        throw new Error('firebase.firestore().collection().orderBy() Invalid query. You must not call endAt() or endBefore() before calling orderBy().');\n      }\n      var modifiers = this._modifiers._copy().orderBy(path, directionStr);\n      try {\n        modifiers.validateOrderBy();\n      } catch (e) {\n        throw new Error(\"firebase.firestore().collection().orderBy() \" + e.message);\n      }\n      return new FirestoreQuery(this._firestore, this._collectionPath, modifiers, this._queryName);\n    }\n  }, {\n    key: \"startAfter\",\n    value: function startAfter(docOrField) {\n      for (var _len4 = arguments.length, fields = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        fields[_key4 - 1] = arguments[_key4];\n      }\n      return new FirestoreQuery(this._firestore, this._collectionPath, this._handleQueryCursor('startAfter', docOrField, fields), this._queryName);\n    }\n  }, {\n    key: \"startAt\",\n    value: function startAt(docOrField) {\n      for (var _len5 = arguments.length, fields = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        fields[_key5 - 1] = arguments[_key5];\n      }\n      return new FirestoreQuery(this._firestore, this._collectionPath, this._handleQueryCursor('startAt', docOrField, fields), this._queryName);\n    }\n  }, {\n    key: \"where\",\n    value: function where(fieldPath, opStr, value) {\n      if (!isString(fieldPath) && !(fieldPath instanceof FirestoreFieldPath)) {\n        throw new Error(\"firebase.firestore().collection().where(*) 'fieldPath' must be a string or instance of FieldPath.\");\n      }\n      var path;\n      if (isString(fieldPath)) {\n        try {\n          path = fromDotSeparatedString(fieldPath);\n        } catch (e) {\n          throw new Error(\"firebase.firestore().collection().where(*) 'fieldPath' \" + e.message + \".\");\n        }\n      } else {\n        path = fieldPath;\n      }\n      if (!this._modifiers.isValidOperator(opStr)) {\n        throw new Error(\"firebase.firestore().collection().where(_, *) 'opStr' is invalid. Expected one of '==', '>', '>=', '<', '<=', '!=', 'array-contains', 'not-in', 'array-contains-any' or 'in'.\");\n      }\n      if (isUndefined(value)) {\n        throw new Error(\"firebase.firestore().collection().where(_, _, *) 'value' argument expected.\");\n      }\n      if (isNull(value) && !this._modifiers.isEqualOperator(opStr)) {\n        throw new Error(\"firebase.firestore().collection().where(_, _, *) 'value' is invalid. You can only perform equals comparisons on null\");\n      }\n      if (this._modifiers.isInOperator(opStr)) {\n        if (!isArray(value) || !value.length) {\n          throw new Error(\"firebase.firestore().collection().where(_, _, *) 'value' is invalid. A non-empty array is required for '\" + opStr + \"' filters.\");\n        }\n        if (value.length > 10) {\n          throw new Error(\"firebase.firestore().collection().where(_, _, *) 'value' is invalid. '\" + opStr + \"' filters support a maximum of 10 elements in the value array.\");\n        }\n      }\n      var modifiers = this._modifiers._copy().where(path, opStr, value);\n      try {\n        modifiers.validateWhere();\n      } catch (e) {\n        throw new Error(\"firebase.firestore().collection().where() \" + e.message);\n      }\n      return new FirestoreQuery(this._firestore, this._collectionPath, modifiers, this._queryName);\n    }\n  }]);\n  return FirestoreQuery;\n}();\nexport { FirestoreQuery as default };","map":{"version":3,"names":["isArray","isNull","isObject","isString","isUndefined","NativeError","FirestoreDocumentSnapshot","FirestoreFieldPath","fromDotSeparatedString","FirestoreQuerySnapshot","FirestoreAggregateQuery","parseSnapshotArgs","_id","FirestoreQuery","firestore","collectionPath","modifiers","queryName","_firestore","_collectionPath","_modifiers","_queryName","cursor","docOrField","fields","_copy","Error","length","documentSnapshot","exists","currentOrders","orders","values","i","order","fieldPath","value","get","undefined","push","_orders","lastOrder","direction","isCollectionGroupQuery","ref","path","id","setFieldsCursor","allFields","concat","count","_handleQueryCursor","options","source","native","namedQueryGet","type","filters","then","data","validatelimitToLast","collectionGet","relativeName","other","app","name","Object","keys","JSON","stringify","limit","isValidLimit","limitToLast","isValidLimitToLast","snapshotListenOptions","callback","onNext","onError","args","e","message","handleSuccess","querySnapshot","handleError","error","listenerId","onSnapshotSubscription","emitter","addListener","eventNameForApp","event","body","fromEvent","snapshot","unsubscribe","remove","collectionOffSnapshot","namedQueryOnSnapshot","collectionOnSnapshot","directionStr","isValidDirection","hasStart","hasEnd","orderBy","validateOrderBy","opStr","isValidOperator","isEqualOperator","isInOperator","where","validateWhere"],"sources":["/Users/sonminhnguyen/Documents/programming/react-native/school/astro_magnet_initial/astro_magnet/node_modules/@react-native-firebase/firestore/lib/FirestoreQuery.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isArray,\n  isNull,\n  isObject,\n  isString,\n  isUndefined,\n} from '@react-native-firebase/app/lib/common';\nimport NativeError from '@react-native-firebase/app/lib/internal/NativeFirebaseError';\nimport FirestoreDocumentSnapshot from './FirestoreDocumentSnapshot';\nimport FirestoreFieldPath, { fromDotSeparatedString } from './FirestoreFieldPath';\nimport FirestoreQuerySnapshot from './FirestoreQuerySnapshot';\nimport { FirestoreAggregateQuery } from './FirestoreAggregate';\nimport { parseSnapshotArgs } from './utils';\n\nlet _id = 0;\n\nexport default class FirestoreQuery {\n  constructor(firestore, collectionPath, modifiers, queryName) {\n    this._firestore = firestore;\n    this._collectionPath = collectionPath;\n    this._modifiers = modifiers;\n    this._queryName = queryName;\n  }\n\n  get firestore() {\n    return this._firestore;\n  }\n\n  _handleQueryCursor(cursor, docOrField, fields) {\n    const modifiers = this._modifiers._copy();\n\n    if (isUndefined(docOrField)) {\n      throw new Error(\n        `firebase.firestore().collection().${cursor}(*) Expected a DocumentSnapshot or list of field values but got undefined.`,\n      );\n    }\n\n    // Handles cases where the first arg is a DocumentSnapshot\n    if (docOrField instanceof FirestoreDocumentSnapshot) {\n      if (fields.length > 0) {\n        throw new Error(\n          `firebase.firestore().collection().${cursor}(*) Too many arguments provided. Expected DocumentSnapshot or list of field values.`,\n        );\n      }\n\n      const documentSnapshot = docOrField;\n\n      if (!documentSnapshot.exists) {\n        throw new Error(\n          `firebase.firestore().collection().${cursor}(*) Can't use a DocumentSnapshot that doesn't exist.`,\n        );\n      }\n\n      const currentOrders = modifiers.orders;\n\n      const values = [];\n\n      for (let i = 0; i < currentOrders.length; i++) {\n        const order = currentOrders[i];\n        //skip if fieldPath is '__name__'\n        if (order.fieldPath === '__name__') {\n          continue;\n        }\n\n        const value = documentSnapshot.get(order.fieldPath);\n\n        if (value === undefined) {\n          throw new Error(\n            `firebase.firestore().collection().${cursor}(*) You are trying to start or end a query using a document for which the field '${order.fieldPath}' (used as the orderBy) does not exist.`,\n          );\n        }\n\n        values.push(value);\n      }\n\n      // Based on https://github.com/invertase/react-native-firebase/issues/2854#issuecomment-552986650\n      if (modifiers._orders.length) {\n        const lastOrder = modifiers._orders[modifiers._orders.length - 1];\n        //push '__name__' field only if not present already\n        if (lastOrder.fieldPath !== '__name__') {\n          modifiers._orders.push({\n            fieldPath: '__name__',\n            direction: lastOrder.direction,\n          });\n        }\n      } else {\n        modifiers._orders.push({\n          fieldPath: '__name__',\n          direction: 'ASCENDING',\n        });\n      }\n\n      if (this._modifiers.isCollectionGroupQuery()) {\n        values.push(documentSnapshot.ref.path);\n      } else {\n        values.push(documentSnapshot.id);\n      }\n\n      return modifiers.setFieldsCursor(cursor, values);\n    }\n\n    /**\n     * Assumes list of field values to query by. Orders must be of equal length.\n     */\n\n    const allFields = [docOrField].concat(fields);\n\n    if (allFields.length > modifiers.orders.length) {\n      throw new Error(\n        `firebase.firestore().collection().${cursor}(*) Too many arguments provided. The number of arguments must be less than or equal to the number of orderBy() clauses.`,\n      );\n    }\n\n    return modifiers.setFieldsCursor(cursor, allFields);\n  }\n\n  count() {\n    return new FirestoreAggregateQuery(\n      this._firestore,\n      this,\n      this._collectionPath,\n      this._modifiers,\n    );\n  }\n\n  countFromServer() {\n    return this.count();\n  }\n\n  endAt(docOrField, ...fields) {\n    return new FirestoreQuery(\n      this._firestore,\n      this._collectionPath,\n      this._handleQueryCursor('endAt', docOrField, fields),\n      this._queryName,\n    );\n  }\n\n  endBefore(docOrField, ...fields) {\n    return new FirestoreQuery(\n      this._firestore,\n      this._collectionPath,\n      this._handleQueryCursor('endBefore', docOrField, fields),\n      this._queryName,\n    );\n  }\n\n  get(options) {\n    if (!isUndefined(options) && !isObject(options)) {\n      throw new Error(\n        \"firebase.firestore().collection().get(*) 'options' must be an object is provided.\",\n      );\n    }\n\n    if (\n      options &&\n      options.source &&\n      options.source !== 'default' &&\n      options.source !== 'server' &&\n      options.source !== 'cache'\n    ) {\n      throw new Error(\n        \"firebase.firestore().collection().get(*) 'options' GetOptions.source must be one of 'default', 'server' or 'cache'.\",\n      );\n    }\n\n    if (!isUndefined(this._queryName)) {\n      return this._firestore.native\n        .namedQueryGet(\n          this._queryName,\n          this._modifiers.type,\n          this._modifiers.filters,\n          this._modifiers.orders,\n          this._modifiers.options,\n          options,\n        )\n        .then(data => new FirestoreQuerySnapshot(this._firestore, this, data));\n    }\n\n    this._modifiers.validatelimitToLast();\n\n    return this._firestore.native\n      .collectionGet(\n        this._collectionPath.relativeName,\n        this._modifiers.type,\n        this._modifiers.filters,\n        this._modifiers.orders,\n        this._modifiers.options,\n        options,\n      )\n      .then(data => new FirestoreQuerySnapshot(this._firestore, this, data));\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreQuery)) {\n      throw new Error(\n        \"firebase.firestore().collection().isEqual(*) 'other' expected a Query instance.\",\n      );\n    }\n\n    // Carry out lightweight checks first\n    if (\n      this.firestore.app.name !== other.firestore.app.name ||\n      this._modifiers.type !== other._modifiers.type ||\n      this._modifiers.filters.length !== other._modifiers.filters.length ||\n      this._modifiers.orders.length !== other._modifiers.orders.length ||\n      this._collectionPath.relativeName !== other._collectionPath.relativeName ||\n      Object.keys(this._modifiers.options).length !== Object.keys(other._modifiers.options).length\n    ) {\n      return false;\n    }\n\n    // Carry out potentially expensive checks\n    // noinspection RedundantIfStatementJS\n    if (\n      JSON.stringify(this._modifiers.filters) !== JSON.stringify(other._modifiers.filters) ||\n      JSON.stringify(this._modifiers.orders) !== JSON.stringify(other._modifiers.orders) ||\n      JSON.stringify(this._modifiers.options) !== JSON.stringify(other._modifiers.options)\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  limit(limit) {\n    if (this._modifiers.isValidLimit(limit)) {\n      throw new Error(\n        \"firebase.firestore().collection().limit(*) 'limit' must be a positive integer value.\",\n      );\n    }\n\n    const modifiers = this._modifiers._copy().limit(limit);\n\n    return new FirestoreQuery(this._firestore, this._collectionPath, modifiers, this._queryName);\n  }\n\n  limitToLast(limitToLast) {\n    if (this._modifiers.isValidLimitToLast(limitToLast)) {\n      throw new Error(\n        \"firebase.firestore().collection().limitToLast(*) 'limitToLast' must be a positive integer value.\",\n      );\n    }\n\n    const modifiers = this._modifiers._copy().limitToLast(limitToLast);\n\n    return new FirestoreQuery(this._firestore, this._collectionPath, modifiers, this._queryName);\n  }\n\n  onSnapshot(...args) {\n    let snapshotListenOptions;\n    let callback;\n    let onNext;\n    let onError;\n\n    this._modifiers.validatelimitToLast();\n\n    try {\n      const options = parseSnapshotArgs(args);\n      snapshotListenOptions = options.snapshotListenOptions;\n      callback = options.callback;\n      onNext = options.onNext;\n      onError = options.onError;\n    } catch (e) {\n      throw new Error(`firebase.firestore().collection().onSnapshot(*) ${e.message}`);\n    }\n\n    function handleSuccess(querySnapshot) {\n      callback(querySnapshot, null);\n      onNext(querySnapshot);\n    }\n\n    function handleError(error) {\n      callback(null, error);\n      onError(error);\n    }\n\n    const listenerId = _id++;\n\n    const onSnapshotSubscription = this._firestore.emitter.addListener(\n      this._firestore.eventNameForApp(`firestore_collection_sync_event:${listenerId}`),\n      event => {\n        if (event.body.error) {\n          handleError(NativeError.fromEvent(event.body.error, 'firestore'));\n        } else {\n          const querySnapshot = new FirestoreQuerySnapshot(\n            this._firestore,\n            this,\n            event.body.snapshot,\n          );\n          handleSuccess(querySnapshot);\n        }\n      },\n    );\n\n    const unsubscribe = () => {\n      onSnapshotSubscription.remove();\n      this._firestore.native.collectionOffSnapshot(listenerId);\n    };\n\n    if (!isUndefined(this._queryName)) {\n      this._firestore.native.namedQueryOnSnapshot(\n        this._queryName,\n        this._modifiers.type,\n        this._modifiers.filters,\n        this._modifiers.orders,\n        this._modifiers.options,\n        listenerId,\n        snapshotListenOptions,\n      );\n    } else {\n      this._firestore.native.collectionOnSnapshot(\n        this._collectionPath.relativeName,\n        this._modifiers.type,\n        this._modifiers.filters,\n        this._modifiers.orders,\n        this._modifiers.options,\n        listenerId,\n        snapshotListenOptions,\n      );\n    }\n\n    return unsubscribe;\n  }\n\n  orderBy(fieldPath, directionStr) {\n    if (!isString(fieldPath) && !(fieldPath instanceof FirestoreFieldPath)) {\n      throw new Error(\n        \"firebase.firestore().collection().orderBy(*) 'fieldPath' must be a string or instance of FieldPath.\",\n      );\n    }\n\n    let path;\n\n    if (isString(fieldPath)) {\n      try {\n        path = fromDotSeparatedString(fieldPath);\n      } catch (e) {\n        throw new Error(`firebase.firestore().collection().orderBy(*) 'fieldPath' ${e.message}.`);\n      }\n    } else {\n      path = fieldPath;\n    }\n\n    if (!isUndefined(directionStr) && !this._modifiers.isValidDirection(directionStr)) {\n      throw new Error(\n        \"firebase.firestore().collection().orderBy(_, *) 'directionStr' must be one of 'asc' or 'desc'.\",\n      );\n    }\n\n    if (this._modifiers.hasStart()) {\n      throw new Error(\n        'firebase.firestore().collection().orderBy() Invalid query. You must not call startAt() or startAfter() before calling orderBy().',\n      );\n    }\n\n    if (this._modifiers.hasEnd()) {\n      throw new Error(\n        'firebase.firestore().collection().orderBy() Invalid query. You must not call endAt() or endBefore() before calling orderBy().',\n      );\n    }\n\n    const modifiers = this._modifiers._copy().orderBy(path, directionStr);\n\n    try {\n      modifiers.validateOrderBy();\n    } catch (e) {\n      throw new Error(`firebase.firestore().collection().orderBy() ${e.message}`);\n    }\n\n    return new FirestoreQuery(this._firestore, this._collectionPath, modifiers, this._queryName);\n  }\n\n  startAfter(docOrField, ...fields) {\n    return new FirestoreQuery(\n      this._firestore,\n      this._collectionPath,\n      this._handleQueryCursor('startAfter', docOrField, fields),\n      this._queryName,\n    );\n  }\n\n  startAt(docOrField, ...fields) {\n    return new FirestoreQuery(\n      this._firestore,\n      this._collectionPath,\n      this._handleQueryCursor('startAt', docOrField, fields),\n      this._queryName,\n    );\n  }\n\n  where(fieldPath, opStr, value) {\n    if (!isString(fieldPath) && !(fieldPath instanceof FirestoreFieldPath)) {\n      throw new Error(\n        \"firebase.firestore().collection().where(*) 'fieldPath' must be a string or instance of FieldPath.\",\n      );\n    }\n\n    let path;\n\n    if (isString(fieldPath)) {\n      try {\n        path = fromDotSeparatedString(fieldPath);\n      } catch (e) {\n        throw new Error(`firebase.firestore().collection().where(*) 'fieldPath' ${e.message}.`);\n      }\n    } else {\n      path = fieldPath;\n    }\n\n    if (!this._modifiers.isValidOperator(opStr)) {\n      throw new Error(\n        \"firebase.firestore().collection().where(_, *) 'opStr' is invalid. Expected one of '==', '>', '>=', '<', '<=', '!=', 'array-contains', 'not-in', 'array-contains-any' or 'in'.\",\n      );\n    }\n\n    if (isUndefined(value)) {\n      throw new Error(\n        \"firebase.firestore().collection().where(_, _, *) 'value' argument expected.\",\n      );\n    }\n\n    if (isNull(value) && !this._modifiers.isEqualOperator(opStr)) {\n      throw new Error(\n        \"firebase.firestore().collection().where(_, _, *) 'value' is invalid. You can only perform equals comparisons on null\",\n      );\n    }\n\n    if (this._modifiers.isInOperator(opStr)) {\n      if (!isArray(value) || !value.length) {\n        throw new Error(\n          `firebase.firestore().collection().where(_, _, *) 'value' is invalid. A non-empty array is required for '${opStr}' filters.`,\n        );\n      }\n\n      if (value.length > 10) {\n        throw new Error(\n          `firebase.firestore().collection().where(_, _, *) 'value' is invalid. '${opStr}' filters support a maximum of 10 elements in the value array.`,\n        );\n      }\n    }\n\n    const modifiers = this._modifiers._copy().where(path, opStr, value);\n\n    try {\n      modifiers.validateWhere();\n    } catch (e) {\n      throw new Error(`firebase.firestore().collection().where() ${e.message}`);\n    }\n\n    return new FirestoreQuery(this._firestore, this._collectionPath, modifiers, this._queryName);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}