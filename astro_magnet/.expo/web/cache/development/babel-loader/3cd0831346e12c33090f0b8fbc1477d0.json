{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { useState, useEffect, useContext } from \"react\";\nimport { UserContext } from \"../context/user\";\nimport firestore from \"@react-native-firebase/firestore\";\nexport default function useMessage(chatRoomId, page, onError) {\n  var _useContext = useContext(UserContext),\n    profile = _useContext.profile;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    messages = _useState2[0],\n    setMessages = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  useEffect(function () {\n    if (!profile) {\n      setLoading(false);\n      return;\n    }\n    var userMessageList = profile.messagingFriendList;\n    var isUserInChatRoom = userMessageList.find(function (user) {\n      return user.chatRoomId === chatRoomId;\n    });\n    if (!isUserInChatRoom) {\n      setLoading(false);\n      return;\n    }\n    var chatRoomRef = firestore().collection(\"chatRooms\").doc(chatRoomId);\n    var messagesRef = chatRoomRef.collection(\"messages\").orderBy(\"createdAt\", \"desc\").limit(page ? page * 10 : 10);\n    var unsubscribe = messagesRef.onSnapshot(function (snapshot) {\n      var list = [];\n      snapshot.forEach(function (doc) {\n        list.push(_objectSpread({\n          id: doc.id\n        }, doc.data()));\n      });\n      setMessages(list);\n      setLoading(false);\n    }, function (error) {\n      setLoading(false);\n      console.log(\"[ERROR] error fetching messages:\", error);\n      onError && onError(\"Error fetching messages\");\n    });\n    return unsubscribe;\n  }, [chatRoomId, profile, page]);\n  return {\n    messages: messages,\n    loading: loading\n  };\n}","map":{"version":3,"names":["useState","useEffect","useContext","UserContext","firestore","useMessage","chatRoomId","page","onError","profile","messages","setMessages","loading","setLoading","userMessageList","messagingFriendList","isUserInChatRoom","find","user","chatRoomRef","collection","doc","messagesRef","orderBy","limit","unsubscribe","onSnapshot","snapshot","list","forEach","push","id","data","error","console","log"],"sources":["/Users/sonminhnguyen/Documents/programming/react-native/school/astro_magnet_initial/astro_magnet/src/hooks/useMessage.tsx"],"sourcesContent":["import { useState, useEffect, useContext } from \"react\";\nimport { UserContext } from \"@app/context/user\";\nimport type { Message } from \"@app/shared/interfaces/message\";\nimport firestore from \"@react-native-firebase/firestore\";\nimport { FireDoc } from \"@app/shared/interfaces/firebase\";\n\n/**\n * hook to fetch all messages of a channel\n * @param chatRoomId - chat room id\n * @param onError - callback function to handle network error\n * @return {Message[]} - a list of messages\n * @return {boolean} - fetch loading state\n */\nexport default function useMessage(\n    chatRoomId: string,\n    page?: number,\n    onError?:(error:string)=>void,\n) {\n    const {profile} = useContext(UserContext);\n    const [messages, setMessages] = useState<Message[]>([]);\n    const [loading, setLoading] = useState<boolean>(true);\n    useEffect(() => {\n\n        //guard against unauthenticated user\n        if (!profile) {\n            setLoading(false); \n            return \n        }\n\n        //guard against unauthorized access to chatroom(user not in chatroom)\n        const userMessageList = profile.messagingFriendList;\n        const isUserInChatRoom = userMessageList.find((user) => user.chatRoomId === chatRoomId);\n        if (!isUserInChatRoom) {\n            setLoading(false); \n            return \n        }\n\n        //get messages from firestore\n        const chatRoomRef = firestore().collection(\"chatRooms\").doc(chatRoomId);\n        const messagesRef = chatRoomRef\n            .collection(\"messages\")\n            .orderBy(\"createdAt\", \"desc\")\n            .limit(page ? page * 10 : 10);\n        const unsubscribe = messagesRef\n            .onSnapshot((snapshot) => {\n                const list: FireDoc[] = [];\n                snapshot.forEach((doc) => {\n                    list.push({\n                        id: doc.id,\n                        ...doc.data(),\n                    });\n                });\n                setMessages(list as Message[]);\n                setLoading(false);\n            }, (error) => {\n                setLoading(false);\n                console.log(\"[ERROR] error fetching messages:\", error);\n                onError && onError(\"Error fetching messages\");\n            });\n        return unsubscribe;\n    }, [chatRoomId, profile, page]);\n\n    return {\n        /** current chat room messages */\n        messages,\n\n        /** fetch loading state */\n        loading\n    }\n}\n\n\n\n"],"mappings":";;;;AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AACvD,SAASC,WAAW;AAEpB,OAAOC,SAAS,MAAM,kCAAkC;AAUxD,eAAe,SAASC,UAAU,CAC9BC,UAAkB,EAClBC,IAAa,EACbC,OAA6B,EAC/B;EACE,kBAAkBN,UAAU,CAACC,WAAW,CAAC;IAAlCM,OAAO,eAAPA,OAAO;EACd,gBAAgCT,QAAQ,CAAY,EAAE,CAAC;IAAA;IAAhDU,QAAQ;IAAEC,WAAW;EAC5B,iBAA8BX,QAAQ,CAAU,IAAI,CAAC;IAAA;IAA9CY,OAAO;IAAEC,UAAU;EAC1BZ,SAAS,CAAC,YAAM;IAGZ,IAAI,CAACQ,OAAO,EAAE;MACVI,UAAU,CAAC,KAAK,CAAC;MACjB;IACJ;IAGA,IAAMC,eAAe,GAAGL,OAAO,CAACM,mBAAmB;IACnD,IAAMC,gBAAgB,GAAGF,eAAe,CAACG,IAAI,CAAC,UAACC,IAAI;MAAA,OAAKA,IAAI,CAACZ,UAAU,KAAKA,UAAU;IAAA,EAAC;IACvF,IAAI,CAACU,gBAAgB,EAAE;MACnBH,UAAU,CAAC,KAAK,CAAC;MACjB;IACJ;IAGA,IAAMM,WAAW,GAAGf,SAAS,EAAE,CAACgB,UAAU,CAAC,WAAW,CAAC,CAACC,GAAG,CAACf,UAAU,CAAC;IACvE,IAAMgB,WAAW,GAAGH,WAAW,CAC1BC,UAAU,CAAC,UAAU,CAAC,CACtBG,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,CAC5BC,KAAK,CAACjB,IAAI,GAAGA,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;IACjC,IAAMkB,WAAW,GAAGH,WAAW,CAC1BI,UAAU,CAAC,UAACC,QAAQ,EAAK;MACtB,IAAMC,IAAe,GAAG,EAAE;MAC1BD,QAAQ,CAACE,OAAO,CAAC,UAACR,GAAG,EAAK;QACtBO,IAAI,CAACE,IAAI;UACLC,EAAE,EAAEV,GAAG,CAACU;QAAE,GACPV,GAAG,CAACW,IAAI,EAAE,EACf;MACN,CAAC,CAAC;MACFrB,WAAW,CAACiB,IAAI,CAAc;MAC9Bf,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC,EAAE,UAACoB,KAAK,EAAK;MACVpB,UAAU,CAAC,KAAK,CAAC;MACjBqB,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEF,KAAK,CAAC;MACtDzB,OAAO,IAAIA,OAAO,CAAC,yBAAyB,CAAC;IACjD,CAAC,CAAC;IACN,OAAOiB,WAAW;EACtB,CAAC,EAAE,CAACnB,UAAU,EAAEG,OAAO,EAAEF,IAAI,CAAC,CAAC;EAE/B,OAAO;IAEHG,QAAQ,EAARA,QAAQ;IAGRE,OAAO,EAAPA;EACJ,CAAC;AACL"},"metadata":{},"sourceType":"module"}