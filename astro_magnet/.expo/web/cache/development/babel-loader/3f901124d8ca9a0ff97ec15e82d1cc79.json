{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { Base64, isString } from '@react-native-firebase/app/lib/common';\nvar FirestoreBlob = function () {\n  function FirestoreBlob() {\n    var internal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var binaryString = arguments.length > 1 ? arguments[1] : undefined;\n    _classCallCheck(this, FirestoreBlob);\n    if (internal === false) {\n      throw new Error('firebase.firestore.Blob constructor is private, use Blob.<field>() instead.');\n    }\n    this._binaryString = binaryString;\n  }\n  _createClass(FirestoreBlob, [{\n    key: \"isEqual\",\n    value: function isEqual(blob) {\n      if (!(blob instanceof FirestoreBlob)) {\n        throw new Error('firestore.Blob.isEqual expects an instance of Blob');\n      }\n      return this._binaryString === blob._binaryString;\n    }\n  }, {\n    key: \"toBase64\",\n    value: function toBase64() {\n      return Base64.btoa(this._binaryString);\n    }\n  }, {\n    key: \"toUint8Array\",\n    value: function toUint8Array() {\n      return new Uint8Array(this._binaryString.split('').map(function (c) {\n        return c.charCodeAt(0);\n      }));\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"firestore.Blob(base64: \" + this.toBase64() + \")\";\n    }\n  }], [{\n    key: \"fromBase64String\",\n    value: function fromBase64String(base64) {\n      if (!isString(base64) || base64.length < 1) {\n        throw new Error('firestore.Blob.fromBase64String expects a string of at least 1 character in length');\n      }\n      return new FirestoreBlob(true, Base64.atob(base64));\n    }\n  }, {\n    key: \"fromUint8Array\",\n    value: function fromUint8Array(array) {\n      if (!(array instanceof Uint8Array)) {\n        throw new Error('firestore.Blob.fromUint8Array expects an instance of Uint8Array');\n      }\n      return new FirestoreBlob(true, Array.prototype.map.call(array, function ($) {\n        return String.fromCharCode($);\n      }).join(''));\n    }\n  }]);\n  return FirestoreBlob;\n}();\nexport { FirestoreBlob as default };","map":{"version":3,"names":["Base64","isString","FirestoreBlob","internal","binaryString","Error","_binaryString","blob","btoa","Uint8Array","split","map","c","charCodeAt","toBase64","base64","length","atob","array","Array","prototype","call","$","String","fromCharCode","join"],"sources":["/Users/sonminhnguyen/Documents/programming/react-native/school/astro_magnet_initial/astro_magnet/node_modules/@react-native-firebase/firestore/lib/FirestoreBlob.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Base64, isString } from '@react-native-firebase/app/lib/common';\n\nexport default class FirestoreBlob {\n  constructor(internal = false, binaryString) {\n    if (internal === false) {\n      throw new Error(\n        'firebase.firestore.Blob constructor is private, use Blob.<field>() instead.',\n      );\n    }\n\n    this._binaryString = binaryString;\n  }\n\n  /**\n   * Creates a new Blob from the given Base64 string\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#.fromBase64String\n   * @param base64 string\n   */\n  static fromBase64String(base64) {\n    if (!isString(base64) || base64.length < 1) {\n      throw new Error(\n        'firestore.Blob.fromBase64String expects a string of at least 1 character in length',\n      );\n    }\n\n    return new FirestoreBlob(true, Base64.atob(base64));\n  }\n\n  /**\n   * Creates a new Blob from the given Uint8Array.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#.fromUint8Array\n   * @param array Array\n   */\n  static fromUint8Array(array) {\n    if (!(array instanceof Uint8Array)) {\n      throw new Error('firestore.Blob.fromUint8Array expects an instance of Uint8Array');\n    }\n\n    return new FirestoreBlob(\n      true,\n      Array.prototype.map.call(array, $ => String.fromCharCode($)).join(''),\n    );\n  }\n\n  /**\n   * Returns 'true' if this Blob is equal to the provided one.\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#isEqual\n   * @param {*} blob Blob The Blob to compare against. Value must not be null.\n   * @returns boolean 'true' if this Blob is equal to the provided one.\n   */\n  isEqual(blob) {\n    if (!(blob instanceof FirestoreBlob)) {\n      throw new Error('firestore.Blob.isEqual expects an instance of Blob');\n    }\n\n    return this._binaryString === blob._binaryString;\n  }\n\n  /**\n   * Returns the bytes of a Blob as a Base64-encoded string.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#toBase64\n   * @returns string The Base64-encoded string created from the Blob object.\n   */\n  toBase64() {\n    return Base64.btoa(this._binaryString);\n  }\n\n  /**\n   * Returns the bytes of a Blob in a new Uint8Array.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#toUint8Array\n   * @returns non-null Uint8Array The Uint8Array created from the Blob object.\n   */\n  toUint8Array() {\n    return new Uint8Array(this._binaryString.split('').map(c => c.charCodeAt(0)));\n  }\n\n  /**\n   * Returns a string representation of this blob instance\n   *\n   * @returns {string}\n   * @memberof Blob\n   */\n  toString() {\n    return `firestore.Blob(base64: ${this.toBase64()})`;\n  }\n}\n"],"mappings":";;AAiBA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,uCAAuC;AAAC,IAEpDC,aAAa;EAChC,yBAA4C;IAAA,IAAhCC,QAAQ,uEAAG,KAAK;IAAA,IAAEC,YAAY;IAAA;IACxC,IAAID,QAAQ,KAAK,KAAK,EAAE;MACtB,MAAM,IAAIE,KAAK,CACb,6EAA6E,CAC9E;IACH;IAEA,IAAI,CAACC,aAAa,GAAGF,YAAY;EACnC;EAAC;IAAA;IAAA,OAyCD,iBAAQG,IAAI,EAAE;MACZ,IAAI,EAAEA,IAAI,YAAYL,aAAa,CAAC,EAAE;QACpC,MAAM,IAAIG,KAAK,CAAC,oDAAoD,CAAC;MACvE;MAEA,OAAO,IAAI,CAACC,aAAa,KAAKC,IAAI,CAACD,aAAa;IAClD;EAAC;IAAA;IAAA,OAQD,oBAAW;MACT,OAAON,MAAM,CAACQ,IAAI,CAAC,IAAI,CAACF,aAAa,CAAC;IACxC;EAAC;IAAA;IAAA,OAQD,wBAAe;MACb,OAAO,IAAIG,UAAU,CAAC,IAAI,CAACH,aAAa,CAACI,KAAK,CAAC,EAAE,CAAC,CAACC,GAAG,CAAC,UAAAC,CAAC;QAAA,OAAIA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC;MAAA,EAAC,CAAC;IAC/E;EAAC;IAAA;IAAA,OAQD,oBAAW;MACT,mCAAiC,IAAI,CAACC,QAAQ,EAAE;IAClD;EAAC;IAAA;IAAA,OArED,0BAAwBC,MAAM,EAAE;MAC9B,IAAI,CAACd,QAAQ,CAACc,MAAM,CAAC,IAAIA,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;QAC1C,MAAM,IAAIX,KAAK,CACb,oFAAoF,CACrF;MACH;MAEA,OAAO,IAAIH,aAAa,CAAC,IAAI,EAAEF,MAAM,CAACiB,IAAI,CAACF,MAAM,CAAC,CAAC;IACrD;EAAC;IAAA;IAAA,OAQD,wBAAsBG,KAAK,EAAE;MAC3B,IAAI,EAAEA,KAAK,YAAYT,UAAU,CAAC,EAAE;QAClC,MAAM,IAAIJ,KAAK,CAAC,iEAAiE,CAAC;MACpF;MAEA,OAAO,IAAIH,aAAa,CACtB,IAAI,EACJiB,KAAK,CAACC,SAAS,CAACT,GAAG,CAACU,IAAI,CAACH,KAAK,EAAE,UAAAI,CAAC;QAAA,OAAIC,MAAM,CAACC,YAAY,CAACF,CAAC,CAAC;MAAA,EAAC,CAACG,IAAI,CAAC,EAAE,CAAC,CACtE;IACH;EAAC;EAAA;AAAA;AAAA,SA1CkBvB,aAAa"},"metadata":{},"sourceType":"module"}