{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { isString } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentReference, { provideDocumentSnapshotClass } from \"./FirestoreDocumentReference\";\nimport FirestoreFieldPath, { fromDotSeparatedString } from \"./FirestoreFieldPath\";\nimport FirestorePath from \"./FirestorePath\";\nimport FirestoreSnapshotMetadata from \"./FirestoreSnapshotMetadata\";\nimport { extractFieldPathData } from \"./utils\";\nimport { parseNativeMap } from \"./utils/serialize\";\nvar FirestoreDocumentSnapshot = function () {\n  function FirestoreDocumentSnapshot(firestore, nativeData) {\n    _classCallCheck(this, FirestoreDocumentSnapshot);\n    this._data = parseNativeMap(firestore, nativeData.data);\n    this._metadata = new FirestoreSnapshotMetadata(nativeData.metadata);\n    this._ref = new FirestoreDocumentReference(firestore, FirestorePath.fromName(nativeData.path));\n    this._exists = nativeData.exists;\n  }\n  _createClass(FirestoreDocumentSnapshot, [{\n    key: \"exists\",\n    get: function get() {\n      return this._exists;\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._ref.id;\n    }\n  }, {\n    key: \"metadata\",\n    get: function get() {\n      return this._metadata;\n    }\n  }, {\n    key: \"ref\",\n    get: function get() {\n      return this._ref;\n    }\n  }, {\n    key: \"data\",\n    value: function data() {\n      return this._data;\n    }\n  }, {\n    key: \"get\",\n    value: function get(fieldPath) {\n      if (!isString(fieldPath) && !(fieldPath instanceof FirestoreFieldPath)) {\n        throw new Error(\"firebase.firestore() DocumentSnapshot.get(*) 'fieldPath' expected type string or FieldPath.\");\n      }\n      var path;\n      if (isString(fieldPath)) {\n        try {\n          path = fromDotSeparatedString(fieldPath);\n        } catch (e) {\n          throw new Error(\"firebase.firestore() DocumentSnapshot.get(*) 'fieldPath' \" + e.message + \".\");\n        }\n      } else {\n        path = fieldPath;\n      }\n      return extractFieldPathData(this._data, path._segments);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      if (!(other instanceof FirestoreDocumentSnapshot)) {\n        throw new Error(\"firebase.firestore() DocumentSnapshot.isEqual(*) 'other' expected a DocumentSnapshot instance.\");\n      }\n      if (this.exists !== other.exists || !this.metadata.isEqual(other.metadata) || !this.ref.isEqual(other.ref)) {\n        return false;\n      }\n      var thisData = JSON.stringify(this.data());\n      var otherData = JSON.stringify(other.data());\n      return thisData === otherData;\n    }\n  }]);\n  return FirestoreDocumentSnapshot;\n}();\nexport { FirestoreDocumentSnapshot as default };\nprovideDocumentSnapshotClass(FirestoreDocumentSnapshot);","map":{"version":3,"names":["isString","FirestoreDocumentReference","provideDocumentSnapshotClass","FirestoreFieldPath","fromDotSeparatedString","FirestorePath","FirestoreSnapshotMetadata","extractFieldPathData","parseNativeMap","FirestoreDocumentSnapshot","firestore","nativeData","_data","data","_metadata","metadata","_ref","fromName","path","_exists","exists","id","fieldPath","Error","e","message","_segments","other","isEqual","ref","thisData","JSON","stringify","otherData"],"sources":["/Users/sonminhnguyen/Documents/programming/react-native/school/astro_magnet_initial/astro_magnet/node_modules/@react-native-firebase/firestore/lib/FirestoreDocumentSnapshot.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isString } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentReference, {\n  provideDocumentSnapshotClass,\n} from './FirestoreDocumentReference';\nimport FirestoreFieldPath, { fromDotSeparatedString } from './FirestoreFieldPath';\nimport FirestorePath from './FirestorePath';\nimport FirestoreSnapshotMetadata from './FirestoreSnapshotMetadata';\nimport { extractFieldPathData } from './utils';\nimport { parseNativeMap } from './utils/serialize';\n\nexport default class FirestoreDocumentSnapshot {\n  constructor(firestore, nativeData) {\n    this._data = parseNativeMap(firestore, nativeData.data);\n    this._metadata = new FirestoreSnapshotMetadata(nativeData.metadata);\n    this._ref = new FirestoreDocumentReference(firestore, FirestorePath.fromName(nativeData.path));\n    this._exists = nativeData.exists;\n  }\n\n  get exists() {\n    return this._exists;\n  }\n\n  get id() {\n    return this._ref.id;\n  }\n\n  get metadata() {\n    return this._metadata;\n  }\n\n  get ref() {\n    return this._ref;\n  }\n\n  data() {\n    // TODO: ehesp: Figure out how to handle this.\n    // const snapshotOptions = {};\n    //\n    // if (!isUndefined(options)) {\n    //   if (!isObject(options)) {\n    //     throw new Error(\n    //       `firebase.firestore() DocumentSnapshot.data(*) 'options' expected an object if defined.`,\n    //     );\n    //   }\n    //\n    //   if (\n    //     options.serverTimestamps &&\n    //     options.serverTimestamps !== 'estimate' &&\n    //     options.serverTimestamps !== 'previous' &&\n    //     options.serverTimestamps !== 'none'\n    //   ) {\n    //     throw new Error(\n    //       `firebase.firestore() DocumentSnapshot.data(*) 'options.serverTimestamps' expected one of 'estimate', 'previous' or 'none'.`,\n    //     );\n    //   }\n    // }\n\n    return this._data;\n  }\n\n  get(fieldPath) {\n    // TODO: ehesp: How are SnapshotOptions handled?\n\n    if (!isString(fieldPath) && !(fieldPath instanceof FirestoreFieldPath)) {\n      throw new Error(\n        \"firebase.firestore() DocumentSnapshot.get(*) 'fieldPath' expected type string or FieldPath.\",\n      );\n    }\n\n    let path;\n\n    if (isString(fieldPath)) {\n      try {\n        path = fromDotSeparatedString(fieldPath);\n      } catch (e) {\n        throw new Error(`firebase.firestore() DocumentSnapshot.get(*) 'fieldPath' ${e.message}.`);\n      }\n    } else {\n      // Is already field path\n      path = fieldPath;\n    }\n\n    return extractFieldPathData(this._data, path._segments);\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreDocumentSnapshot)) {\n      throw new Error(\n        \"firebase.firestore() DocumentSnapshot.isEqual(*) 'other' expected a DocumentSnapshot instance.\",\n      );\n    }\n\n    if (\n      this.exists !== other.exists ||\n      !this.metadata.isEqual(other.metadata) ||\n      !this.ref.isEqual(other.ref)\n    ) {\n      return false;\n    }\n\n    const thisData = JSON.stringify(this.data());\n    const otherData = JSON.stringify(other.data());\n\n    return thisData === otherData;\n  }\n}\n\n// To avoid React Native require cycle\nprovideDocumentSnapshotClass(FirestoreDocumentSnapshot);\n"],"mappings":";;AAiBA,SAASA,QAAQ,QAAQ,uCAAuC;AAChE,OAAOC,0BAA0B,IAC/BC,4BAA4B;AAE9B,OAAOC,kBAAkB,IAAIC,sBAAsB;AACnD,OAAOC,aAAa;AACpB,OAAOC,yBAAyB;AAChC,SAASC,oBAAoB;AAC7B,SAASC,cAAc;AAA4B,IAE9BC,yBAAyB;EAC5C,mCAAYC,SAAS,EAAEC,UAAU,EAAE;IAAA;IACjC,IAAI,CAACC,KAAK,GAAGJ,cAAc,CAACE,SAAS,EAAEC,UAAU,CAACE,IAAI,CAAC;IACvD,IAAI,CAACC,SAAS,GAAG,IAAIR,yBAAyB,CAACK,UAAU,CAACI,QAAQ,CAAC;IACnE,IAAI,CAACC,IAAI,GAAG,IAAIf,0BAA0B,CAACS,SAAS,EAAEL,aAAa,CAACY,QAAQ,CAACN,UAAU,CAACO,IAAI,CAAC,CAAC;IAC9F,IAAI,CAACC,OAAO,GAAGR,UAAU,CAACS,MAAM;EAClC;EAAC;IAAA;IAAA,KAED,eAAa;MACX,OAAO,IAAI,CAACD,OAAO;IACrB;EAAC;IAAA;IAAA,KAED,eAAS;MACP,OAAO,IAAI,CAACH,IAAI,CAACK,EAAE;IACrB;EAAC;IAAA;IAAA,KAED,eAAe;MACb,OAAO,IAAI,CAACP,SAAS;IACvB;EAAC;IAAA;IAAA,KAED,eAAU;MACR,OAAO,IAAI,CAACE,IAAI;IAClB;EAAC;IAAA;IAAA,OAED,gBAAO;MAuBL,OAAO,IAAI,CAACJ,KAAK;IACnB;EAAC;IAAA;IAAA,OAED,aAAIU,SAAS,EAAE;MAGb,IAAI,CAACtB,QAAQ,CAACsB,SAAS,CAAC,IAAI,EAAEA,SAAS,YAAYnB,kBAAkB,CAAC,EAAE;QACtE,MAAM,IAAIoB,KAAK,CACb,6FAA6F,CAC9F;MACH;MAEA,IAAIL,IAAI;MAER,IAAIlB,QAAQ,CAACsB,SAAS,CAAC,EAAE;QACvB,IAAI;UACFJ,IAAI,GAAGd,sBAAsB,CAACkB,SAAS,CAAC;QAC1C,CAAC,CAAC,OAAOE,CAAC,EAAE;UACV,MAAM,IAAID,KAAK,+DAA6DC,CAAC,CAACC,OAAO,OAAI;QAC3F;MACF,CAAC,MAAM;QAELP,IAAI,GAAGI,SAAS;MAClB;MAEA,OAAOf,oBAAoB,CAAC,IAAI,CAACK,KAAK,EAAEM,IAAI,CAACQ,SAAS,CAAC;IACzD;EAAC;IAAA;IAAA,OAED,iBAAQC,KAAK,EAAE;MACb,IAAI,EAAEA,KAAK,YAAYlB,yBAAyB,CAAC,EAAE;QACjD,MAAM,IAAIc,KAAK,CACb,gGAAgG,CACjG;MACH;MAEA,IACE,IAAI,CAACH,MAAM,KAAKO,KAAK,CAACP,MAAM,IAC5B,CAAC,IAAI,CAACL,QAAQ,CAACa,OAAO,CAACD,KAAK,CAACZ,QAAQ,CAAC,IACtC,CAAC,IAAI,CAACc,GAAG,CAACD,OAAO,CAACD,KAAK,CAACE,GAAG,CAAC,EAC5B;QACA,OAAO,KAAK;MACd;MAEA,IAAMC,QAAQ,GAAGC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACnB,IAAI,EAAE,CAAC;MAC5C,IAAMoB,SAAS,GAAGF,IAAI,CAACC,SAAS,CAACL,KAAK,CAACd,IAAI,EAAE,CAAC;MAE9C,OAAOiB,QAAQ,KAAKG,SAAS;IAC/B;EAAC;EAAA;AAAA;AAAA,SA9FkBxB,yBAAyB;AAkG9CP,4BAA4B,CAACO,yBAAyB,CAAC"},"metadata":{},"sourceType":"module"}