{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { isArray, isNumber } from '@react-native-firebase/app/lib/common';\nimport { buildNativeArray, provideFieldValueClass } from \"./utils/serialize\";\nexport var TypeFieldValueDelete = 'delete';\nexport var TypeFieldValueIncrement = 'increment';\nexport var TypeFieldValueRemove = 'array_remove';\nexport var TypeFieldValueUnion = 'array_union';\nexport var TypeFieldValueTimestamp = 'timestamp';\nfunction validateArrayElements(elements) {\n  for (var i = 0; i < elements.length; i++) {\n    var element = elements[i];\n    if (element instanceof FirestoreFieldValue) {\n      throw new Error('FieldValue instance cannot be used with other FieldValue methods.');\n    }\n    if (isArray(element)) {\n      throw new Error('Nested arrays are not supported');\n    }\n  }\n}\nvar FirestoreFieldValue = function () {\n  function FirestoreFieldValue() {\n    var internal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var type = arguments.length > 1 ? arguments[1] : undefined;\n    var elements = arguments.length > 2 ? arguments[2] : undefined;\n    _classCallCheck(this, FirestoreFieldValue);\n    if (internal === false) {\n      throw new Error('firebase.firestore.FieldValue constructor is private, use FieldValue.<field>() instead.');\n    }\n    this._type = type;\n    this._elements = elements;\n  }\n  _createClass(FirestoreFieldValue, [{\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      if (!(other instanceof FirestoreFieldValue)) {\n        throw new Error(\"firebase.firestore.FieldValue.isEqual(*) 'other' expected a FieldValue instance.\");\n      }\n      return this._type === other._type && JSON.stringify(this._elements) === JSON.stringify(other._elements);\n    }\n  }], [{\n    key: \"delete\",\n    value: function _delete() {\n      return new FirestoreFieldValue(true, TypeFieldValueDelete);\n    }\n  }, {\n    key: \"increment\",\n    value: function increment(n) {\n      if (!isNumber(n)) {\n        throw new Error(\"firebase.firestore.FieldValue.increment(*) 'n' expected a number value.\");\n      }\n      return new FirestoreFieldValue(true, TypeFieldValueIncrement, n);\n    }\n  }, {\n    key: \"serverTimestamp\",\n    value: function serverTimestamp() {\n      return new FirestoreFieldValue(true, TypeFieldValueTimestamp);\n    }\n  }, {\n    key: \"arrayUnion\",\n    value: function arrayUnion() {\n      for (var _len = arguments.length, elements = new Array(_len), _key = 0; _key < _len; _key++) {\n        elements[_key] = arguments[_key];\n      }\n      try {\n        validateArrayElements(elements);\n      } catch (e) {\n        throw new Error(\"firebase.firestore.FieldValue.arrayUnion(*) 'elements' called with invalid data. \" + e.message);\n      }\n      return new FirestoreFieldValue(true, TypeFieldValueUnion, buildNativeArray(elements));\n    }\n  }, {\n    key: \"arrayRemove\",\n    value: function arrayRemove() {\n      for (var _len2 = arguments.length, elements = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        elements[_key2] = arguments[_key2];\n      }\n      try {\n        validateArrayElements(elements);\n      } catch (e) {\n        throw new Error(\"firebase.firestore.FieldValue.arrayRemove(*) 'elements' called with invalid data. \" + e.message);\n      }\n      return new FirestoreFieldValue(true, TypeFieldValueRemove, buildNativeArray(elements));\n    }\n  }]);\n  return FirestoreFieldValue;\n}();\nexport { FirestoreFieldValue as default };\nprovideFieldValueClass(FirestoreFieldValue);","map":{"version":3,"names":["isArray","isNumber","buildNativeArray","provideFieldValueClass","TypeFieldValueDelete","TypeFieldValueIncrement","TypeFieldValueRemove","TypeFieldValueUnion","TypeFieldValueTimestamp","validateArrayElements","elements","i","length","element","FirestoreFieldValue","Error","internal","type","_type","_elements","other","JSON","stringify","n","e","message"],"sources":["/Users/sonminhnguyen/Documents/programming/react-native/school/astro_magnet_initial/astro_magnet/node_modules/@react-native-firebase/firestore/lib/FirestoreFieldValue.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isArray, isNumber } from '@react-native-firebase/app/lib/common';\nimport { buildNativeArray, provideFieldValueClass } from './utils/serialize';\n\nexport const TypeFieldValueDelete = 'delete';\nexport const TypeFieldValueIncrement = 'increment';\nexport const TypeFieldValueRemove = 'array_remove';\nexport const TypeFieldValueUnion = 'array_union';\nexport const TypeFieldValueTimestamp = 'timestamp';\n\nfunction validateArrayElements(elements) {\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n\n    if (element instanceof FirestoreFieldValue) {\n      throw new Error('FieldValue instance cannot be used with other FieldValue methods.');\n    }\n\n    if (isArray(element)) {\n      throw new Error('Nested arrays are not supported');\n    }\n  }\n}\n\nexport default class FirestoreFieldValue {\n  constructor(internal = false, type, elements) {\n    if (internal === false) {\n      throw new Error(\n        'firebase.firestore.FieldValue constructor is private, use FieldValue.<field>() instead.',\n      );\n    }\n\n    this._type = type;\n    this._elements = elements;\n  }\n\n  static delete() {\n    return new FirestoreFieldValue(true, TypeFieldValueDelete);\n  }\n\n  static increment(n) {\n    if (!isNumber(n)) {\n      throw new Error(\"firebase.firestore.FieldValue.increment(*) 'n' expected a number value.\");\n    }\n\n    return new FirestoreFieldValue(true, TypeFieldValueIncrement, n);\n  }\n\n  static serverTimestamp() {\n    return new FirestoreFieldValue(true, TypeFieldValueTimestamp);\n  }\n\n  static arrayUnion(...elements) {\n    try {\n      validateArrayElements(elements);\n    } catch (e) {\n      throw new Error(\n        `firebase.firestore.FieldValue.arrayUnion(*) 'elements' called with invalid data. ${e.message}`,\n      );\n    }\n\n    return new FirestoreFieldValue(true, TypeFieldValueUnion, buildNativeArray(elements));\n  }\n\n  static arrayRemove(...elements) {\n    try {\n      validateArrayElements(elements);\n    } catch (e) {\n      throw new Error(\n        `firebase.firestore.FieldValue.arrayRemove(*) 'elements' called with invalid data. ${e.message}`,\n      );\n    }\n\n    return new FirestoreFieldValue(true, TypeFieldValueRemove, buildNativeArray(elements));\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreFieldValue)) {\n      throw new Error(\n        \"firebase.firestore.FieldValue.isEqual(*) 'other' expected a FieldValue instance.\",\n      );\n    }\n\n    return (\n      this._type === other._type &&\n      JSON.stringify(this._elements) === JSON.stringify(other._elements)\n    );\n  }\n}\n\nprovideFieldValueClass(FirestoreFieldValue); // serialize\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}